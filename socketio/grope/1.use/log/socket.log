Socket {
  nsp: 
   Namespace {
     name: '/',
     server: 
      Server {
        nsps: { '/': [Circular] },
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Circular],
        eio: 
         Server {
           clients: 
            { A6RWxddJuNa2BXdbAAAA: 
               Socket {
                 id: 'A6RWxddJuNa2BXdbAAAA',
                 server: [Circular],
                 upgrading: false,
                 upgraded: false,
                 readyState: 'open',
                 writeBuffer: [],
                 packetsFn: [],
                 sentCallbackFn: [],
                 cleanupFn: [ [Function], [Function] ],
                 request: 
                  IncomingMessage {
                    _readableState: 
                     ReadableState {
                       objectMode: false,
                       highWaterMark: 16384,
                       buffer: [],
                       length: 0,
                       pipes: null,
                       pipesCount: 0,
                       flowing: null,
                       ended: false,
                       endEmitted: false,
                       reading: false,
                       sync: true,
                       needReadable: false,
                       emittedReadable: false,
                       readableListening: false,
                       resumeScheduled: false,
                       defaultEncoding: 'utf8',
                       ranOut: false,
                       awaitDrain: 0,
                       readingMore: false,
                       decoder: null,
                       encoding: null },
                    readable: true,
                    domain: null,
                    _events: {},
                    _eventsCount: 0,
                    _maxListeners: undefined,
                    socket: 
                     Socket {
                       _connecting: false,
                       _hadError: false,
                       _handle: 
                        TCP {
                          _externalStream: {},
                          fd: -1,
                          reading: true,
                          owner: [Circular],
                          onread: [Function: onread],
                          onconnection: null,
                          writeQueueSize: 0 },
                       _parent: null,
                       _host: null,
                       _readableState: 
                        ReadableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          buffer: [],
                          length: 0,
                          pipes: null,
                          pipesCount: 0,
                          flowing: true,
                          ended: false,
                          endEmitted: false,
                          reading: true,
                          sync: false,
                          needReadable: true,
                          emittedReadable: false,
                          readableListening: false,
                          resumeScheduled: false,
                          defaultEncoding: 'utf8',
                          ranOut: false,
                          awaitDrain: 0,
                          readingMore: false,
                          decoder: null,
                          encoding: null },
                       readable: true,
                       domain: null,
                       _events: 
                        { end: 
                           [ { [Function: g] listener: [Function: onend] },
                             [Function: socketOnEnd] ],
                          finish: [Function: onSocketFinish],
                          _socketEnd: [Function: onSocketEnd],
                          drain: [ [Function: ondrain], [Function: socketOnDrain] ],
                          timeout: [Function],
                          error: [Function: socketOnError],
                          close: 
                           [ [Function: serverSocketCloseListener],
                             [Function: onServerResponseClose] ],
                          data: [Function: socketOnData],
                          resume: [Function: onSocketResume],
                          pause: [Function: onSocketPause] },
                       _eventsCount: 10,
                       _maxListeners: undefined,
                       _writableState: 
                        WritableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          needDrain: false,
                          ending: false,
                          ended: false,
                          finished: false,
                          decodeStrings: false,
                          defaultEncoding: 'utf8',
                          length: 0,
                          writing: false,
                          corked: 0,
                          sync: false,
                          bufferProcessing: false,
                          onwrite: [Function],
                          writecb: null,
                          writelen: 0,
                          bufferedRequest: null,
                          lastBufferedRequest: null,
                          pendingcb: 3,
                          prefinished: false,
                          errorEmitted: false },
                       writable: true,
                       allowHalfOpen: true,
                       destroyed: false,
                       bytesRead: 0,
                       _bytesDispatched: 311,
                       _sockname: null,
                       _pendingData: null,
                       _pendingEncoding: '',
                       server: 
                        Server {
                          domain: null,
                          _events: 
                           { connection: [Function: connectionListener],
                             clientError: [Function],
                             close: [Function: bound ],
                             upgrade: [Function],
                             request: [Function] },
                          _eventsCount: 5,
                          _maxListeners: undefined,
                          _connections: 1,
                          _handle: 
                           TCP {
                             _externalStream: {},
                             fd: -1,
                             reading: false,
                             owner: [Circular],
                             onread: null,
                             onconnection: [Function: onconnection],
                             writeQueueSize: 0 },
                          _usingSlaves: false,
                          _slaves: [],
                          _unref: false,
                          allowHalfOpen: true,
                          pauseOnConnect: false,
                          httpAllowHalfOpen: false,
                          timeout: 120000,
                          _pendingResponseData: 0,
                          _connectionKey: '6::::8080' },
                       _idleTimeout: 120000,
                       _idleNext: 
                        { [Function: utcDate]
                          _onTimeout: [Function],
                          _idleTimeout: 5,
                          _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
                          _idlePrev: [Circular],
                          _idleStart: 995 },
                       _idlePrev: 
                        { _idleNext: [Circular],
                          _idlePrev: 
                           { [Function: utcDate]
                             _onTimeout: [Function],
                             _idleTimeout: 5,
                             _idleNext: [Circular],
                             _idlePrev: [Circular],
                             _idleStart: 995 } },
                       _idleStart: 997,
                       parser: 
                        HTTPParser {
                          '0': [Function: parserOnHeaders],
                          '1': [Function: parserOnHeadersComplete],
                          '2': [Function: parserOnBody],
                          '3': [Function: parserOnMessageComplete],
                          '4': [Function: onParserExecute],
                          _headers: [],
                          _url: '',
                          _consumed: true,
                          socket: [Circular],
                          incoming: [Circular],
                          maxHeaderPairs: 2000,
                          onIncoming: [Function: parserOnIncoming] },
                       on: [Function: socketOnWrap],
                       _paused: false,
                       read: [Function],
                       _consuming: true,
                       _httpMessage: 
                        ServerResponse {
                          domain: null,
                          _events: { finish: [Function: resOnFinish] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          output: [],
                          outputEncodings: [],
                          outputCallbacks: [],
                          outputSize: 0,
                          writable: true,
                          _last: false,
                          chunkedEncoding: false,
                          shouldKeepAlive: true,
                          useChunkedEncodingByDefault: true,
                          sendDate: true,
                          _removedHeader: {},
                          _contentLength: null,
                          _hasBody: true,
                          _trailer: '',
                          finished: true,
                          _headerSent: true,
                          socket: [Circular],
                          connection: [Circular],
                          _header: 'HTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-Length: 101\r\nAccess-Control-Allow-Origin: *\r\nSet-Cookie: io=A6RWxddJuNa2BXdbAAAA\r\nDate: Fri, 25 Mar 2016 05:34:04 GMT\r\nConnection: keep-alive\r\n\r\n',
                          _headers: null,
                          _headerNames: {},
                          _onPendingData: [Function: updateOutgoingData],
                          statusMessage: 'OK',
                          statusCode: 200 },
                       _peername: { address: '::1', family: 'IPv6', port: 50070 } },
                    connection: 
                     Socket {
                       _connecting: false,
                       _hadError: false,
                       _handle: 
                        TCP {
                          _externalStream: {},
                          fd: -1,
                          reading: true,
                          owner: [Circular],
                          onread: [Function: onread],
                          onconnection: null,
                          writeQueueSize: 0 },
                       _parent: null,
                       _host: null,
                       _readableState: 
                        ReadableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          buffer: [],
                          length: 0,
                          pipes: null,
                          pipesCount: 0,
                          flowing: true,
                          ended: false,
                          endEmitted: false,
                          reading: true,
                          sync: false,
                          needReadable: true,
                          emittedReadable: false,
                          readableListening: false,
                          resumeScheduled: false,
                          defaultEncoding: 'utf8',
                          ranOut: false,
                          awaitDrain: 0,
                          readingMore: false,
                          decoder: null,
                          encoding: null },
                       readable: true,
                       domain: null,
                       _events: 
                        { end: 
                           [ { [Function: g] listener: [Function: onend] },
                             [Function: socketOnEnd] ],
                          finish: [Function: onSocketFinish],
                          _socketEnd: [Function: onSocketEnd],
                          drain: [ [Function: ondrain], [Function: socketOnDrain] ],
                          timeout: [Function],
                          error: [Function: socketOnError],
                          close: 
                           [ [Function: serverSocketCloseListener],
                             [Function: onServerResponseClose] ],
                          data: [Function: socketOnData],
                          resume: [Function: onSocketResume],
                          pause: [Function: onSocketPause] },
                       _eventsCount: 10,
                       _maxListeners: undefined,
                       _writableState: 
                        WritableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          needDrain: false,
                          ending: false,
                          ended: false,
                          finished: false,
                          decodeStrings: false,
                          defaultEncoding: 'utf8',
                          length: 0,
                          writing: false,
                          corked: 0,
                          sync: false,
                          bufferProcessing: false,
                          onwrite: [Function],
                          writecb: null,
                          writelen: 0,
                          bufferedRequest: null,
                          lastBufferedRequest: null,
                          pendingcb: 3,
                          prefinished: false,
                          errorEmitted: false },
                       writable: true,
                       allowHalfOpen: true,
                       destroyed: false,
                       bytesRead: 0,
                       _bytesDispatched: 311,
                       _sockname: null,
                       _pendingData: null,
                       _pendingEncoding: '',
                       server: 
                        Server {
                          domain: null,
                          _events: 
                           { connection: [Function: connectionListener],
                             clientError: [Function],
                             close: [Function: bound ],
                             upgrade: [Function],
                             request: [Function] },
                          _eventsCount: 5,
                          _maxListeners: undefined,
                          _connections: 1,
                          _handle: 
                           TCP {
                             _externalStream: {},
                             fd: -1,
                             reading: false,
                             owner: [Circular],
                             onread: null,
                             onconnection: [Function: onconnection],
                             writeQueueSize: 0 },
                          _usingSlaves: false,
                          _slaves: [],
                          _unref: false,
                          allowHalfOpen: true,
                          pauseOnConnect: false,
                          httpAllowHalfOpen: false,
                          timeout: 120000,
                          _pendingResponseData: 0,
                          _connectionKey: '6::::8080' },
                       _idleTimeout: 120000,
                       _idleNext: 
                        { [Function: utcDate]
                          _onTimeout: [Function],
                          _idleTimeout: 5,
                          _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
                          _idlePrev: [Circular],
                          _idleStart: 995 },
                       _idlePrev: 
                        { _idleNext: [Circular],
                          _idlePrev: 
                           { [Function: utcDate]
                             _onTimeout: [Function],
                             _idleTimeout: 5,
                             _idleNext: [Circular],
                             _idlePrev: [Circular],
                             _idleStart: 995 } },
                       _idleStart: 997,
                       parser: 
                        HTTPParser {
                          '0': [Function: parserOnHeaders],
                          '1': [Function: parserOnHeadersComplete],
                          '2': [Function: parserOnBody],
                          '3': [Function: parserOnMessageComplete],
                          '4': [Function: onParserExecute],
                          _headers: [],
                          _url: '',
                          _consumed: true,
                          socket: [Circular],
                          incoming: [Circular],
                          maxHeaderPairs: 2000,
                          onIncoming: [Function: parserOnIncoming] },
                       on: [Function: socketOnWrap],
                       _paused: false,
                       read: [Function],
                       _consuming: true,
                       _httpMessage: 
                        ServerResponse {
                          domain: null,
                          _events: { finish: [Function: resOnFinish] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          output: [],
                          outputEncodings: [],
                          outputCallbacks: [],
                          outputSize: 0,
                          writable: true,
                          _last: false,
                          chunkedEncoding: false,
                          shouldKeepAlive: true,
                          useChunkedEncodingByDefault: true,
                          sendDate: true,
                          _removedHeader: {},
                          _contentLength: null,
                          _hasBody: true,
                          _trailer: '',
                          finished: true,
                          _headerSent: true,
                          socket: [Circular],
                          connection: [Circular],
                          _header: 'HTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-Length: 101\r\nAccess-Control-Allow-Origin: *\r\nSet-Cookie: io=A6RWxddJuNa2BXdbAAAA\r\nDate: Fri, 25 Mar 2016 05:34:04 GMT\r\nConnection: keep-alive\r\n\r\n',
                          _headers: null,
                          _headerNames: {},
                          _onPendingData: [Function: updateOutgoingData],
                          statusMessage: 'OK',
                          statusCode: 200 },
                       _peername: { address: '::1', family: 'IPv6', port: 50070 } },
                    httpVersionMajor: 1,
                    httpVersionMinor: 1,
                    httpVersion: '1.1',
                    complete: false,
                    headers: 
                     { host: 'localhost:8080',
                       connection: 'keep-alive',
                       pragma: 'no-cache',
                       'cache-control': 'no-cache',
                       'user-agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.132 Safari/537.36',
                       accept: '*/*',
                       referer: 'http://localhost:8080/',
                       'accept-encoding': 'gzip, deflate, sdch',
                       'accept-language': 'zh-CN,zh;q=0.8,en;q=0.6',
                       cookie: 'io=B5ehkX7J-gME2Jd5AAAA; amvid=7b2309f47fa4b428ae50a46e3d3c4381' },
                    rawHeaders: 
                     [ 'Host',
                       'localhost:8080',
                       'Connection',
                       'keep-alive',
                       'Pragma',
                       'no-cache',
                       'Cache-Control',
                       'no-cache',
                       'User-Agent',
                       'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.132 Safari/537.36',
                       'Accept',
                       '*/*',
                       'Referer',
                       'http://localhost:8080/',
                       'Accept-Encoding',
                       'gzip, deflate, sdch',
                       'Accept-Language',
                       'zh-CN,zh;q=0.8,en;q=0.6',
                       'Cookie',
                       'io=B5ehkX7J-gME2Jd5AAAA; amvid=7b2309f47fa4b428ae50a46e3d3c4381' ],
                    trailers: {},
                    rawTrailers: [],
                    upgrade: false,
                    url: '/socket.io/?EIO=3&transport=polling&t=LEiG-Ij',
                    method: 'GET',
                    statusCode: null,
                    statusMessage: null,
                    client: 
                     Socket {
                       _connecting: false,
                       _hadError: false,
                       _handle: 
                        TCP {
                          _externalStream: {},
                          fd: -1,
                          reading: true,
                          owner: [Circular],
                          onread: [Function: onread],
                          onconnection: null,
                          writeQueueSize: 0 },
                       _parent: null,
                       _host: null,
                       _readableState: 
                        ReadableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          buffer: [],
                          length: 0,
                          pipes: null,
                          pipesCount: 0,
                          flowing: true,
                          ended: false,
                          endEmitted: false,
                          reading: true,
                          sync: false,
                          needReadable: true,
                          emittedReadable: false,
                          readableListening: false,
                          resumeScheduled: false,
                          defaultEncoding: 'utf8',
                          ranOut: false,
                          awaitDrain: 0,
                          readingMore: false,
                          decoder: null,
                          encoding: null },
                       readable: true,
                       domain: null,
                       _events: 
                        { end: 
                           [ { [Function: g] listener: [Function: onend] },
                             [Function: socketOnEnd] ],
                          finish: [Function: onSocketFinish],
                          _socketEnd: [Function: onSocketEnd],
                          drain: [ [Function: ondrain], [Function: socketOnDrain] ],
                          timeout: [Function],
                          error: [Function: socketOnError],
                          close: 
                           [ [Function: serverSocketCloseListener],
                             [Function: onServerResponseClose] ],
                          data: [Function: socketOnData],
                          resume: [Function: onSocketResume],
                          pause: [Function: onSocketPause] },
                       _eventsCount: 10,
                       _maxListeners: undefined,
                       _writableState: 
                        WritableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          needDrain: false,
                          ending: false,
                          ended: false,
                          finished: false,
                          decodeStrings: false,
                          defaultEncoding: 'utf8',
                          length: 0,
                          writing: false,
                          corked: 0,
                          sync: false,
                          bufferProcessing: false,
                          onwrite: [Function],
                          writecb: null,
                          writelen: 0,
                          bufferedRequest: null,
                          lastBufferedRequest: null,
                          pendingcb: 3,
                          prefinished: false,
                          errorEmitted: false },
                       writable: true,
                       allowHalfOpen: true,
                       destroyed: false,
                       bytesRead: 0,
                       _bytesDispatched: 311,
                       _sockname: null,
                       _pendingData: null,
                       _pendingEncoding: '',
                       server: 
                        Server {
                          domain: null,
                          _events: 
                           { connection: [Function: connectionListener],
                             clientError: [Function],
                             close: [Function: bound ],
                             upgrade: [Function],
                             request: [Function] },
                          _eventsCount: 5,
                          _maxListeners: undefined,
                          _connections: 1,
                          _handle: 
                           TCP {
                             _externalStream: {},
                             fd: -1,
                             reading: false,
                             owner: [Circular],
                             onread: null,
                             onconnection: [Function: onconnection],
                             writeQueueSize: 0 },
                          _usingSlaves: false,
                          _slaves: [],
                          _unref: false,
                          allowHalfOpen: true,
                          pauseOnConnect: false,
                          httpAllowHalfOpen: false,
                          timeout: 120000,
                          _pendingResponseData: 0,
                          _connectionKey: '6::::8080' },
                       _idleTimeout: 120000,
                       _idleNext: 
                        { [Function: utcDate]
                          _onTimeout: [Function],
                          _idleTimeout: 5,
                          _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
                          _idlePrev: [Circular],
                          _idleStart: 995 },
                       _idlePrev: 
                        { _idleNext: [Circular],
                          _idlePrev: 
                           { [Function: utcDate]
                             _onTimeout: [Function],
                             _idleTimeout: 5,
                             _idleNext: [Circular],
                             _idlePrev: [Circular],
                             _idleStart: 995 } },
                       _idleStart: 997,
                       parser: 
                        HTTPParser {
                          '0': [Function: parserOnHeaders],
                          '1': [Function: parserOnHeadersComplete],
                          '2': [Function: parserOnBody],
                          '3': [Function: parserOnMessageComplete],
                          '4': [Function: onParserExecute],
                          _headers: [],
                          _url: '',
                          _consumed: true,
                          socket: [Circular],
                          incoming: [Circular],
                          maxHeaderPairs: 2000,
                          onIncoming: [Function: parserOnIncoming] },
                       on: [Function: socketOnWrap],
                       _paused: false,
                       read: [Function],
                       _consuming: true,
                       _httpMessage: 
                        ServerResponse {
                          domain: null,
                          _events: { finish: [Function: resOnFinish] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          output: [],
                          outputEncodings: [],
                          outputCallbacks: [],
                          outputSize: 0,
                          writable: true,
                          _last: false,
                          chunkedEncoding: false,
                          shouldKeepAlive: true,
                          useChunkedEncodingByDefault: true,
                          sendDate: true,
                          _removedHeader: {},
                          _contentLength: null,
                          _hasBody: true,
                          _trailer: '',
                          finished: true,
                          _headerSent: true,
                          socket: [Circular],
                          connection: [Circular],
                          _header: 'HTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-Length: 101\r\nAccess-Control-Allow-Origin: *\r\nSet-Cookie: io=A6RWxddJuNa2BXdbAAAA\r\nDate: Fri, 25 Mar 2016 05:34:04 GMT\r\nConnection: keep-alive\r\n\r\n',
                          _headers: null,
                          _headerNames: {},
                          _onPendingData: [Function: updateOutgoingData],
                          statusMessage: 'OK',
                          statusCode: 200 },
                       _peername: { address: '::1', family: 'IPv6', port: 50070 } },
                    _consuming: false,
                    _dumped: false,
                    _query: { EIO: '3', transport: 'polling', t: 'LEiG-Ij' },
                    res: 
                     ServerResponse {
                       domain: null,
                       _events: { finish: [Function: resOnFinish] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       output: [],
                       outputEncodings: [],
                       outputCallbacks: [],
                       outputSize: 0,
                       writable: true,
                       _last: false,
                       chunkedEncoding: false,
                       shouldKeepAlive: true,
                       useChunkedEncodingByDefault: true,
                       sendDate: true,
                       _removedHeader: {},
                       _contentLength: null,
                       _hasBody: true,
                       _trailer: '',
                       finished: true,
                       _headerSent: true,
                       socket: 
                        Socket {
                          _connecting: false,
                          _hadError: false,
                          _handle: 
                           TCP {
                             _externalStream: {},
                             fd: -1,
                             reading: true,
                             owner: [Circular],
                             onread: [Function: onread],
                             onconnection: null,
                             writeQueueSize: 0 },
                          _parent: null,
                          _host: null,
                          _readableState: 
                           ReadableState {
                             objectMode: false,
                             highWaterMark: 16384,
                             buffer: [],
                             length: 0,
                             pipes: null,
                             pipesCount: 0,
                             flowing: true,
                             ended: false,
                             endEmitted: false,
                             reading: true,
                             sync: false,
                             needReadable: true,
                             emittedReadable: false,
                             readableListening: false,
                             resumeScheduled: false,
                             defaultEncoding: 'utf8',
                             ranOut: false,
                             awaitDrain: 0,
                             readingMore: false,
                             decoder: null,
                             encoding: null },
                          readable: true,
                          domain: null,
                          _events: 
                           { end: 
                              [ { [Function: g] listener: [Function: onend] },
                                [Function: socketOnEnd] ],
                             finish: [Function: onSocketFinish],
                             _socketEnd: [Function: onSocketEnd],
                             drain: [ [Function: ondrain], [Function: socketOnDrain] ],
                             timeout: [Function],
                             error: [Function: socketOnError],
                             close: 
                              [ [Function: serverSocketCloseListener],
                                [Function: onServerResponseClose] ],
                             data: [Function: socketOnData],
                             resume: [Function: onSocketResume],
                             pause: [Function: onSocketPause] },
                          _eventsCount: 10,
                          _maxListeners: undefined,
                          _writableState: 
                           WritableState {
                             objectMode: false,
                             highWaterMark: 16384,
                             needDrain: false,
                             ending: false,
                             ended: false,
                             finished: false,
                             decodeStrings: false,
                             defaultEncoding: 'utf8',
                             length: 0,
                             writing: false,
                             corked: 0,
                             sync: false,
                             bufferProcessing: false,
                             onwrite: [Function],
                             writecb: null,
                             writelen: 0,
                             bufferedRequest: null,
                             lastBufferedRequest: null,
                             pendingcb: 3,
                             prefinished: false,
                             errorEmitted: false },
                          writable: true,
                          allowHalfOpen: true,
                          destroyed: false,
                          bytesRead: 0,
                          _bytesDispatched: 311,
                          _sockname: null,
                          _pendingData: null,
                          _pendingEncoding: '',
                          server: 
                           Server {
                             domain: null,
                             _events: 
                              { connection: [Function: connectionListener],
                                clientError: [Function],
                                close: [Function: bound ],
                                upgrade: [Function],
                                request: [Function] },
                             _eventsCount: 5,
                             _maxListeners: undefined,
                             _connections: 1,
                             _handle: 
                              TCP {
                                _externalStream: {},
                                fd: -1,
                                reading: false,
                                owner: [Circular],
                                onread: null,
                                onconnection: [Function: onconnection],
                                writeQueueSize: 0 },
                             _usingSlaves: false,
                             _slaves: [],
                             _unref: false,
                             allowHalfOpen: true,
                             pauseOnConnect: false,
                             httpAllowHalfOpen: false,
                             timeout: 120000,
                             _pendingResponseData: 0,
                             _connectionKey: '6::::8080' },
                          _idleTimeout: 120000,
                          _idleNext: 
                           { [Function: utcDate]
                             _onTimeout: [Function],
                             _idleTimeout: 5,
                             _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
                             _idlePrev: [Circular],
                             _idleStart: 995 },
                          _idlePrev: 
                           { _idleNext: [Circular],
                             _idlePrev: 
                              { [Function: utcDate]
                                _onTimeout: [Function],
                                _idleTimeout: 5,
                                _idleNext: [Circular],
                                _idlePrev: [Circular],
                                _idleStart: 995 } },
                          _idleStart: 997,
                          parser: 
                           HTTPParser {
                             '0': [Function: parserOnHeaders],
                             '1': [Function: parserOnHeadersComplete],
                             '2': [Function: parserOnBody],
                             '3': [Function: parserOnMessageComplete],
                             '4': [Function: onParserExecute],
                             _headers: [],
                             _url: '',
                             _consumed: true,
                             socket: [Circular],
                             incoming: [Circular],
                             maxHeaderPairs: 2000,
                             onIncoming: [Function: parserOnIncoming] },
                          on: [Function: socketOnWrap],
                          _paused: false,
                          read: [Function],
                          _consuming: true,
                          _httpMessage: [Circular],
                          _peername: { address: '::1', family: 'IPv6', port: 50070 } },
                       connection: 
                        Socket {
                          _connecting: false,
                          _hadError: false,
                          _handle: 
                           TCP {
                             _externalStream: {},
                             fd: -1,
                             reading: true,
                             owner: [Circular],
                             onread: [Function: onread],
                             onconnection: null,
                             writeQueueSize: 0 },
                          _parent: null,
                          _host: null,
                          _readableState: 
                           ReadableState {
                             objectMode: false,
                             highWaterMark: 16384,
                             buffer: [],
                             length: 0,
                             pipes: null,
                             pipesCount: 0,
                             flowing: true,
                             ended: false,
                             endEmitted: false,
                             reading: true,
                             sync: false,
                             needReadable: true,
                             emittedReadable: false,
                             readableListening: false,
                             resumeScheduled: false,
                             defaultEncoding: 'utf8',
                             ranOut: false,
                             awaitDrain: 0,
                             readingMore: false,
                             decoder: null,
                             encoding: null },
                          readable: true,
                          domain: null,
                          _events: 
                           { end: 
                              [ { [Function: g] listener: [Function: onend] },
                                [Function: socketOnEnd] ],
                             finish: [Function: onSocketFinish],
                             _socketEnd: [Function: onSocketEnd],
                             drain: [ [Function: ondrain], [Function: socketOnDrain] ],
                             timeout: [Function],
                             error: [Function: socketOnError],
                             close: 
                              [ [Function: serverSocketCloseListener],
                                [Function: onServerResponseClose] ],
                             data: [Function: socketOnData],
                             resume: [Function: onSocketResume],
                             pause: [Function: onSocketPause] },
                          _eventsCount: 10,
                          _maxListeners: undefined,
                          _writableState: 
                           WritableState {
                             objectMode: false,
                             highWaterMark: 16384,
                             needDrain: false,
                             ending: false,
                             ended: false,
                             finished: false,
                             decodeStrings: false,
                             defaultEncoding: 'utf8',
                             length: 0,
                             writing: false,
                             corked: 0,
                             sync: false,
                             bufferProcessing: false,
                             onwrite: [Function],
                             writecb: null,
                             writelen: 0,
                             bufferedRequest: null,
                             lastBufferedRequest: null,
                             pendingcb: 3,
                             prefinished: false,
                             errorEmitted: false },
                          writable: true,
                          allowHalfOpen: true,
                          destroyed: false,
                          bytesRead: 0,
                          _bytesDispatched: 311,
                          _sockname: null,
                          _pendingData: null,
                          _pendingEncoding: '',
                          server: 
                           Server {
                             domain: null,
                             _events: 
                              { connection: [Function: connectionListener],
                                clientError: [Function],
                                close: [Function: bound ],
                                upgrade: [Function],
                                request: [Function] },
                             _eventsCount: 5,
                             _maxListeners: undefined,
                             _connections: 1,
                             _handle: 
                              TCP {
                                _externalStream: {},
                                fd: -1,
                                reading: false,
                                owner: [Circular],
                                onread: null,
                                onconnection: [Function: onconnection],
                                writeQueueSize: 0 },
                             _usingSlaves: false,
                             _slaves: [],
                             _unref: false,
                             allowHalfOpen: true,
                             pauseOnConnect: false,
                             httpAllowHalfOpen: false,
                             timeout: 120000,
                             _pendingResponseData: 0,
                             _connectionKey: '6::::8080' },
                          _idleTimeout: 120000,
                          _idleNext: 
                           { [Function: utcDate]
                             _onTimeout: [Function],
                             _idleTimeout: 5,
                             _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
                             _idlePrev: [Circular],
                             _idleStart: 995 },
                          _idlePrev: 
                           { _idleNext: [Circular],
                             _idlePrev: 
                              { [Function: utcDate]
                                _onTimeout: [Function],
                                _idleTimeout: 5,
                                _idleNext: [Circular],
                                _idlePrev: [Circular],
                                _idleStart: 995 } },
                          _idleStart: 997,
                          parser: 
                           HTTPParser {
                             '0': [Function: parserOnHeaders],
                             '1': [Function: parserOnHeadersComplete],
                             '2': [Function: parserOnBody],
                             '3': [Function: parserOnMessageComplete],
                             '4': [Function: onParserExecute],
                             _headers: [],
                             _url: '',
                             _consumed: true,
                             socket: [Circular],
                             incoming: [Circular],
                             maxHeaderPairs: 2000,
                             onIncoming: [Function: parserOnIncoming] },
                          on: [Function: socketOnWrap],
                          _paused: false,
                          read: [Function],
                          _consuming: true,
                          _httpMessage: [Circular],
                          _peername: { address: '::1', family: 'IPv6', port: 50070 } },
                       _header: 'HTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-Length: 101\r\nAccess-Control-Allow-Origin: *\r\nSet-Cookie: io=A6RWxddJuNa2BXdbAAAA\r\nDate: Fri, 25 Mar 2016 05:34:04 GMT\r\nConnection: keep-alive\r\n\r\n',
                       _headers: null,
                       _headerNames: {},
                       _onPendingData: [Function: updateOutgoingData],
                       statusMessage: 'OK',
                       statusCode: 200 },
                    cleanup: [Function: cleanup] },
                 remoteAddress: '::1',
                 checkIntervalTimer: null,
                 upgradeTimeoutTimer: null,
                 pingTimeoutTimer: 
                  { _called: false,
                    _idleTimeout: 85000,
                    _idlePrev: 
                     Timer {
                       '0': [Function: listOnTimeout],
                       _idleNext: [Circular],
                       _idlePrev: [Circular],
                       msecs: 85000 },
                    _idleNext: 
                     Timer {
                       '0': [Function: listOnTimeout],
                       _idleNext: [Circular],
                       _idlePrev: [Circular],
                       msecs: 85000 },
                    _idleStart: 978,
                    _onTimeout: [Function],
                    _repeat: null },
                 transport: 
                  XHR {
                    readyState: 'open',
                    discarded: false,
                    closeTimeout: 30000,
                    maxHttpBufferSize: 100000000,
                    httpCompression: { threshold: 1024 },
                    supportsBinary: true,
                    _events: 
                     { error: { [Function: g] listener: [Function: bound ] },
                       packet: [Function: bound ],
                       drain: [ [Function: bound ], [Function: onDrain] ],
                       close: { [Function: g] listener: [Function: bound ] },
                       headers: [Function] },
                    _eventsCount: 5,
                    sid: 'A6RWxddJuNa2BXdbAAAA',
                    req: null,
                    res: null,
                    writable: false },
                 _events: 
                  { close: [ { [Function: g] listener: [Function] }, [Function: bound ] ],
                    data: [Function: bound ],
                    error: [Function: bound ] },
                 _eventsCount: 3 } },
           clientsCount: 1,
           pingTimeout: 60000,
           pingInterval: 25000,
           upgradeTimeout: 10000,
           maxHttpBufferSize: 100000000,
           transports: [ 'polling', 'websocket' ],
           allowUpgrades: true,
           allowRequest: [Function: bound ],
           cookie: 'io',
           cookiePath: false,
           perMessageDeflate: { threshold: 1024 },
           httpCompression: { threshold: 1024 },
           ws: 
            WebSocketServer {
              domain: null,
              _events: {},
              _eventsCount: 0,
              _maxListeners: undefined,
              options: 
               { host: [Getter],
                 port: [Getter],
                 server: [Getter],
                 verifyClient: [Getter],
                 handleProtocols: [Getter],
                 path: [Getter],
                 noServer: [Getter],
                 disableHixie: [Getter],
                 clientTracking: [Getter],
                 perMessageDeflate: [Getter] },
              path: null,
              clients: [] },
           _events: { connection: [Function: bound ] },
           _eventsCount: 1 },
        httpServer: 
         Server {
           domain: null,
           _events: 
            { connection: [Function: connectionListener],
              clientError: [Function],
              close: [Function: bound ],
              upgrade: [Function],
              request: [Function] },
           _eventsCount: 5,
           _maxListeners: undefined,
           _connections: 1,
           _handle: 
            TCP {
              _externalStream: {},
              fd: -1,
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function: onconnection],
              writeQueueSize: 0 },
           _usingSlaves: false,
           _slaves: [],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           _pendingResponseData: 0,
           _connectionKey: '6::::8080' },
        engine: 
         Server {
           clients: 
            { A6RWxddJuNa2BXdbAAAA: 
               Socket {
                 id: 'A6RWxddJuNa2BXdbAAAA',
                 server: [Circular],
                 upgrading: false,
                 upgraded: false,
                 readyState: 'open',
                 writeBuffer: [],
                 packetsFn: [],
                 sentCallbackFn: [],
                 cleanupFn: [ [Function], [Function] ],
                 request: 
                  IncomingMessage {
                    _readableState: 
                     ReadableState {
                       objectMode: false,
                       highWaterMark: 16384,
                       buffer: [],
                       length: 0,
                       pipes: null,
                       pipesCount: 0,
                       flowing: null,
                       ended: false,
                       endEmitted: false,
                       reading: false,
                       sync: true,
                       needReadable: false,
                       emittedReadable: false,
                       readableListening: false,
                       resumeScheduled: false,
                       defaultEncoding: 'utf8',
                       ranOut: false,
                       awaitDrain: 0,
                       readingMore: false,
                       decoder: null,
                       encoding: null },
                    readable: true,
                    domain: null,
                    _events: {},
                    _eventsCount: 0,
                    _maxListeners: undefined,
                    socket: 
                     Socket {
                       _connecting: false,
                       _hadError: false,
                       _handle: 
                        TCP {
                          _externalStream: {},
                          fd: -1,
                          reading: true,
                          owner: [Circular],
                          onread: [Function: onread],
                          onconnection: null,
                          writeQueueSize: 0 },
                       _parent: null,
                       _host: null,
                       _readableState: 
                        ReadableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          buffer: [],
                          length: 0,
                          pipes: null,
                          pipesCount: 0,
                          flowing: true,
                          ended: false,
                          endEmitted: false,
                          reading: true,
                          sync: false,
                          needReadable: true,
                          emittedReadable: false,
                          readableListening: false,
                          resumeScheduled: false,
                          defaultEncoding: 'utf8',
                          ranOut: false,
                          awaitDrain: 0,
                          readingMore: false,
                          decoder: null,
                          encoding: null },
                       readable: true,
                       domain: null,
                       _events: 
                        { end: 
                           [ { [Function: g] listener: [Function: onend] },
                             [Function: socketOnEnd] ],
                          finish: [Function: onSocketFinish],
                          _socketEnd: [Function: onSocketEnd],
                          drain: [ [Function: ondrain], [Function: socketOnDrain] ],
                          timeout: [Function],
                          error: [Function: socketOnError],
                          close: 
                           [ [Function: serverSocketCloseListener],
                             [Function: onServerResponseClose] ],
                          data: [Function: socketOnData],
                          resume: [Function: onSocketResume],
                          pause: [Function: onSocketPause] },
                       _eventsCount: 10,
                       _maxListeners: undefined,
                       _writableState: 
                        WritableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          needDrain: false,
                          ending: false,
                          ended: false,
                          finished: false,
                          decodeStrings: false,
                          defaultEncoding: 'utf8',
                          length: 0,
                          writing: false,
                          corked: 0,
                          sync: false,
                          bufferProcessing: false,
                          onwrite: [Function],
                          writecb: null,
                          writelen: 0,
                          bufferedRequest: null,
                          lastBufferedRequest: null,
                          pendingcb: 3,
                          prefinished: false,
                          errorEmitted: false },
                       writable: true,
                       allowHalfOpen: true,
                       destroyed: false,
                       bytesRead: 0,
                       _bytesDispatched: 311,
                       _sockname: null,
                       _pendingData: null,
                       _pendingEncoding: '',
                       server: 
                        Server {
                          domain: null,
                          _events: 
                           { connection: [Function: connectionListener],
                             clientError: [Function],
                             close: [Function: bound ],
                             upgrade: [Function],
                             request: [Function] },
                          _eventsCount: 5,
                          _maxListeners: undefined,
                          _connections: 1,
                          _handle: 
                           TCP {
                             _externalStream: {},
                             fd: -1,
                             reading: false,
                             owner: [Circular],
                             onread: null,
                             onconnection: [Function: onconnection],
                             writeQueueSize: 0 },
                          _usingSlaves: false,
                          _slaves: [],
                          _unref: false,
                          allowHalfOpen: true,
                          pauseOnConnect: false,
                          httpAllowHalfOpen: false,
                          timeout: 120000,
                          _pendingResponseData: 0,
                          _connectionKey: '6::::8080' },
                       _idleTimeout: 120000,
                       _idleNext: 
                        { [Function: utcDate]
                          _onTimeout: [Function],
                          _idleTimeout: 5,
                          _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
                          _idlePrev: [Circular],
                          _idleStart: 995 },
                       _idlePrev: 
                        { _idleNext: [Circular],
                          _idlePrev: 
                           { [Function: utcDate]
                             _onTimeout: [Function],
                             _idleTimeout: 5,
                             _idleNext: [Circular],
                             _idlePrev: [Circular],
                             _idleStart: 995 } },
                       _idleStart: 997,
                       parser: 
                        HTTPParser {
                          '0': [Function: parserOnHeaders],
                          '1': [Function: parserOnHeadersComplete],
                          '2': [Function: parserOnBody],
                          '3': [Function: parserOnMessageComplete],
                          '4': [Function: onParserExecute],
                          _headers: [],
                          _url: '',
                          _consumed: true,
                          socket: [Circular],
                          incoming: [Circular],
                          maxHeaderPairs: 2000,
                          onIncoming: [Function: parserOnIncoming] },
                       on: [Function: socketOnWrap],
                       _paused: false,
                       read: [Function],
                       _consuming: true,
                       _httpMessage: 
                        ServerResponse {
                          domain: null,
                          _events: { finish: [Function: resOnFinish] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          output: [],
                          outputEncodings: [],
                          outputCallbacks: [],
                          outputSize: 0,
                          writable: true,
                          _last: false,
                          chunkedEncoding: false,
                          shouldKeepAlive: true,
                          useChunkedEncodingByDefault: true,
                          sendDate: true,
                          _removedHeader: {},
                          _contentLength: null,
                          _hasBody: true,
                          _trailer: '',
                          finished: true,
                          _headerSent: true,
                          socket: [Circular],
                          connection: [Circular],
                          _header: 'HTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-Length: 101\r\nAccess-Control-Allow-Origin: *\r\nSet-Cookie: io=A6RWxddJuNa2BXdbAAAA\r\nDate: Fri, 25 Mar 2016 05:34:04 GMT\r\nConnection: keep-alive\r\n\r\n',
                          _headers: null,
                          _headerNames: {},
                          _onPendingData: [Function: updateOutgoingData],
                          statusMessage: 'OK',
                          statusCode: 200 },
                       _peername: { address: '::1', family: 'IPv6', port: 50070 } },
                    connection: 
                     Socket {
                       _connecting: false,
                       _hadError: false,
                       _handle: 
                        TCP {
                          _externalStream: {},
                          fd: -1,
                          reading: true,
                          owner: [Circular],
                          onread: [Function: onread],
                          onconnection: null,
                          writeQueueSize: 0 },
                       _parent: null,
                       _host: null,
                       _readableState: 
                        ReadableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          buffer: [],
                          length: 0,
                          pipes: null,
                          pipesCount: 0,
                          flowing: true,
                          ended: false,
                          endEmitted: false,
                          reading: true,
                          sync: false,
                          needReadable: true,
                          emittedReadable: false,
                          readableListening: false,
                          resumeScheduled: false,
                          defaultEncoding: 'utf8',
                          ranOut: false,
                          awaitDrain: 0,
                          readingMore: false,
                          decoder: null,
                          encoding: null },
                       readable: true,
                       domain: null,
                       _events: 
                        { end: 
                           [ { [Function: g] listener: [Function: onend] },
                             [Function: socketOnEnd] ],
                          finish: [Function: onSocketFinish],
                          _socketEnd: [Function: onSocketEnd],
                          drain: [ [Function: ondrain], [Function: socketOnDrain] ],
                          timeout: [Function],
                          error: [Function: socketOnError],
                          close: 
                           [ [Function: serverSocketCloseListener],
                             [Function: onServerResponseClose] ],
                          data: [Function: socketOnData],
                          resume: [Function: onSocketResume],
                          pause: [Function: onSocketPause] },
                       _eventsCount: 10,
                       _maxListeners: undefined,
                       _writableState: 
                        WritableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          needDrain: false,
                          ending: false,
                          ended: false,
                          finished: false,
                          decodeStrings: false,
                          defaultEncoding: 'utf8',
                          length: 0,
                          writing: false,
                          corked: 0,
                          sync: false,
                          bufferProcessing: false,
                          onwrite: [Function],
                          writecb: null,
                          writelen: 0,
                          bufferedRequest: null,
                          lastBufferedRequest: null,
                          pendingcb: 3,
                          prefinished: false,
                          errorEmitted: false },
                       writable: true,
                       allowHalfOpen: true,
                       destroyed: false,
                       bytesRead: 0,
                       _bytesDispatched: 311,
                       _sockname: null,
                       _pendingData: null,
                       _pendingEncoding: '',
                       server: 
                        Server {
                          domain: null,
                          _events: 
                           { connection: [Function: connectionListener],
                             clientError: [Function],
                             close: [Function: bound ],
                             upgrade: [Function],
                             request: [Function] },
                          _eventsCount: 5,
                          _maxListeners: undefined,
                          _connections: 1,
                          _handle: 
                           TCP {
                             _externalStream: {},
                             fd: -1,
                             reading: false,
                             owner: [Circular],
                             onread: null,
                             onconnection: [Function: onconnection],
                             writeQueueSize: 0 },
                          _usingSlaves: false,
                          _slaves: [],
                          _unref: false,
                          allowHalfOpen: true,
                          pauseOnConnect: false,
                          httpAllowHalfOpen: false,
                          timeout: 120000,
                          _pendingResponseData: 0,
                          _connectionKey: '6::::8080' },
                       _idleTimeout: 120000,
                       _idleNext: 
                        { [Function: utcDate]
                          _onTimeout: [Function],
                          _idleTimeout: 5,
                          _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
                          _idlePrev: [Circular],
                          _idleStart: 995 },
                       _idlePrev: 
                        { _idleNext: [Circular],
                          _idlePrev: 
                           { [Function: utcDate]
                             _onTimeout: [Function],
                             _idleTimeout: 5,
                             _idleNext: [Circular],
                             _idlePrev: [Circular],
                             _idleStart: 995 } },
                       _idleStart: 997,
                       parser: 
                        HTTPParser {
                          '0': [Function: parserOnHeaders],
                          '1': [Function: parserOnHeadersComplete],
                          '2': [Function: parserOnBody],
                          '3': [Function: parserOnMessageComplete],
                          '4': [Function: onParserExecute],
                          _headers: [],
                          _url: '',
                          _consumed: true,
                          socket: [Circular],
                          incoming: [Circular],
                          maxHeaderPairs: 2000,
                          onIncoming: [Function: parserOnIncoming] },
                       on: [Function: socketOnWrap],
                       _paused: false,
                       read: [Function],
                       _consuming: true,
                       _httpMessage: 
                        ServerResponse {
                          domain: null,
                          _events: { finish: [Function: resOnFinish] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          output: [],
                          outputEncodings: [],
                          outputCallbacks: [],
                          outputSize: 0,
                          writable: true,
                          _last: false,
                          chunkedEncoding: false,
                          shouldKeepAlive: true,
                          useChunkedEncodingByDefault: true,
                          sendDate: true,
                          _removedHeader: {},
                          _contentLength: null,
                          _hasBody: true,
                          _trailer: '',
                          finished: true,
                          _headerSent: true,
                          socket: [Circular],
                          connection: [Circular],
                          _header: 'HTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-Length: 101\r\nAccess-Control-Allow-Origin: *\r\nSet-Cookie: io=A6RWxddJuNa2BXdbAAAA\r\nDate: Fri, 25 Mar 2016 05:34:04 GMT\r\nConnection: keep-alive\r\n\r\n',
                          _headers: null,
                          _headerNames: {},
                          _onPendingData: [Function: updateOutgoingData],
                          statusMessage: 'OK',
                          statusCode: 200 },
                       _peername: { address: '::1', family: 'IPv6', port: 50070 } },
                    httpVersionMajor: 1,
                    httpVersionMinor: 1,
                    httpVersion: '1.1',
                    complete: false,
                    headers: 
                     { host: 'localhost:8080',
                       connection: 'keep-alive',
                       pragma: 'no-cache',
                       'cache-control': 'no-cache',
                       'user-agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.132 Safari/537.36',
                       accept: '*/*',
                       referer: 'http://localhost:8080/',
                       'accept-encoding': 'gzip, deflate, sdch',
                       'accept-language': 'zh-CN,zh;q=0.8,en;q=0.6',
                       cookie: 'io=B5ehkX7J-gME2Jd5AAAA; amvid=7b2309f47fa4b428ae50a46e3d3c4381' },
                    rawHeaders: 
                     [ 'Host',
                       'localhost:8080',
                       'Connection',
                       'keep-alive',
                       'Pragma',
                       'no-cache',
                       'Cache-Control',
                       'no-cache',
                       'User-Agent',
                       'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.132 Safari/537.36',
                       'Accept',
                       '*/*',
                       'Referer',
                       'http://localhost:8080/',
                       'Accept-Encoding',
                       'gzip, deflate, sdch',
                       'Accept-Language',
                       'zh-CN,zh;q=0.8,en;q=0.6',
                       'Cookie',
                       'io=B5ehkX7J-gME2Jd5AAAA; amvid=7b2309f47fa4b428ae50a46e3d3c4381' ],
                    trailers: {},
                    rawTrailers: [],
                    upgrade: false,
                    url: '/socket.io/?EIO=3&transport=polling&t=LEiG-Ij',
                    method: 'GET',
                    statusCode: null,
                    statusMessage: null,
                    client: 
                     Socket {
                       _connecting: false,
                       _hadError: false,
                       _handle: 
                        TCP {
                          _externalStream: {},
                          fd: -1,
                          reading: true,
                          owner: [Circular],
                          onread: [Function: onread],
                          onconnection: null,
                          writeQueueSize: 0 },
                       _parent: null,
                       _host: null,
                       _readableState: 
                        ReadableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          buffer: [],
                          length: 0,
                          pipes: null,
                          pipesCount: 0,
                          flowing: true,
                          ended: false,
                          endEmitted: false,
                          reading: true,
                          sync: false,
                          needReadable: true,
                          emittedReadable: false,
                          readableListening: false,
                          resumeScheduled: false,
                          defaultEncoding: 'utf8',
                          ranOut: false,
                          awaitDrain: 0,
                          readingMore: false,
                          decoder: null,
                          encoding: null },
                       readable: true,
                       domain: null,
                       _events: 
                        { end: 
                           [ { [Function: g] listener: [Function: onend] },
                             [Function: socketOnEnd] ],
                          finish: [Function: onSocketFinish],
                          _socketEnd: [Function: onSocketEnd],
                          drain: [ [Function: ondrain], [Function: socketOnDrain] ],
                          timeout: [Function],
                          error: [Function: socketOnError],
                          close: 
                           [ [Function: serverSocketCloseListener],
                             [Function: onServerResponseClose] ],
                          data: [Function: socketOnData],
                          resume: [Function: onSocketResume],
                          pause: [Function: onSocketPause] },
                       _eventsCount: 10,
                       _maxListeners: undefined,
                       _writableState: 
                        WritableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          needDrain: false,
                          ending: false,
                          ended: false,
                          finished: false,
                          decodeStrings: false,
                          defaultEncoding: 'utf8',
                          length: 0,
                          writing: false,
                          corked: 0,
                          sync: false,
                          bufferProcessing: false,
                          onwrite: [Function],
                          writecb: null,
                          writelen: 0,
                          bufferedRequest: null,
                          lastBufferedRequest: null,
                          pendingcb: 3,
                          prefinished: false,
                          errorEmitted: false },
                       writable: true,
                       allowHalfOpen: true,
                       destroyed: false,
                       bytesRead: 0,
                       _bytesDispatched: 311,
                       _sockname: null,
                       _pendingData: null,
                       _pendingEncoding: '',
                       server: 
                        Server {
                          domain: null,
                          _events: 
                           { connection: [Function: connectionListener],
                             clientError: [Function],
                             close: [Function: bound ],
                             upgrade: [Function],
                             request: [Function] },
                          _eventsCount: 5,
                          _maxListeners: undefined,
                          _connections: 1,
                          _handle: 
                           TCP {
                             _externalStream: {},
                             fd: -1,
                             reading: false,
                             owner: [Circular],
                             onread: null,
                             onconnection: [Function: onconnection],
                             writeQueueSize: 0 },
                          _usingSlaves: false,
                          _slaves: [],
                          _unref: false,
                          allowHalfOpen: true,
                          pauseOnConnect: false,
                          httpAllowHalfOpen: false,
                          timeout: 120000,
                          _pendingResponseData: 0,
                          _connectionKey: '6::::8080' },
                       _idleTimeout: 120000,
                       _idleNext: 
                        { [Function: utcDate]
                          _onTimeout: [Function],
                          _idleTimeout: 5,
                          _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
                          _idlePrev: [Circular],
                          _idleStart: 995 },
                       _idlePrev: 
                        { _idleNext: [Circular],
                          _idlePrev: 
                           { [Function: utcDate]
                             _onTimeout: [Function],
                             _idleTimeout: 5,
                             _idleNext: [Circular],
                             _idlePrev: [Circular],
                             _idleStart: 995 } },
                       _idleStart: 997,
                       parser: 
                        HTTPParser {
                          '0': [Function: parserOnHeaders],
                          '1': [Function: parserOnHeadersComplete],
                          '2': [Function: parserOnBody],
                          '3': [Function: parserOnMessageComplete],
                          '4': [Function: onParserExecute],
                          _headers: [],
                          _url: '',
                          _consumed: true,
                          socket: [Circular],
                          incoming: [Circular],
                          maxHeaderPairs: 2000,
                          onIncoming: [Function: parserOnIncoming] },
                       on: [Function: socketOnWrap],
                       _paused: false,
                       read: [Function],
                       _consuming: true,
                       _httpMessage: 
                        ServerResponse {
                          domain: null,
                          _events: { finish: [Function: resOnFinish] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          output: [],
                          outputEncodings: [],
                          outputCallbacks: [],
                          outputSize: 0,
                          writable: true,
                          _last: false,
                          chunkedEncoding: false,
                          shouldKeepAlive: true,
                          useChunkedEncodingByDefault: true,
                          sendDate: true,
                          _removedHeader: {},
                          _contentLength: null,
                          _hasBody: true,
                          _trailer: '',
                          finished: true,
                          _headerSent: true,
                          socket: [Circular],
                          connection: [Circular],
                          _header: 'HTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-Length: 101\r\nAccess-Control-Allow-Origin: *\r\nSet-Cookie: io=A6RWxddJuNa2BXdbAAAA\r\nDate: Fri, 25 Mar 2016 05:34:04 GMT\r\nConnection: keep-alive\r\n\r\n',
                          _headers: null,
                          _headerNames: {},
                          _onPendingData: [Function: updateOutgoingData],
                          statusMessage: 'OK',
                          statusCode: 200 },
                       _peername: { address: '::1', family: 'IPv6', port: 50070 } },
                    _consuming: false,
                    _dumped: false,
                    _query: { EIO: '3', transport: 'polling', t: 'LEiG-Ij' },
                    res: 
                     ServerResponse {
                       domain: null,
                       _events: { finish: [Function: resOnFinish] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       output: [],
                       outputEncodings: [],
                       outputCallbacks: [],
                       outputSize: 0,
                       writable: true,
                       _last: false,
                       chunkedEncoding: false,
                       shouldKeepAlive: true,
                       useChunkedEncodingByDefault: true,
                       sendDate: true,
                       _removedHeader: {},
                       _contentLength: null,
                       _hasBody: true,
                       _trailer: '',
                       finished: true,
                       _headerSent: true,
                       socket: 
                        Socket {
                          _connecting: false,
                          _hadError: false,
                          _handle: 
                           TCP {
                             _externalStream: {},
                             fd: -1,
                             reading: true,
                             owner: [Circular],
                             onread: [Function: onread],
                             onconnection: null,
                             writeQueueSize: 0 },
                          _parent: null,
                          _host: null,
                          _readableState: 
                           ReadableState {
                             objectMode: false,
                             highWaterMark: 16384,
                             buffer: [],
                             length: 0,
                             pipes: null,
                             pipesCount: 0,
                             flowing: true,
                             ended: false,
                             endEmitted: false,
                             reading: true,
                             sync: false,
                             needReadable: true,
                             emittedReadable: false,
                             readableListening: false,
                             resumeScheduled: false,
                             defaultEncoding: 'utf8',
                             ranOut: false,
                             awaitDrain: 0,
                             readingMore: false,
                             decoder: null,
                             encoding: null },
                          readable: true,
                          domain: null,
                          _events: 
                           { end: 
                              [ { [Function: g] listener: [Function: onend] },
                                [Function: socketOnEnd] ],
                             finish: [Function: onSocketFinish],
                             _socketEnd: [Function: onSocketEnd],
                             drain: [ [Function: ondrain], [Function: socketOnDrain] ],
                             timeout: [Function],
                             error: [Function: socketOnError],
                             close: 
                              [ [Function: serverSocketCloseListener],
                                [Function: onServerResponseClose] ],
                             data: [Function: socketOnData],
                             resume: [Function: onSocketResume],
                             pause: [Function: onSocketPause] },
                          _eventsCount: 10,
                          _maxListeners: undefined,
                          _writableState: 
                           WritableState {
                             objectMode: false,
                             highWaterMark: 16384,
                             needDrain: false,
                             ending: false,
                             ended: false,
                             finished: false,
                             decodeStrings: false,
                             defaultEncoding: 'utf8',
                             length: 0,
                             writing: false,
                             corked: 0,
                             sync: false,
                             bufferProcessing: false,
                             onwrite: [Function],
                             writecb: null,
                             writelen: 0,
                             bufferedRequest: null,
                             lastBufferedRequest: null,
                             pendingcb: 3,
                             prefinished: false,
                             errorEmitted: false },
                          writable: true,
                          allowHalfOpen: true,
                          destroyed: false,
                          bytesRead: 0,
                          _bytesDispatched: 311,
                          _sockname: null,
                          _pendingData: null,
                          _pendingEncoding: '',
                          server: 
                           Server {
                             domain: null,
                             _events: 
                              { connection: [Function: connectionListener],
                                clientError: [Function],
                                close: [Function: bound ],
                                upgrade: [Function],
                                request: [Function] },
                             _eventsCount: 5,
                             _maxListeners: undefined,
                             _connections: 1,
                             _handle: 
                              TCP {
                                _externalStream: {},
                                fd: -1,
                                reading: false,
                                owner: [Circular],
                                onread: null,
                                onconnection: [Function: onconnection],
                                writeQueueSize: 0 },
                             _usingSlaves: false,
                             _slaves: [],
                             _unref: false,
                             allowHalfOpen: true,
                             pauseOnConnect: false,
                             httpAllowHalfOpen: false,
                             timeout: 120000,
                             _pendingResponseData: 0,
                             _connectionKey: '6::::8080' },
                          _idleTimeout: 120000,
                          _idleNext: 
                           { [Function: utcDate]
                             _onTimeout: [Function],
                             _idleTimeout: 5,
                             _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
                             _idlePrev: [Circular],
                             _idleStart: 995 },
                          _idlePrev: 
                           { _idleNext: [Circular],
                             _idlePrev: 
                              { [Function: utcDate]
                                _onTimeout: [Function],
                                _idleTimeout: 5,
                                _idleNext: [Circular],
                                _idlePrev: [Circular],
                                _idleStart: 995 } },
                          _idleStart: 997,
                          parser: 
                           HTTPParser {
                             '0': [Function: parserOnHeaders],
                             '1': [Function: parserOnHeadersComplete],
                             '2': [Function: parserOnBody],
                             '3': [Function: parserOnMessageComplete],
                             '4': [Function: onParserExecute],
                             _headers: [],
                             _url: '',
                             _consumed: true,
                             socket: [Circular],
                             incoming: [Circular],
                             maxHeaderPairs: 2000,
                             onIncoming: [Function: parserOnIncoming] },
                          on: [Function: socketOnWrap],
                          _paused: false,
                          read: [Function],
                          _consuming: true,
                          _httpMessage: [Circular],
                          _peername: { address: '::1', family: 'IPv6', port: 50070 } },
                       connection: 
                        Socket {
                          _connecting: false,
                          _hadError: false,
                          _handle: 
                           TCP {
                             _externalStream: {},
                             fd: -1,
                             reading: true,
                             owner: [Circular],
                             onread: [Function: onread],
                             onconnection: null,
                             writeQueueSize: 0 },
                          _parent: null,
                          _host: null,
                          _readableState: 
                           ReadableState {
                             objectMode: false,
                             highWaterMark: 16384,
                             buffer: [],
                             length: 0,
                             pipes: null,
                             pipesCount: 0,
                             flowing: true,
                             ended: false,
                             endEmitted: false,
                             reading: true,
                             sync: false,
                             needReadable: true,
                             emittedReadable: false,
                             readableListening: false,
                             resumeScheduled: false,
                             defaultEncoding: 'utf8',
                             ranOut: false,
                             awaitDrain: 0,
                             readingMore: false,
                             decoder: null,
                             encoding: null },
                          readable: true,
                          domain: null,
                          _events: 
                           { end: 
                              [ { [Function: g] listener: [Function: onend] },
                                [Function: socketOnEnd] ],
                             finish: [Function: onSocketFinish],
                             _socketEnd: [Function: onSocketEnd],
                             drain: [ [Function: ondrain], [Function: socketOnDrain] ],
                             timeout: [Function],
                             error: [Function: socketOnError],
                             close: 
                              [ [Function: serverSocketCloseListener],
                                [Function: onServerResponseClose] ],
                             data: [Function: socketOnData],
                             resume: [Function: onSocketResume],
                             pause: [Function: onSocketPause] },
                          _eventsCount: 10,
                          _maxListeners: undefined,
                          _writableState: 
                           WritableState {
                             objectMode: false,
                             highWaterMark: 16384,
                             needDrain: false,
                             ending: false,
                             ended: false,
                             finished: false,
                             decodeStrings: false,
                             defaultEncoding: 'utf8',
                             length: 0,
                             writing: false,
                             corked: 0,
                             sync: false,
                             bufferProcessing: false,
                             onwrite: [Function],
                             writecb: null,
                             writelen: 0,
                             bufferedRequest: null,
                             lastBufferedRequest: null,
                             pendingcb: 3,
                             prefinished: false,
                             errorEmitted: false },
                          writable: true,
                          allowHalfOpen: true,
                          destroyed: false,
                          bytesRead: 0,
                          _bytesDispatched: 311,
                          _sockname: null,
                          _pendingData: null,
                          _pendingEncoding: '',
                          server: 
                           Server {
                             domain: null,
                             _events: 
                              { connection: [Function: connectionListener],
                                clientError: [Function],
                                close: [Function: bound ],
                                upgrade: [Function],
                                request: [Function] },
                             _eventsCount: 5,
                             _maxListeners: undefined,
                             _connections: 1,
                             _handle: 
                              TCP {
                                _externalStream: {},
                                fd: -1,
                                reading: false,
                                owner: [Circular],
                                onread: null,
                                onconnection: [Function: onconnection],
                                writeQueueSize: 0 },
                             _usingSlaves: false,
                             _slaves: [],
                             _unref: false,
                             allowHalfOpen: true,
                             pauseOnConnect: false,
                             httpAllowHalfOpen: false,
                             timeout: 120000,
                             _pendingResponseData: 0,
                             _connectionKey: '6::::8080' },
                          _idleTimeout: 120000,
                          _idleNext: 
                           { [Function: utcDate]
                             _onTimeout: [Function],
                             _idleTimeout: 5,
                             _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
                             _idlePrev: [Circular],
                             _idleStart: 995 },
                          _idlePrev: 
                           { _idleNext: [Circular],
                             _idlePrev: 
                              { [Function: utcDate]
                                _onTimeout: [Function],
                                _idleTimeout: 5,
                                _idleNext: [Circular],
                                _idlePrev: [Circular],
                                _idleStart: 995 } },
                          _idleStart: 997,
                          parser: 
                           HTTPParser {
                             '0': [Function: parserOnHeaders],
                             '1': [Function: parserOnHeadersComplete],
                             '2': [Function: parserOnBody],
                             '3': [Function: parserOnMessageComplete],
                             '4': [Function: onParserExecute],
                             _headers: [],
                             _url: '',
                             _consumed: true,
                             socket: [Circular],
                             incoming: [Circular],
                             maxHeaderPairs: 2000,
                             onIncoming: [Function: parserOnIncoming] },
                          on: [Function: socketOnWrap],
                          _paused: false,
                          read: [Function],
                          _consuming: true,
                          _httpMessage: [Circular],
                          _peername: { address: '::1', family: 'IPv6', port: 50070 } },
                       _header: 'HTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-Length: 101\r\nAccess-Control-Allow-Origin: *\r\nSet-Cookie: io=A6RWxddJuNa2BXdbAAAA\r\nDate: Fri, 25 Mar 2016 05:34:04 GMT\r\nConnection: keep-alive\r\n\r\n',
                       _headers: null,
                       _headerNames: {},
                       _onPendingData: [Function: updateOutgoingData],
                       statusMessage: 'OK',
                       statusCode: 200 },
                    cleanup: [Function: cleanup] },
                 remoteAddress: '::1',
                 checkIntervalTimer: null,
                 upgradeTimeoutTimer: null,
                 pingTimeoutTimer: 
                  { _called: false,
                    _idleTimeout: 85000,
                    _idlePrev: 
                     Timer {
                       '0': [Function: listOnTimeout],
                       _idleNext: [Circular],
                       _idlePrev: [Circular],
                       msecs: 85000 },
                    _idleNext: 
                     Timer {
                       '0': [Function: listOnTimeout],
                       _idleNext: [Circular],
                       _idlePrev: [Circular],
                       msecs: 85000 },
                    _idleStart: 978,
                    _onTimeout: [Function],
                    _repeat: null },
                 transport: 
                  XHR {
                    readyState: 'open',
                    discarded: false,
                    closeTimeout: 30000,
                    maxHttpBufferSize: 100000000,
                    httpCompression: { threshold: 1024 },
                    supportsBinary: true,
                    _events: 
                     { error: { [Function: g] listener: [Function: bound ] },
                       packet: [Function: bound ],
                       drain: [ [Function: bound ], [Function: onDrain] ],
                       close: { [Function: g] listener: [Function: bound ] },
                       headers: [Function] },
                    _eventsCount: 5,
                    sid: 'A6RWxddJuNa2BXdbAAAA',
                    req: null,
                    res: null,
                    writable: false },
                 _events: 
                  { close: [ { [Function: g] listener: [Function] }, [Function: bound ] ],
                    data: [Function: bound ],
                    error: [Function: bound ] },
                 _eventsCount: 3 } },
           clientsCount: 1,
           pingTimeout: 60000,
           pingInterval: 25000,
           upgradeTimeout: 10000,
           maxHttpBufferSize: 100000000,
           transports: [ 'polling', 'websocket' ],
           allowUpgrades: true,
           allowRequest: [Function: bound ],
           cookie: 'io',
           cookiePath: false,
           perMessageDeflate: { threshold: 1024 },
           httpCompression: { threshold: 1024 },
           ws: 
            WebSocketServer {
              domain: null,
              _events: {},
              _eventsCount: 0,
              _maxListeners: undefined,
              options: 
               { host: [Getter],
                 port: [Getter],
                 server: [Getter],
                 verifyClient: [Getter],
                 handleProtocols: [Getter],
                 path: [Getter],
                 noServer: [Getter],
                 disableHixie: [Getter],
                 clientTracking: [Getter],
                 perMessageDeflate: [Getter] },
              path: null,
              clients: [] },
           _events: { connection: [Function: bound ] },
           _eventsCount: 1 } },
     sockets: {},
     connected: {},
     fns: [ [Function], [Function] ],
     ids: 0,
     adapter: Adapter { nsp: [Circular], rooms: {}, sids: {}, encoder: Encoder {} },
     _events: { connection: [Function] },
     _eventsCount: 1 },
  server: 
   Server {
     nsps: 
      { '/': 
         Namespace {
           name: '/',
           server: [Circular],
           sockets: {},
           connected: {},
           fns: [ [Function], [Function] ],
           ids: 0,
           adapter: Adapter { nsp: [Circular], rooms: {}, sids: {}, encoder: Encoder {} },
           _events: { connection: [Function] },
           _eventsCount: 1 } },
     _path: '/socket.io',
     _serveClient: true,
     _adapter: [Function: Adapter],
     _origins: '*:*',
     sockets: 
      Namespace {
        name: '/',
        server: [Circular],
        sockets: {},
        connected: {},
        fns: [ [Function], [Function] ],
        ids: 0,
        adapter: Adapter { nsp: [Circular], rooms: {}, sids: {}, encoder: Encoder {} },
        _events: { connection: [Function] },
        _eventsCount: 1 },
     eio: 
      Server {
        clients: 
         { A6RWxddJuNa2BXdbAAAA: 
            Socket {
              id: 'A6RWxddJuNa2BXdbAAAA',
              server: [Circular],
              upgrading: false,
              upgraded: false,
              readyState: 'open',
              writeBuffer: [],
              packetsFn: [],
              sentCallbackFn: [],
              cleanupFn: [ [Function], [Function] ],
              request: 
               IncomingMessage {
                 _readableState: 
                  ReadableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    buffer: [],
                    length: 0,
                    pipes: null,
                    pipesCount: 0,
                    flowing: null,
                    ended: false,
                    endEmitted: false,
                    reading: false,
                    sync: true,
                    needReadable: false,
                    emittedReadable: false,
                    readableListening: false,
                    resumeScheduled: false,
                    defaultEncoding: 'utf8',
                    ranOut: false,
                    awaitDrain: 0,
                    readingMore: false,
                    decoder: null,
                    encoding: null },
                 readable: true,
                 domain: null,
                 _events: {},
                 _eventsCount: 0,
                 _maxListeners: undefined,
                 socket: 
                  Socket {
                    _connecting: false,
                    _hadError: false,
                    _handle: 
                     TCP {
                       _externalStream: {},
                       fd: -1,
                       reading: true,
                       owner: [Circular],
                       onread: [Function: onread],
                       onconnection: null,
                       writeQueueSize: 0 },
                    _parent: null,
                    _host: null,
                    _readableState: 
                     ReadableState {
                       objectMode: false,
                       highWaterMark: 16384,
                       buffer: [],
                       length: 0,
                       pipes: null,
                       pipesCount: 0,
                       flowing: true,
                       ended: false,
                       endEmitted: false,
                       reading: true,
                       sync: false,
                       needReadable: true,
                       emittedReadable: false,
                       readableListening: false,
                       resumeScheduled: false,
                       defaultEncoding: 'utf8',
                       ranOut: false,
                       awaitDrain: 0,
                       readingMore: false,
                       decoder: null,
                       encoding: null },
                    readable: true,
                    domain: null,
                    _events: 
                     { end: 
                        [ { [Function: g] listener: [Function: onend] },
                          [Function: socketOnEnd] ],
                       finish: [Function: onSocketFinish],
                       _socketEnd: [Function: onSocketEnd],
                       drain: [ [Function: ondrain], [Function: socketOnDrain] ],
                       timeout: [Function],
                       error: [Function: socketOnError],
                       close: 
                        [ [Function: serverSocketCloseListener],
                          [Function: onServerResponseClose] ],
                       data: [Function: socketOnData],
                       resume: [Function: onSocketResume],
                       pause: [Function: onSocketPause] },
                    _eventsCount: 10,
                    _maxListeners: undefined,
                    _writableState: 
                     WritableState {
                       objectMode: false,
                       highWaterMark: 16384,
                       needDrain: false,
                       ending: false,
                       ended: false,
                       finished: false,
                       decodeStrings: false,
                       defaultEncoding: 'utf8',
                       length: 0,
                       writing: false,
                       corked: 0,
                       sync: false,
                       bufferProcessing: false,
                       onwrite: [Function],
                       writecb: null,
                       writelen: 0,
                       bufferedRequest: null,
                       lastBufferedRequest: null,
                       pendingcb: 3,
                       prefinished: false,
                       errorEmitted: false },
                    writable: true,
                    allowHalfOpen: true,
                    destroyed: false,
                    bytesRead: 0,
                    _bytesDispatched: 311,
                    _sockname: null,
                    _pendingData: null,
                    _pendingEncoding: '',
                    server: 
                     Server {
                       domain: null,
                       _events: 
                        { connection: [Function: connectionListener],
                          clientError: [Function],
                          close: [Function: bound ],
                          upgrade: [Function],
                          request: [Function] },
                       _eventsCount: 5,
                       _maxListeners: undefined,
                       _connections: 1,
                       _handle: 
                        TCP {
                          _externalStream: {},
                          fd: -1,
                          reading: false,
                          owner: [Circular],
                          onread: null,
                          onconnection: [Function: onconnection],
                          writeQueueSize: 0 },
                       _usingSlaves: false,
                       _slaves: [],
                       _unref: false,
                       allowHalfOpen: true,
                       pauseOnConnect: false,
                       httpAllowHalfOpen: false,
                       timeout: 120000,
                       _pendingResponseData: 0,
                       _connectionKey: '6::::8080' },
                    _idleTimeout: 120000,
                    _idleNext: 
                     { [Function: utcDate]
                       _onTimeout: [Function],
                       _idleTimeout: 5,
                       _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
                       _idlePrev: [Circular],
                       _idleStart: 995 },
                    _idlePrev: 
                     { _idleNext: [Circular],
                       _idlePrev: 
                        { [Function: utcDate]
                          _onTimeout: [Function],
                          _idleTimeout: 5,
                          _idleNext: [Circular],
                          _idlePrev: [Circular],
                          _idleStart: 995 } },
                    _idleStart: 997,
                    parser: 
                     HTTPParser {
                       '0': [Function: parserOnHeaders],
                       '1': [Function: parserOnHeadersComplete],
                       '2': [Function: parserOnBody],
                       '3': [Function: parserOnMessageComplete],
                       '4': [Function: onParserExecute],
                       _headers: [],
                       _url: '',
                       _consumed: true,
                       socket: [Circular],
                       incoming: [Circular],
                       maxHeaderPairs: 2000,
                       onIncoming: [Function: parserOnIncoming] },
                    on: [Function: socketOnWrap],
                    _paused: false,
                    read: [Function],
                    _consuming: true,
                    _httpMessage: 
                     ServerResponse {
                       domain: null,
                       _events: { finish: [Function: resOnFinish] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       output: [],
                       outputEncodings: [],
                       outputCallbacks: [],
                       outputSize: 0,
                       writable: true,
                       _last: false,
                       chunkedEncoding: false,
                       shouldKeepAlive: true,
                       useChunkedEncodingByDefault: true,
                       sendDate: true,
                       _removedHeader: {},
                       _contentLength: null,
                       _hasBody: true,
                       _trailer: '',
                       finished: true,
                       _headerSent: true,
                       socket: [Circular],
                       connection: [Circular],
                       _header: 'HTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-Length: 101\r\nAccess-Control-Allow-Origin: *\r\nSet-Cookie: io=A6RWxddJuNa2BXdbAAAA\r\nDate: Fri, 25 Mar 2016 05:34:04 GMT\r\nConnection: keep-alive\r\n\r\n',
                       _headers: null,
                       _headerNames: {},
                       _onPendingData: [Function: updateOutgoingData],
                       statusMessage: 'OK',
                       statusCode: 200 },
                    _peername: { address: '::1', family: 'IPv6', port: 50070 } },
                 connection: 
                  Socket {
                    _connecting: false,
                    _hadError: false,
                    _handle: 
                     TCP {
                       _externalStream: {},
                       fd: -1,
                       reading: true,
                       owner: [Circular],
                       onread: [Function: onread],
                       onconnection: null,
                       writeQueueSize: 0 },
                    _parent: null,
                    _host: null,
                    _readableState: 
                     ReadableState {
                       objectMode: false,
                       highWaterMark: 16384,
                       buffer: [],
                       length: 0,
                       pipes: null,
                       pipesCount: 0,
                       flowing: true,
                       ended: false,
                       endEmitted: false,
                       reading: true,
                       sync: false,
                       needReadable: true,
                       emittedReadable: false,
                       readableListening: false,
                       resumeScheduled: false,
                       defaultEncoding: 'utf8',
                       ranOut: false,
                       awaitDrain: 0,
                       readingMore: false,
                       decoder: null,
                       encoding: null },
                    readable: true,
                    domain: null,
                    _events: 
                     { end: 
                        [ { [Function: g] listener: [Function: onend] },
                          [Function: socketOnEnd] ],
                       finish: [Function: onSocketFinish],
                       _socketEnd: [Function: onSocketEnd],
                       drain: [ [Function: ondrain], [Function: socketOnDrain] ],
                       timeout: [Function],
                       error: [Function: socketOnError],
                       close: 
                        [ [Function: serverSocketCloseListener],
                          [Function: onServerResponseClose] ],
                       data: [Function: socketOnData],
                       resume: [Function: onSocketResume],
                       pause: [Function: onSocketPause] },
                    _eventsCount: 10,
                    _maxListeners: undefined,
                    _writableState: 
                     WritableState {
                       objectMode: false,
                       highWaterMark: 16384,
                       needDrain: false,
                       ending: false,
                       ended: false,
                       finished: false,
                       decodeStrings: false,
                       defaultEncoding: 'utf8',
                       length: 0,
                       writing: false,
                       corked: 0,
                       sync: false,
                       bufferProcessing: false,
                       onwrite: [Function],
                       writecb: null,
                       writelen: 0,
                       bufferedRequest: null,
                       lastBufferedRequest: null,
                       pendingcb: 3,
                       prefinished: false,
                       errorEmitted: false },
                    writable: true,
                    allowHalfOpen: true,
                    destroyed: false,
                    bytesRead: 0,
                    _bytesDispatched: 311,
                    _sockname: null,
                    _pendingData: null,
                    _pendingEncoding: '',
                    server: 
                     Server {
                       domain: null,
                       _events: 
                        { connection: [Function: connectionListener],
                          clientError: [Function],
                          close: [Function: bound ],
                          upgrade: [Function],
                          request: [Function] },
                       _eventsCount: 5,
                       _maxListeners: undefined,
                       _connections: 1,
                       _handle: 
                        TCP {
                          _externalStream: {},
                          fd: -1,
                          reading: false,
                          owner: [Circular],
                          onread: null,
                          onconnection: [Function: onconnection],
                          writeQueueSize: 0 },
                       _usingSlaves: false,
                       _slaves: [],
                       _unref: false,
                       allowHalfOpen: true,
                       pauseOnConnect: false,
                       httpAllowHalfOpen: false,
                       timeout: 120000,
                       _pendingResponseData: 0,
                       _connectionKey: '6::::8080' },
                    _idleTimeout: 120000,
                    _idleNext: 
                     { [Function: utcDate]
                       _onTimeout: [Function],
                       _idleTimeout: 5,
                       _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
                       _idlePrev: [Circular],
                       _idleStart: 995 },
                    _idlePrev: 
                     { _idleNext: [Circular],
                       _idlePrev: 
                        { [Function: utcDate]
                          _onTimeout: [Function],
                          _idleTimeout: 5,
                          _idleNext: [Circular],
                          _idlePrev: [Circular],
                          _idleStart: 995 } },
                    _idleStart: 997,
                    parser: 
                     HTTPParser {
                       '0': [Function: parserOnHeaders],
                       '1': [Function: parserOnHeadersComplete],
                       '2': [Function: parserOnBody],
                       '3': [Function: parserOnMessageComplete],
                       '4': [Function: onParserExecute],
                       _headers: [],
                       _url: '',
                       _consumed: true,
                       socket: [Circular],
                       incoming: [Circular],
                       maxHeaderPairs: 2000,
                       onIncoming: [Function: parserOnIncoming] },
                    on: [Function: socketOnWrap],
                    _paused: false,
                    read: [Function],
                    _consuming: true,
                    _httpMessage: 
                     ServerResponse {
                       domain: null,
                       _events: { finish: [Function: resOnFinish] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       output: [],
                       outputEncodings: [],
                       outputCallbacks: [],
                       outputSize: 0,
                       writable: true,
                       _last: false,
                       chunkedEncoding: false,
                       shouldKeepAlive: true,
                       useChunkedEncodingByDefault: true,
                       sendDate: true,
                       _removedHeader: {},
                       _contentLength: null,
                       _hasBody: true,
                       _trailer: '',
                       finished: true,
                       _headerSent: true,
                       socket: [Circular],
                       connection: [Circular],
                       _header: 'HTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-Length: 101\r\nAccess-Control-Allow-Origin: *\r\nSet-Cookie: io=A6RWxddJuNa2BXdbAAAA\r\nDate: Fri, 25 Mar 2016 05:34:04 GMT\r\nConnection: keep-alive\r\n\r\n',
                       _headers: null,
                       _headerNames: {},
                       _onPendingData: [Function: updateOutgoingData],
                       statusMessage: 'OK',
                       statusCode: 200 },
                    _peername: { address: '::1', family: 'IPv6', port: 50070 } },
                 httpVersionMajor: 1,
                 httpVersionMinor: 1,
                 httpVersion: '1.1',
                 complete: false,
                 headers: 
                  { host: 'localhost:8080',
                    connection: 'keep-alive',
                    pragma: 'no-cache',
                    'cache-control': 'no-cache',
                    'user-agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.132 Safari/537.36',
                    accept: '*/*',
                    referer: 'http://localhost:8080/',
                    'accept-encoding': 'gzip, deflate, sdch',
                    'accept-language': 'zh-CN,zh;q=0.8,en;q=0.6',
                    cookie: 'io=B5ehkX7J-gME2Jd5AAAA; amvid=7b2309f47fa4b428ae50a46e3d3c4381' },
                 rawHeaders: 
                  [ 'Host',
                    'localhost:8080',
                    'Connection',
                    'keep-alive',
                    'Pragma',
                    'no-cache',
                    'Cache-Control',
                    'no-cache',
                    'User-Agent',
                    'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.132 Safari/537.36',
                    'Accept',
                    '*/*',
                    'Referer',
                    'http://localhost:8080/',
                    'Accept-Encoding',
                    'gzip, deflate, sdch',
                    'Accept-Language',
                    'zh-CN,zh;q=0.8,en;q=0.6',
                    'Cookie',
                    'io=B5ehkX7J-gME2Jd5AAAA; amvid=7b2309f47fa4b428ae50a46e3d3c4381' ],
                 trailers: {},
                 rawTrailers: [],
                 upgrade: false,
                 url: '/socket.io/?EIO=3&transport=polling&t=LEiG-Ij',
                 method: 'GET',
                 statusCode: null,
                 statusMessage: null,
                 client: 
                  Socket {
                    _connecting: false,
                    _hadError: false,
                    _handle: 
                     TCP {
                       _externalStream: {},
                       fd: -1,
                       reading: true,
                       owner: [Circular],
                       onread: [Function: onread],
                       onconnection: null,
                       writeQueueSize: 0 },
                    _parent: null,
                    _host: null,
                    _readableState: 
                     ReadableState {
                       objectMode: false,
                       highWaterMark: 16384,
                       buffer: [],
                       length: 0,
                       pipes: null,
                       pipesCount: 0,
                       flowing: true,
                       ended: false,
                       endEmitted: false,
                       reading: true,
                       sync: false,
                       needReadable: true,
                       emittedReadable: false,
                       readableListening: false,
                       resumeScheduled: false,
                       defaultEncoding: 'utf8',
                       ranOut: false,
                       awaitDrain: 0,
                       readingMore: false,
                       decoder: null,
                       encoding: null },
                    readable: true,
                    domain: null,
                    _events: 
                     { end: 
                        [ { [Function: g] listener: [Function: onend] },
                          [Function: socketOnEnd] ],
                       finish: [Function: onSocketFinish],
                       _socketEnd: [Function: onSocketEnd],
                       drain: [ [Function: ondrain], [Function: socketOnDrain] ],
                       timeout: [Function],
                       error: [Function: socketOnError],
                       close: 
                        [ [Function: serverSocketCloseListener],
                          [Function: onServerResponseClose] ],
                       data: [Function: socketOnData],
                       resume: [Function: onSocketResume],
                       pause: [Function: onSocketPause] },
                    _eventsCount: 10,
                    _maxListeners: undefined,
                    _writableState: 
                     WritableState {
                       objectMode: false,
                       highWaterMark: 16384,
                       needDrain: false,
                       ending: false,
                       ended: false,
                       finished: false,
                       decodeStrings: false,
                       defaultEncoding: 'utf8',
                       length: 0,
                       writing: false,
                       corked: 0,
                       sync: false,
                       bufferProcessing: false,
                       onwrite: [Function],
                       writecb: null,
                       writelen: 0,
                       bufferedRequest: null,
                       lastBufferedRequest: null,
                       pendingcb: 3,
                       prefinished: false,
                       errorEmitted: false },
                    writable: true,
                    allowHalfOpen: true,
                    destroyed: false,
                    bytesRead: 0,
                    _bytesDispatched: 311,
                    _sockname: null,
                    _pendingData: null,
                    _pendingEncoding: '',
                    server: 
                     Server {
                       domain: null,
                       _events: 
                        { connection: [Function: connectionListener],
                          clientError: [Function],
                          close: [Function: bound ],
                          upgrade: [Function],
                          request: [Function] },
                       _eventsCount: 5,
                       _maxListeners: undefined,
                       _connections: 1,
                       _handle: 
                        TCP {
                          _externalStream: {},
                          fd: -1,
                          reading: false,
                          owner: [Circular],
                          onread: null,
                          onconnection: [Function: onconnection],
                          writeQueueSize: 0 },
                       _usingSlaves: false,
                       _slaves: [],
                       _unref: false,
                       allowHalfOpen: true,
                       pauseOnConnect: false,
                       httpAllowHalfOpen: false,
                       timeout: 120000,
                       _pendingResponseData: 0,
                       _connectionKey: '6::::8080' },
                    _idleTimeout: 120000,
                    _idleNext: 
                     { [Function: utcDate]
                       _onTimeout: [Function],
                       _idleTimeout: 5,
                       _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
                       _idlePrev: [Circular],
                       _idleStart: 995 },
                    _idlePrev: 
                     { _idleNext: [Circular],
                       _idlePrev: 
                        { [Function: utcDate]
                          _onTimeout: [Function],
                          _idleTimeout: 5,
                          _idleNext: [Circular],
                          _idlePrev: [Circular],
                          _idleStart: 995 } },
                    _idleStart: 997,
                    parser: 
                     HTTPParser {
                       '0': [Function: parserOnHeaders],
                       '1': [Function: parserOnHeadersComplete],
                       '2': [Function: parserOnBody],
                       '3': [Function: parserOnMessageComplete],
                       '4': [Function: onParserExecute],
                       _headers: [],
                       _url: '',
                       _consumed: true,
                       socket: [Circular],
                       incoming: [Circular],
                       maxHeaderPairs: 2000,
                       onIncoming: [Function: parserOnIncoming] },
                    on: [Function: socketOnWrap],
                    _paused: false,
                    read: [Function],
                    _consuming: true,
                    _httpMessage: 
                     ServerResponse {
                       domain: null,
                       _events: { finish: [Function: resOnFinish] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       output: [],
                       outputEncodings: [],
                       outputCallbacks: [],
                       outputSize: 0,
                       writable: true,
                       _last: false,
                       chunkedEncoding: false,
                       shouldKeepAlive: true,
                       useChunkedEncodingByDefault: true,
                       sendDate: true,
                       _removedHeader: {},
                       _contentLength: null,
                       _hasBody: true,
                       _trailer: '',
                       finished: true,
                       _headerSent: true,
                       socket: [Circular],
                       connection: [Circular],
                       _header: 'HTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-Length: 101\r\nAccess-Control-Allow-Origin: *\r\nSet-Cookie: io=A6RWxddJuNa2BXdbAAAA\r\nDate: Fri, 25 Mar 2016 05:34:04 GMT\r\nConnection: keep-alive\r\n\r\n',
                       _headers: null,
                       _headerNames: {},
                       _onPendingData: [Function: updateOutgoingData],
                       statusMessage: 'OK',
                       statusCode: 200 },
                    _peername: { address: '::1', family: 'IPv6', port: 50070 } },
                 _consuming: false,
                 _dumped: false,
                 _query: { EIO: '3', transport: 'polling', t: 'LEiG-Ij' },
                 res: 
                  ServerResponse {
                    domain: null,
                    _events: { finish: [Function: resOnFinish] },
                    _eventsCount: 1,
                    _maxListeners: undefined,
                    output: [],
                    outputEncodings: [],
                    outputCallbacks: [],
                    outputSize: 0,
                    writable: true,
                    _last: false,
                    chunkedEncoding: false,
                    shouldKeepAlive: true,
                    useChunkedEncodingByDefault: true,
                    sendDate: true,
                    _removedHeader: {},
                    _contentLength: null,
                    _hasBody: true,
                    _trailer: '',
                    finished: true,
                    _headerSent: true,
                    socket: 
                     Socket {
                       _connecting: false,
                       _hadError: false,
                       _handle: 
                        TCP {
                          _externalStream: {},
                          fd: -1,
                          reading: true,
                          owner: [Circular],
                          onread: [Function: onread],
                          onconnection: null,
                          writeQueueSize: 0 },
                       _parent: null,
                       _host: null,
                       _readableState: 
                        ReadableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          buffer: [],
                          length: 0,
                          pipes: null,
                          pipesCount: 0,
                          flowing: true,
                          ended: false,
                          endEmitted: false,
                          reading: true,
                          sync: false,
                          needReadable: true,
                          emittedReadable: false,
                          readableListening: false,
                          resumeScheduled: false,
                          defaultEncoding: 'utf8',
                          ranOut: false,
                          awaitDrain: 0,
                          readingMore: false,
                          decoder: null,
                          encoding: null },
                       readable: true,
                       domain: null,
                       _events: 
                        { end: 
                           [ { [Function: g] listener: [Function: onend] },
                             [Function: socketOnEnd] ],
                          finish: [Function: onSocketFinish],
                          _socketEnd: [Function: onSocketEnd],
                          drain: [ [Function: ondrain], [Function: socketOnDrain] ],
                          timeout: [Function],
                          error: [Function: socketOnError],
                          close: 
                           [ [Function: serverSocketCloseListener],
                             [Function: onServerResponseClose] ],
                          data: [Function: socketOnData],
                          resume: [Function: onSocketResume],
                          pause: [Function: onSocketPause] },
                       _eventsCount: 10,
                       _maxListeners: undefined,
                       _writableState: 
                        WritableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          needDrain: false,
                          ending: false,
                          ended: false,
                          finished: false,
                          decodeStrings: false,
                          defaultEncoding: 'utf8',
                          length: 0,
                          writing: false,
                          corked: 0,
                          sync: false,
                          bufferProcessing: false,
                          onwrite: [Function],
                          writecb: null,
                          writelen: 0,
                          bufferedRequest: null,
                          lastBufferedRequest: null,
                          pendingcb: 3,
                          prefinished: false,
                          errorEmitted: false },
                       writable: true,
                       allowHalfOpen: true,
                       destroyed: false,
                       bytesRead: 0,
                       _bytesDispatched: 311,
                       _sockname: null,
                       _pendingData: null,
                       _pendingEncoding: '',
                       server: 
                        Server {
                          domain: null,
                          _events: 
                           { connection: [Function: connectionListener],
                             clientError: [Function],
                             close: [Function: bound ],
                             upgrade: [Function],
                             request: [Function] },
                          _eventsCount: 5,
                          _maxListeners: undefined,
                          _connections: 1,
                          _handle: 
                           TCP {
                             _externalStream: {},
                             fd: -1,
                             reading: false,
                             owner: [Circular],
                             onread: null,
                             onconnection: [Function: onconnection],
                             writeQueueSize: 0 },
                          _usingSlaves: false,
                          _slaves: [],
                          _unref: false,
                          allowHalfOpen: true,
                          pauseOnConnect: false,
                          httpAllowHalfOpen: false,
                          timeout: 120000,
                          _pendingResponseData: 0,
                          _connectionKey: '6::::8080' },
                       _idleTimeout: 120000,
                       _idleNext: 
                        { [Function: utcDate]
                          _onTimeout: [Function],
                          _idleTimeout: 5,
                          _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
                          _idlePrev: [Circular],
                          _idleStart: 995 },
                       _idlePrev: 
                        { _idleNext: [Circular],
                          _idlePrev: 
                           { [Function: utcDate]
                             _onTimeout: [Function],
                             _idleTimeout: 5,
                             _idleNext: [Circular],
                             _idlePrev: [Circular],
                             _idleStart: 995 } },
                       _idleStart: 997,
                       parser: 
                        HTTPParser {
                          '0': [Function: parserOnHeaders],
                          '1': [Function: parserOnHeadersComplete],
                          '2': [Function: parserOnBody],
                          '3': [Function: parserOnMessageComplete],
                          '4': [Function: onParserExecute],
                          _headers: [],
                          _url: '',
                          _consumed: true,
                          socket: [Circular],
                          incoming: [Circular],
                          maxHeaderPairs: 2000,
                          onIncoming: [Function: parserOnIncoming] },
                       on: [Function: socketOnWrap],
                       _paused: false,
                       read: [Function],
                       _consuming: true,
                       _httpMessage: [Circular],
                       _peername: { address: '::1', family: 'IPv6', port: 50070 } },
                    connection: 
                     Socket {
                       _connecting: false,
                       _hadError: false,
                       _handle: 
                        TCP {
                          _externalStream: {},
                          fd: -1,
                          reading: true,
                          owner: [Circular],
                          onread: [Function: onread],
                          onconnection: null,
                          writeQueueSize: 0 },
                       _parent: null,
                       _host: null,
                       _readableState: 
                        ReadableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          buffer: [],
                          length: 0,
                          pipes: null,
                          pipesCount: 0,
                          flowing: true,
                          ended: false,
                          endEmitted: false,
                          reading: true,
                          sync: false,
                          needReadable: true,
                          emittedReadable: false,
                          readableListening: false,
                          resumeScheduled: false,
                          defaultEncoding: 'utf8',
                          ranOut: false,
                          awaitDrain: 0,
                          readingMore: false,
                          decoder: null,
                          encoding: null },
                       readable: true,
                       domain: null,
                       _events: 
                        { end: 
                           [ { [Function: g] listener: [Function: onend] },
                             [Function: socketOnEnd] ],
                          finish: [Function: onSocketFinish],
                          _socketEnd: [Function: onSocketEnd],
                          drain: [ [Function: ondrain], [Function: socketOnDrain] ],
                          timeout: [Function],
                          error: [Function: socketOnError],
                          close: 
                           [ [Function: serverSocketCloseListener],
                             [Function: onServerResponseClose] ],
                          data: [Function: socketOnData],
                          resume: [Function: onSocketResume],
                          pause: [Function: onSocketPause] },
                       _eventsCount: 10,
                       _maxListeners: undefined,
                       _writableState: 
                        WritableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          needDrain: false,
                          ending: false,
                          ended: false,
                          finished: false,
                          decodeStrings: false,
                          defaultEncoding: 'utf8',
                          length: 0,
                          writing: false,
                          corked: 0,
                          sync: false,
                          bufferProcessing: false,
                          onwrite: [Function],
                          writecb: null,
                          writelen: 0,
                          bufferedRequest: null,
                          lastBufferedRequest: null,
                          pendingcb: 3,
                          prefinished: false,
                          errorEmitted: false },
                       writable: true,
                       allowHalfOpen: true,
                       destroyed: false,
                       bytesRead: 0,
                       _bytesDispatched: 311,
                       _sockname: null,
                       _pendingData: null,
                       _pendingEncoding: '',
                       server: 
                        Server {
                          domain: null,
                          _events: 
                           { connection: [Function: connectionListener],
                             clientError: [Function],
                             close: [Function: bound ],
                             upgrade: [Function],
                             request: [Function] },
                          _eventsCount: 5,
                          _maxListeners: undefined,
                          _connections: 1,
                          _handle: 
                           TCP {
                             _externalStream: {},
                             fd: -1,
                             reading: false,
                             owner: [Circular],
                             onread: null,
                             onconnection: [Function: onconnection],
                             writeQueueSize: 0 },
                          _usingSlaves: false,
                          _slaves: [],
                          _unref: false,
                          allowHalfOpen: true,
                          pauseOnConnect: false,
                          httpAllowHalfOpen: false,
                          timeout: 120000,
                          _pendingResponseData: 0,
                          _connectionKey: '6::::8080' },
                       _idleTimeout: 120000,
                       _idleNext: 
                        { [Function: utcDate]
                          _onTimeout: [Function],
                          _idleTimeout: 5,
                          _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
                          _idlePrev: [Circular],
                          _idleStart: 995 },
                       _idlePrev: 
                        { _idleNext: [Circular],
                          _idlePrev: 
                           { [Function: utcDate]
                             _onTimeout: [Function],
                             _idleTimeout: 5,
                             _idleNext: [Circular],
                             _idlePrev: [Circular],
                             _idleStart: 995 } },
                       _idleStart: 997,
                       parser: 
                        HTTPParser {
                          '0': [Function: parserOnHeaders],
                          '1': [Function: parserOnHeadersComplete],
                          '2': [Function: parserOnBody],
                          '3': [Function: parserOnMessageComplete],
                          '4': [Function: onParserExecute],
                          _headers: [],
                          _url: '',
                          _consumed: true,
                          socket: [Circular],
                          incoming: [Circular],
                          maxHeaderPairs: 2000,
                          onIncoming: [Function: parserOnIncoming] },
                       on: [Function: socketOnWrap],
                       _paused: false,
                       read: [Function],
                       _consuming: true,
                       _httpMessage: [Circular],
                       _peername: { address: '::1', family: 'IPv6', port: 50070 } },
                    _header: 'HTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-Length: 101\r\nAccess-Control-Allow-Origin: *\r\nSet-Cookie: io=A6RWxddJuNa2BXdbAAAA\r\nDate: Fri, 25 Mar 2016 05:34:04 GMT\r\nConnection: keep-alive\r\n\r\n',
                    _headers: null,
                    _headerNames: {},
                    _onPendingData: [Function: updateOutgoingData],
                    statusMessage: 'OK',
                    statusCode: 200 },
                 cleanup: [Function: cleanup] },
              remoteAddress: '::1',
              checkIntervalTimer: null,
              upgradeTimeoutTimer: null,
              pingTimeoutTimer: 
               { _called: false,
                 _idleTimeout: 85000,
                 _idlePrev: 
                  Timer {
                    '0': [Function: listOnTimeout],
                    _idleNext: [Circular],
                    _idlePrev: [Circular],
                    msecs: 85000 },
                 _idleNext: 
                  Timer {
                    '0': [Function: listOnTimeout],
                    _idleNext: [Circular],
                    _idlePrev: [Circular],
                    msecs: 85000 },
                 _idleStart: 978,
                 _onTimeout: [Function],
                 _repeat: null },
              transport: 
               XHR {
                 readyState: 'open',
                 discarded: false,
                 closeTimeout: 30000,
                 maxHttpBufferSize: 100000000,
                 httpCompression: { threshold: 1024 },
                 supportsBinary: true,
                 _events: 
                  { error: { [Function: g] listener: [Function: bound ] },
                    packet: [Function: bound ],
                    drain: [ [Function: bound ], [Function: onDrain] ],
                    close: { [Function: g] listener: [Function: bound ] },
                    headers: [Function] },
                 _eventsCount: 5,
                 sid: 'A6RWxddJuNa2BXdbAAAA',
                 req: null,
                 res: null,
                 writable: false },
              _events: 
               { close: [ { [Function: g] listener: [Function] }, [Function: bound ] ],
                 data: [Function: bound ],
                 error: [Function: bound ] },
              _eventsCount: 3 } },
        clientsCount: 1,
        pingTimeout: 60000,
        pingInterval: 25000,
        upgradeTimeout: 10000,
        maxHttpBufferSize: 100000000,
        transports: [ 'polling', 'websocket' ],
        allowUpgrades: true,
        allowRequest: [Function: bound ],
        cookie: 'io',
        cookiePath: false,
        perMessageDeflate: { threshold: 1024 },
        httpCompression: { threshold: 1024 },
        ws: 
         WebSocketServer {
           domain: null,
           _events: {},
           _eventsCount: 0,
           _maxListeners: undefined,
           options: 
            { host: [Getter],
              port: [Getter],
              server: [Getter],
              verifyClient: [Getter],
              handleProtocols: [Getter],
              path: [Getter],
              noServer: [Getter],
              disableHixie: [Getter],
              clientTracking: [Getter],
              perMessageDeflate: [Getter] },
           path: null,
           clients: [] },
        _events: { connection: [Function: bound ] },
        _eventsCount: 1 },
     httpServer: 
      Server {
        domain: null,
        _events: 
         { connection: [Function: connectionListener],
           clientError: [Function],
           close: [Function: bound ],
           upgrade: [Function],
           request: [Function] },
        _eventsCount: 5,
        _maxListeners: undefined,
        _connections: 1,
        _handle: 
         TCP {
           _externalStream: {},
           fd: -1,
           reading: false,
           owner: [Circular],
           onread: null,
           onconnection: [Function: onconnection],
           writeQueueSize: 0 },
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _pendingResponseData: 0,
        _connectionKey: '6::::8080' },
     engine: 
      Server {
        clients: 
         { A6RWxddJuNa2BXdbAAAA: 
            Socket {
              id: 'A6RWxddJuNa2BXdbAAAA',
              server: [Circular],
              upgrading: false,
              upgraded: false,
              readyState: 'open',
              writeBuffer: [],
              packetsFn: [],
              sentCallbackFn: [],
              cleanupFn: [ [Function], [Function] ],
              request: 
               IncomingMessage {
                 _readableState: 
                  ReadableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    buffer: [],
                    length: 0,
                    pipes: null,
                    pipesCount: 0,
                    flowing: null,
                    ended: false,
                    endEmitted: false,
                    reading: false,
                    sync: true,
                    needReadable: false,
                    emittedReadable: false,
                    readableListening: false,
                    resumeScheduled: false,
                    defaultEncoding: 'utf8',
                    ranOut: false,
                    awaitDrain: 0,
                    readingMore: false,
                    decoder: null,
                    encoding: null },
                 readable: true,
                 domain: null,
                 _events: {},
                 _eventsCount: 0,
                 _maxListeners: undefined,
                 socket: 
                  Socket {
                    _connecting: false,
                    _hadError: false,
                    _handle: 
                     TCP {
                       _externalStream: {},
                       fd: -1,
                       reading: true,
                       owner: [Circular],
                       onread: [Function: onread],
                       onconnection: null,
                       writeQueueSize: 0 },
                    _parent: null,
                    _host: null,
                    _readableState: 
                     ReadableState {
                       objectMode: false,
                       highWaterMark: 16384,
                       buffer: [],
                       length: 0,
                       pipes: null,
                       pipesCount: 0,
                       flowing: true,
                       ended: false,
                       endEmitted: false,
                       reading: true,
                       sync: false,
                       needReadable: true,
                       emittedReadable: false,
                       readableListening: false,
                       resumeScheduled: false,
                       defaultEncoding: 'utf8',
                       ranOut: false,
                       awaitDrain: 0,
                       readingMore: false,
                       decoder: null,
                       encoding: null },
                    readable: true,
                    domain: null,
                    _events: 
                     { end: 
                        [ { [Function: g] listener: [Function: onend] },
                          [Function: socketOnEnd] ],
                       finish: [Function: onSocketFinish],
                       _socketEnd: [Function: onSocketEnd],
                       drain: [ [Function: ondrain], [Function: socketOnDrain] ],
                       timeout: [Function],
                       error: [Function: socketOnError],
                       close: 
                        [ [Function: serverSocketCloseListener],
                          [Function: onServerResponseClose] ],
                       data: [Function: socketOnData],
                       resume: [Function: onSocketResume],
                       pause: [Function: onSocketPause] },
                    _eventsCount: 10,
                    _maxListeners: undefined,
                    _writableState: 
                     WritableState {
                       objectMode: false,
                       highWaterMark: 16384,
                       needDrain: false,
                       ending: false,
                       ended: false,
                       finished: false,
                       decodeStrings: false,
                       defaultEncoding: 'utf8',
                       length: 0,
                       writing: false,
                       corked: 0,
                       sync: false,
                       bufferProcessing: false,
                       onwrite: [Function],
                       writecb: null,
                       writelen: 0,
                       bufferedRequest: null,
                       lastBufferedRequest: null,
                       pendingcb: 3,
                       prefinished: false,
                       errorEmitted: false },
                    writable: true,
                    allowHalfOpen: true,
                    destroyed: false,
                    bytesRead: 0,
                    _bytesDispatched: 311,
                    _sockname: null,
                    _pendingData: null,
                    _pendingEncoding: '',
                    server: 
                     Server {
                       domain: null,
                       _events: 
                        { connection: [Function: connectionListener],
                          clientError: [Function],
                          close: [Function: bound ],
                          upgrade: [Function],
                          request: [Function] },
                       _eventsCount: 5,
                       _maxListeners: undefined,
                       _connections: 1,
                       _handle: 
                        TCP {
                          _externalStream: {},
                          fd: -1,
                          reading: false,
                          owner: [Circular],
                          onread: null,
                          onconnection: [Function: onconnection],
                          writeQueueSize: 0 },
                       _usingSlaves: false,
                       _slaves: [],
                       _unref: false,
                       allowHalfOpen: true,
                       pauseOnConnect: false,
                       httpAllowHalfOpen: false,
                       timeout: 120000,
                       _pendingResponseData: 0,
                       _connectionKey: '6::::8080' },
                    _idleTimeout: 120000,
                    _idleNext: 
                     { [Function: utcDate]
                       _onTimeout: [Function],
                       _idleTimeout: 5,
                       _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
                       _idlePrev: [Circular],
                       _idleStart: 995 },
                    _idlePrev: 
                     { _idleNext: [Circular],
                       _idlePrev: 
                        { [Function: utcDate]
                          _onTimeout: [Function],
                          _idleTimeout: 5,
                          _idleNext: [Circular],
                          _idlePrev: [Circular],
                          _idleStart: 995 } },
                    _idleStart: 997,
                    parser: 
                     HTTPParser {
                       '0': [Function: parserOnHeaders],
                       '1': [Function: parserOnHeadersComplete],
                       '2': [Function: parserOnBody],
                       '3': [Function: parserOnMessageComplete],
                       '4': [Function: onParserExecute],
                       _headers: [],
                       _url: '',
                       _consumed: true,
                       socket: [Circular],
                       incoming: [Circular],
                       maxHeaderPairs: 2000,
                       onIncoming: [Function: parserOnIncoming] },
                    on: [Function: socketOnWrap],
                    _paused: false,
                    read: [Function],
                    _consuming: true,
                    _httpMessage: 
                     ServerResponse {
                       domain: null,
                       _events: { finish: [Function: resOnFinish] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       output: [],
                       outputEncodings: [],
                       outputCallbacks: [],
                       outputSize: 0,
                       writable: true,
                       _last: false,
                       chunkedEncoding: false,
                       shouldKeepAlive: true,
                       useChunkedEncodingByDefault: true,
                       sendDate: true,
                       _removedHeader: {},
                       _contentLength: null,
                       _hasBody: true,
                       _trailer: '',
                       finished: true,
                       _headerSent: true,
                       socket: [Circular],
                       connection: [Circular],
                       _header: 'HTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-Length: 101\r\nAccess-Control-Allow-Origin: *\r\nSet-Cookie: io=A6RWxddJuNa2BXdbAAAA\r\nDate: Fri, 25 Mar 2016 05:34:04 GMT\r\nConnection: keep-alive\r\n\r\n',
                       _headers: null,
                       _headerNames: {},
                       _onPendingData: [Function: updateOutgoingData],
                       statusMessage: 'OK',
                       statusCode: 200 },
                    _peername: { address: '::1', family: 'IPv6', port: 50070 } },
                 connection: 
                  Socket {
                    _connecting: false,
                    _hadError: false,
                    _handle: 
                     TCP {
                       _externalStream: {},
                       fd: -1,
                       reading: true,
                       owner: [Circular],
                       onread: [Function: onread],
                       onconnection: null,
                       writeQueueSize: 0 },
                    _parent: null,
                    _host: null,
                    _readableState: 
                     ReadableState {
                       objectMode: false,
                       highWaterMark: 16384,
                       buffer: [],
                       length: 0,
                       pipes: null,
                       pipesCount: 0,
                       flowing: true,
                       ended: false,
                       endEmitted: false,
                       reading: true,
                       sync: false,
                       needReadable: true,
                       emittedReadable: false,
                       readableListening: false,
                       resumeScheduled: false,
                       defaultEncoding: 'utf8',
                       ranOut: false,
                       awaitDrain: 0,
                       readingMore: false,
                       decoder: null,
                       encoding: null },
                    readable: true,
                    domain: null,
                    _events: 
                     { end: 
                        [ { [Function: g] listener: [Function: onend] },
                          [Function: socketOnEnd] ],
                       finish: [Function: onSocketFinish],
                       _socketEnd: [Function: onSocketEnd],
                       drain: [ [Function: ondrain], [Function: socketOnDrain] ],
                       timeout: [Function],
                       error: [Function: socketOnError],
                       close: 
                        [ [Function: serverSocketCloseListener],
                          [Function: onServerResponseClose] ],
                       data: [Function: socketOnData],
                       resume: [Function: onSocketResume],
                       pause: [Function: onSocketPause] },
                    _eventsCount: 10,
                    _maxListeners: undefined,
                    _writableState: 
                     WritableState {
                       objectMode: false,
                       highWaterMark: 16384,
                       needDrain: false,
                       ending: false,
                       ended: false,
                       finished: false,
                       decodeStrings: false,
                       defaultEncoding: 'utf8',
                       length: 0,
                       writing: false,
                       corked: 0,
                       sync: false,
                       bufferProcessing: false,
                       onwrite: [Function],
                       writecb: null,
                       writelen: 0,
                       bufferedRequest: null,
                       lastBufferedRequest: null,
                       pendingcb: 3,
                       prefinished: false,
                       errorEmitted: false },
                    writable: true,
                    allowHalfOpen: true,
                    destroyed: false,
                    bytesRead: 0,
                    _bytesDispatched: 311,
                    _sockname: null,
                    _pendingData: null,
                    _pendingEncoding: '',
                    server: 
                     Server {
                       domain: null,
                       _events: 
                        { connection: [Function: connectionListener],
                          clientError: [Function],
                          close: [Function: bound ],
                          upgrade: [Function],
                          request: [Function] },
                       _eventsCount: 5,
                       _maxListeners: undefined,
                       _connections: 1,
                       _handle: 
                        TCP {
                          _externalStream: {},
                          fd: -1,
                          reading: false,
                          owner: [Circular],
                          onread: null,
                          onconnection: [Function: onconnection],
                          writeQueueSize: 0 },
                       _usingSlaves: false,
                       _slaves: [],
                       _unref: false,
                       allowHalfOpen: true,
                       pauseOnConnect: false,
                       httpAllowHalfOpen: false,
                       timeout: 120000,
                       _pendingResponseData: 0,
                       _connectionKey: '6::::8080' },
                    _idleTimeout: 120000,
                    _idleNext: 
                     { [Function: utcDate]
                       _onTimeout: [Function],
                       _idleTimeout: 5,
                       _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
                       _idlePrev: [Circular],
                       _idleStart: 995 },
                    _idlePrev: 
                     { _idleNext: [Circular],
                       _idlePrev: 
                        { [Function: utcDate]
                          _onTimeout: [Function],
                          _idleTimeout: 5,
                          _idleNext: [Circular],
                          _idlePrev: [Circular],
                          _idleStart: 995 } },
                    _idleStart: 997,
                    parser: 
                     HTTPParser {
                       '0': [Function: parserOnHeaders],
                       '1': [Function: parserOnHeadersComplete],
                       '2': [Function: parserOnBody],
                       '3': [Function: parserOnMessageComplete],
                       '4': [Function: onParserExecute],
                       _headers: [],
                       _url: '',
                       _consumed: true,
                       socket: [Circular],
                       incoming: [Circular],
                       maxHeaderPairs: 2000,
                       onIncoming: [Function: parserOnIncoming] },
                    on: [Function: socketOnWrap],
                    _paused: false,
                    read: [Function],
                    _consuming: true,
                    _httpMessage: 
                     ServerResponse {
                       domain: null,
                       _events: { finish: [Function: resOnFinish] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       output: [],
                       outputEncodings: [],
                       outputCallbacks: [],
                       outputSize: 0,
                       writable: true,
                       _last: false,
                       chunkedEncoding: false,
                       shouldKeepAlive: true,
                       useChunkedEncodingByDefault: true,
                       sendDate: true,
                       _removedHeader: {},
                       _contentLength: null,
                       _hasBody: true,
                       _trailer: '',
                       finished: true,
                       _headerSent: true,
                       socket: [Circular],
                       connection: [Circular],
                       _header: 'HTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-Length: 101\r\nAccess-Control-Allow-Origin: *\r\nSet-Cookie: io=A6RWxddJuNa2BXdbAAAA\r\nDate: Fri, 25 Mar 2016 05:34:04 GMT\r\nConnection: keep-alive\r\n\r\n',
                       _headers: null,
                       _headerNames: {},
                       _onPendingData: [Function: updateOutgoingData],
                       statusMessage: 'OK',
                       statusCode: 200 },
                    _peername: { address: '::1', family: 'IPv6', port: 50070 } },
                 httpVersionMajor: 1,
                 httpVersionMinor: 1,
                 httpVersion: '1.1',
                 complete: false,
                 headers: 
                  { host: 'localhost:8080',
                    connection: 'keep-alive',
                    pragma: 'no-cache',
                    'cache-control': 'no-cache',
                    'user-agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.132 Safari/537.36',
                    accept: '*/*',
                    referer: 'http://localhost:8080/',
                    'accept-encoding': 'gzip, deflate, sdch',
                    'accept-language': 'zh-CN,zh;q=0.8,en;q=0.6',
                    cookie: 'io=B5ehkX7J-gME2Jd5AAAA; amvid=7b2309f47fa4b428ae50a46e3d3c4381' },
                 rawHeaders: 
                  [ 'Host',
                    'localhost:8080',
                    'Connection',
                    'keep-alive',
                    'Pragma',
                    'no-cache',
                    'Cache-Control',
                    'no-cache',
                    'User-Agent',
                    'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.132 Safari/537.36',
                    'Accept',
                    '*/*',
                    'Referer',
                    'http://localhost:8080/',
                    'Accept-Encoding',
                    'gzip, deflate, sdch',
                    'Accept-Language',
                    'zh-CN,zh;q=0.8,en;q=0.6',
                    'Cookie',
                    'io=B5ehkX7J-gME2Jd5AAAA; amvid=7b2309f47fa4b428ae50a46e3d3c4381' ],
                 trailers: {},
                 rawTrailers: [],
                 upgrade: false,
                 url: '/socket.io/?EIO=3&transport=polling&t=LEiG-Ij',
                 method: 'GET',
                 statusCode: null,
                 statusMessage: null,
                 client: 
                  Socket {
                    _connecting: false,
                    _hadError: false,
                    _handle: 
                     TCP {
                       _externalStream: {},
                       fd: -1,
                       reading: true,
                       owner: [Circular],
                       onread: [Function: onread],
                       onconnection: null,
                       writeQueueSize: 0 },
                    _parent: null,
                    _host: null,
                    _readableState: 
                     ReadableState {
                       objectMode: false,
                       highWaterMark: 16384,
                       buffer: [],
                       length: 0,
                       pipes: null,
                       pipesCount: 0,
                       flowing: true,
                       ended: false,
                       endEmitted: false,
                       reading: true,
                       sync: false,
                       needReadable: true,
                       emittedReadable: false,
                       readableListening: false,
                       resumeScheduled: false,
                       defaultEncoding: 'utf8',
                       ranOut: false,
                       awaitDrain: 0,
                       readingMore: false,
                       decoder: null,
                       encoding: null },
                    readable: true,
                    domain: null,
                    _events: 
                     { end: 
                        [ { [Function: g] listener: [Function: onend] },
                          [Function: socketOnEnd] ],
                       finish: [Function: onSocketFinish],
                       _socketEnd: [Function: onSocketEnd],
                       drain: [ [Function: ondrain], [Function: socketOnDrain] ],
                       timeout: [Function],
                       error: [Function: socketOnError],
                       close: 
                        [ [Function: serverSocketCloseListener],
                          [Function: onServerResponseClose] ],
                       data: [Function: socketOnData],
                       resume: [Function: onSocketResume],
                       pause: [Function: onSocketPause] },
                    _eventsCount: 10,
                    _maxListeners: undefined,
                    _writableState: 
                     WritableState {
                       objectMode: false,
                       highWaterMark: 16384,
                       needDrain: false,
                       ending: false,
                       ended: false,
                       finished: false,
                       decodeStrings: false,
                       defaultEncoding: 'utf8',
                       length: 0,
                       writing: false,
                       corked: 0,
                       sync: false,
                       bufferProcessing: false,
                       onwrite: [Function],
                       writecb: null,
                       writelen: 0,
                       bufferedRequest: null,
                       lastBufferedRequest: null,
                       pendingcb: 3,
                       prefinished: false,
                       errorEmitted: false },
                    writable: true,
                    allowHalfOpen: true,
                    destroyed: false,
                    bytesRead: 0,
                    _bytesDispatched: 311,
                    _sockname: null,
                    _pendingData: null,
                    _pendingEncoding: '',
                    server: 
                     Server {
                       domain: null,
                       _events: 
                        { connection: [Function: connectionListener],
                          clientError: [Function],
                          close: [Function: bound ],
                          upgrade: [Function],
                          request: [Function] },
                       _eventsCount: 5,
                       _maxListeners: undefined,
                       _connections: 1,
                       _handle: 
                        TCP {
                          _externalStream: {},
                          fd: -1,
                          reading: false,
                          owner: [Circular],
                          onread: null,
                          onconnection: [Function: onconnection],
                          writeQueueSize: 0 },
                       _usingSlaves: false,
                       _slaves: [],
                       _unref: false,
                       allowHalfOpen: true,
                       pauseOnConnect: false,
                       httpAllowHalfOpen: false,
                       timeout: 120000,
                       _pendingResponseData: 0,
                       _connectionKey: '6::::8080' },
                    _idleTimeout: 120000,
                    _idleNext: 
                     { [Function: utcDate]
                       _onTimeout: [Function],
                       _idleTimeout: 5,
                       _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
                       _idlePrev: [Circular],
                       _idleStart: 995 },
                    _idlePrev: 
                     { _idleNext: [Circular],
                       _idlePrev: 
                        { [Function: utcDate]
                          _onTimeout: [Function],
                          _idleTimeout: 5,
                          _idleNext: [Circular],
                          _idlePrev: [Circular],
                          _idleStart: 995 } },
                    _idleStart: 997,
                    parser: 
                     HTTPParser {
                       '0': [Function: parserOnHeaders],
                       '1': [Function: parserOnHeadersComplete],
                       '2': [Function: parserOnBody],
                       '3': [Function: parserOnMessageComplete],
                       '4': [Function: onParserExecute],
                       _headers: [],
                       _url: '',
                       _consumed: true,
                       socket: [Circular],
                       incoming: [Circular],
                       maxHeaderPairs: 2000,
                       onIncoming: [Function: parserOnIncoming] },
                    on: [Function: socketOnWrap],
                    _paused: false,
                    read: [Function],
                    _consuming: true,
                    _httpMessage: 
                     ServerResponse {
                       domain: null,
                       _events: { finish: [Function: resOnFinish] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       output: [],
                       outputEncodings: [],
                       outputCallbacks: [],
                       outputSize: 0,
                       writable: true,
                       _last: false,
                       chunkedEncoding: false,
                       shouldKeepAlive: true,
                       useChunkedEncodingByDefault: true,
                       sendDate: true,
                       _removedHeader: {},
                       _contentLength: null,
                       _hasBody: true,
                       _trailer: '',
                       finished: true,
                       _headerSent: true,
                       socket: [Circular],
                       connection: [Circular],
                       _header: 'HTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-Length: 101\r\nAccess-Control-Allow-Origin: *\r\nSet-Cookie: io=A6RWxddJuNa2BXdbAAAA\r\nDate: Fri, 25 Mar 2016 05:34:04 GMT\r\nConnection: keep-alive\r\n\r\n',
                       _headers: null,
                       _headerNames: {},
                       _onPendingData: [Function: updateOutgoingData],
                       statusMessage: 'OK',
                       statusCode: 200 },
                    _peername: { address: '::1', family: 'IPv6', port: 50070 } },
                 _consuming: false,
                 _dumped: false,
                 _query: { EIO: '3', transport: 'polling', t: 'LEiG-Ij' },
                 res: 
                  ServerResponse {
                    domain: null,
                    _events: { finish: [Function: resOnFinish] },
                    _eventsCount: 1,
                    _maxListeners: undefined,
                    output: [],
                    outputEncodings: [],
                    outputCallbacks: [],
                    outputSize: 0,
                    writable: true,
                    _last: false,
                    chunkedEncoding: false,
                    shouldKeepAlive: true,
                    useChunkedEncodingByDefault: true,
                    sendDate: true,
                    _removedHeader: {},
                    _contentLength: null,
                    _hasBody: true,
                    _trailer: '',
                    finished: true,
                    _headerSent: true,
                    socket: 
                     Socket {
                       _connecting: false,
                       _hadError: false,
                       _handle: 
                        TCP {
                          _externalStream: {},
                          fd: -1,
                          reading: true,
                          owner: [Circular],
                          onread: [Function: onread],
                          onconnection: null,
                          writeQueueSize: 0 },
                       _parent: null,
                       _host: null,
                       _readableState: 
                        ReadableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          buffer: [],
                          length: 0,
                          pipes: null,
                          pipesCount: 0,
                          flowing: true,
                          ended: false,
                          endEmitted: false,
                          reading: true,
                          sync: false,
                          needReadable: true,
                          emittedReadable: false,
                          readableListening: false,
                          resumeScheduled: false,
                          defaultEncoding: 'utf8',
                          ranOut: false,
                          awaitDrain: 0,
                          readingMore: false,
                          decoder: null,
                          encoding: null },
                       readable: true,
                       domain: null,
                       _events: 
                        { end: 
                           [ { [Function: g] listener: [Function: onend] },
                             [Function: socketOnEnd] ],
                          finish: [Function: onSocketFinish],
                          _socketEnd: [Function: onSocketEnd],
                          drain: [ [Function: ondrain], [Function: socketOnDrain] ],
                          timeout: [Function],
                          error: [Function: socketOnError],
                          close: 
                           [ [Function: serverSocketCloseListener],
                             [Function: onServerResponseClose] ],
                          data: [Function: socketOnData],
                          resume: [Function: onSocketResume],
                          pause: [Function: onSocketPause] },
                       _eventsCount: 10,
                       _maxListeners: undefined,
                       _writableState: 
                        WritableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          needDrain: false,
                          ending: false,
                          ended: false,
                          finished: false,
                          decodeStrings: false,
                          defaultEncoding: 'utf8',
                          length: 0,
                          writing: false,
                          corked: 0,
                          sync: false,
                          bufferProcessing: false,
                          onwrite: [Function],
                          writecb: null,
                          writelen: 0,
                          bufferedRequest: null,
                          lastBufferedRequest: null,
                          pendingcb: 3,
                          prefinished: false,
                          errorEmitted: false },
                       writable: true,
                       allowHalfOpen: true,
                       destroyed: false,
                       bytesRead: 0,
                       _bytesDispatched: 311,
                       _sockname: null,
                       _pendingData: null,
                       _pendingEncoding: '',
                       server: 
                        Server {
                          domain: null,
                          _events: 
                           { connection: [Function: connectionListener],
                             clientError: [Function],
                             close: [Function: bound ],
                             upgrade: [Function],
                             request: [Function] },
                          _eventsCount: 5,
                          _maxListeners: undefined,
                          _connections: 1,
                          _handle: 
                           TCP {
                             _externalStream: {},
                             fd: -1,
                             reading: false,
                             owner: [Circular],
                             onread: null,
                             onconnection: [Function: onconnection],
                             writeQueueSize: 0 },
                          _usingSlaves: false,
                          _slaves: [],
                          _unref: false,
                          allowHalfOpen: true,
                          pauseOnConnect: false,
                          httpAllowHalfOpen: false,
                          timeout: 120000,
                          _pendingResponseData: 0,
                          _connectionKey: '6::::8080' },
                       _idleTimeout: 120000,
                       _idleNext: 
                        { [Function: utcDate]
                          _onTimeout: [Function],
                          _idleTimeout: 5,
                          _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
                          _idlePrev: [Circular],
                          _idleStart: 995 },
                       _idlePrev: 
                        { _idleNext: [Circular],
                          _idlePrev: 
                           { [Function: utcDate]
                             _onTimeout: [Function],
                             _idleTimeout: 5,
                             _idleNext: [Circular],
                             _idlePrev: [Circular],
                             _idleStart: 995 } },
                       _idleStart: 997,
                       parser: 
                        HTTPParser {
                          '0': [Function: parserOnHeaders],
                          '1': [Function: parserOnHeadersComplete],
                          '2': [Function: parserOnBody],
                          '3': [Function: parserOnMessageComplete],
                          '4': [Function: onParserExecute],
                          _headers: [],
                          _url: '',
                          _consumed: true,
                          socket: [Circular],
                          incoming: [Circular],
                          maxHeaderPairs: 2000,
                          onIncoming: [Function: parserOnIncoming] },
                       on: [Function: socketOnWrap],
                       _paused: false,
                       read: [Function],
                       _consuming: true,
                       _httpMessage: [Circular],
                       _peername: { address: '::1', family: 'IPv6', port: 50070 } },
                    connection: 
                     Socket {
                       _connecting: false,
                       _hadError: false,
                       _handle: 
                        TCP {
                          _externalStream: {},
                          fd: -1,
                          reading: true,
                          owner: [Circular],
                          onread: [Function: onread],
                          onconnection: null,
                          writeQueueSize: 0 },
                       _parent: null,
                       _host: null,
                       _readableState: 
                        ReadableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          buffer: [],
                          length: 0,
                          pipes: null,
                          pipesCount: 0,
                          flowing: true,
                          ended: false,
                          endEmitted: false,
                          reading: true,
                          sync: false,
                          needReadable: true,
                          emittedReadable: false,
                          readableListening: false,
                          resumeScheduled: false,
                          defaultEncoding: 'utf8',
                          ranOut: false,
                          awaitDrain: 0,
                          readingMore: false,
                          decoder: null,
                          encoding: null },
                       readable: true,
                       domain: null,
                       _events: 
                        { end: 
                           [ { [Function: g] listener: [Function: onend] },
                             [Function: socketOnEnd] ],
                          finish: [Function: onSocketFinish],
                          _socketEnd: [Function: onSocketEnd],
                          drain: [ [Function: ondrain], [Function: socketOnDrain] ],
                          timeout: [Function],
                          error: [Function: socketOnError],
                          close: 
                           [ [Function: serverSocketCloseListener],
                             [Function: onServerResponseClose] ],
                          data: [Function: socketOnData],
                          resume: [Function: onSocketResume],
                          pause: [Function: onSocketPause] },
                       _eventsCount: 10,
                       _maxListeners: undefined,
                       _writableState: 
                        WritableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          needDrain: false,
                          ending: false,
                          ended: false,
                          finished: false,
                          decodeStrings: false,
                          defaultEncoding: 'utf8',
                          length: 0,
                          writing: false,
                          corked: 0,
                          sync: false,
                          bufferProcessing: false,
                          onwrite: [Function],
                          writecb: null,
                          writelen: 0,
                          bufferedRequest: null,
                          lastBufferedRequest: null,
                          pendingcb: 3,
                          prefinished: false,
                          errorEmitted: false },
                       writable: true,
                       allowHalfOpen: true,
                       destroyed: false,
                       bytesRead: 0,
                       _bytesDispatched: 311,
                       _sockname: null,
                       _pendingData: null,
                       _pendingEncoding: '',
                       server: 
                        Server {
                          domain: null,
                          _events: 
                           { connection: [Function: connectionListener],
                             clientError: [Function],
                             close: [Function: bound ],
                             upgrade: [Function],
                             request: [Function] },
                          _eventsCount: 5,
                          _maxListeners: undefined,
                          _connections: 1,
                          _handle: 
                           TCP {
                             _externalStream: {},
                             fd: -1,
                             reading: false,
                             owner: [Circular],
                             onread: null,
                             onconnection: [Function: onconnection],
                             writeQueueSize: 0 },
                          _usingSlaves: false,
                          _slaves: [],
                          _unref: false,
                          allowHalfOpen: true,
                          pauseOnConnect: false,
                          httpAllowHalfOpen: false,
                          timeout: 120000,
                          _pendingResponseData: 0,
                          _connectionKey: '6::::8080' },
                       _idleTimeout: 120000,
                       _idleNext: 
                        { [Function: utcDate]
                          _onTimeout: [Function],
                          _idleTimeout: 5,
                          _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
                          _idlePrev: [Circular],
                          _idleStart: 995 },
                       _idlePrev: 
                        { _idleNext: [Circular],
                          _idlePrev: 
                           { [Function: utcDate]
                             _onTimeout: [Function],
                             _idleTimeout: 5,
                             _idleNext: [Circular],
                             _idlePrev: [Circular],
                             _idleStart: 995 } },
                       _idleStart: 997,
                       parser: 
                        HTTPParser {
                          '0': [Function: parserOnHeaders],
                          '1': [Function: parserOnHeadersComplete],
                          '2': [Function: parserOnBody],
                          '3': [Function: parserOnMessageComplete],
                          '4': [Function: onParserExecute],
                          _headers: [],
                          _url: '',
                          _consumed: true,
                          socket: [Circular],
                          incoming: [Circular],
                          maxHeaderPairs: 2000,
                          onIncoming: [Function: parserOnIncoming] },
                       on: [Function: socketOnWrap],
                       _paused: false,
                       read: [Function],
                       _consuming: true,
                       _httpMessage: [Circular],
                       _peername: { address: '::1', family: 'IPv6', port: 50070 } },
                    _header: 'HTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-Length: 101\r\nAccess-Control-Allow-Origin: *\r\nSet-Cookie: io=A6RWxddJuNa2BXdbAAAA\r\nDate: Fri, 25 Mar 2016 05:34:04 GMT\r\nConnection: keep-alive\r\n\r\n',
                    _headers: null,
                    _headerNames: {},
                    _onPendingData: [Function: updateOutgoingData],
                    statusMessage: 'OK',
                    statusCode: 200 },
                 cleanup: [Function: cleanup] },
              remoteAddress: '::1',
              checkIntervalTimer: null,
              upgradeTimeoutTimer: null,
              pingTimeoutTimer: 
               { _called: false,
                 _idleTimeout: 85000,
                 _idlePrev: 
                  Timer {
                    '0': [Function: listOnTimeout],
                    _idleNext: [Circular],
                    _idlePrev: [Circular],
                    msecs: 85000 },
                 _idleNext: 
                  Timer {
                    '0': [Function: listOnTimeout],
                    _idleNext: [Circular],
                    _idlePrev: [Circular],
                    msecs: 85000 },
                 _idleStart: 978,
                 _onTimeout: [Function],
                 _repeat: null },
              transport: 
               XHR {
                 readyState: 'open',
                 discarded: false,
                 closeTimeout: 30000,
                 maxHttpBufferSize: 100000000,
                 httpCompression: { threshold: 1024 },
                 supportsBinary: true,
                 _events: 
                  { error: { [Function: g] listener: [Function: bound ] },
                    packet: [Function: bound ],
                    drain: [ [Function: bound ], [Function: onDrain] ],
                    close: { [Function: g] listener: [Function: bound ] },
                    headers: [Function] },
                 _eventsCount: 5,
                 sid: 'A6RWxddJuNa2BXdbAAAA',
                 req: null,
                 res: null,
                 writable: false },
              _events: 
               { close: [ { [Function: g] listener: [Function] }, [Function: bound ] ],
                 data: [Function: bound ],
                 error: [Function: bound ] },
              _eventsCount: 3 } },
        clientsCount: 1,
        pingTimeout: 60000,
        pingInterval: 25000,
        upgradeTimeout: 10000,
        maxHttpBufferSize: 100000000,
        transports: [ 'polling', 'websocket' ],
        allowUpgrades: true,
        allowRequest: [Function: bound ],
        cookie: 'io',
        cookiePath: false,
        perMessageDeflate: { threshold: 1024 },
        httpCompression: { threshold: 1024 },
        ws: 
         WebSocketServer {
           domain: null,
           _events: {},
           _eventsCount: 0,
           _maxListeners: undefined,
           options: 
            { host: [Getter],
              port: [Getter],
              server: [Getter],
              verifyClient: [Getter],
              handleProtocols: [Getter],
              path: [Getter],
              noServer: [Getter],
              disableHixie: [Getter],
              clientTracking: [Getter],
              perMessageDeflate: [Getter] },
           path: null,
           clients: [] },
        _events: { connection: [Function: bound ] },
        _eventsCount: 1 } },
  adapter: 
   Adapter {
     nsp: 
      Namespace {
        name: '/',
        server: 
         Server {
           nsps: { '/': [Circular] },
           _path: '/socket.io',
           _serveClient: true,
           _adapter: [Function: Adapter],
           _origins: '*:*',
           sockets: [Circular],
           eio: 
            Server {
              clients: 
               { A6RWxddJuNa2BXdbAAAA: 
                  Socket {
                    id: 'A6RWxddJuNa2BXdbAAAA',
                    server: [Circular],
                    upgrading: false,
                    upgraded: false,
                    readyState: 'open',
                    writeBuffer: [],
                    packetsFn: [],
                    sentCallbackFn: [],
                    cleanupFn: [ [Function], [Function] ],
                    request: 
                     IncomingMessage {
                       _readableState: 
                        ReadableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          buffer: [],
                          length: 0,
                          pipes: null,
                          pipesCount: 0,
                          flowing: null,
                          ended: false,
                          endEmitted: false,
                          reading: false,
                          sync: true,
                          needReadable: false,
                          emittedReadable: false,
                          readableListening: false,
                          resumeScheduled: false,
                          defaultEncoding: 'utf8',
                          ranOut: false,
                          awaitDrain: 0,
                          readingMore: false,
                          decoder: null,
                          encoding: null },
                       readable: true,
                       domain: null,
                       _events: {},
                       _eventsCount: 0,
                       _maxListeners: undefined,
                       socket: 
                        Socket {
                          _connecting: false,
                          _hadError: false,
                          _handle: 
                           TCP {
                             _externalStream: {},
                             fd: -1,
                             reading: true,
                             owner: [Circular],
                             onread: [Function: onread],
                             onconnection: null,
                             writeQueueSize: 0 },
                          _parent: null,
                          _host: null,
                          _readableState: 
                           ReadableState {
                             objectMode: false,
                             highWaterMark: 16384,
                             buffer: [],
                             length: 0,
                             pipes: null,
                             pipesCount: 0,
                             flowing: true,
                             ended: false,
                             endEmitted: false,
                             reading: true,
                             sync: false,
                             needReadable: true,
                             emittedReadable: false,
                             readableListening: false,
                             resumeScheduled: false,
                             defaultEncoding: 'utf8',
                             ranOut: false,
                             awaitDrain: 0,
                             readingMore: false,
                             decoder: null,
                             encoding: null },
                          readable: true,
                          domain: null,
                          _events: 
                           { end: 
                              [ { [Function: g] listener: [Function: onend] },
                                [Function: socketOnEnd] ],
                             finish: [Function: onSocketFinish],
                             _socketEnd: [Function: onSocketEnd],
                             drain: [ [Function: ondrain], [Function: socketOnDrain] ],
                             timeout: [Function],
                             error: [Function: socketOnError],
                             close: 
                              [ [Function: serverSocketCloseListener],
                                [Function: onServerResponseClose] ],
                             data: [Function: socketOnData],
                             resume: [Function: onSocketResume],
                             pause: [Function: onSocketPause] },
                          _eventsCount: 10,
                          _maxListeners: undefined,
                          _writableState: 
                           WritableState {
                             objectMode: false,
                             highWaterMark: 16384,
                             needDrain: false,
                             ending: false,
                             ended: false,
                             finished: false,
                             decodeStrings: false,
                             defaultEncoding: 'utf8',
                             length: 0,
                             writing: false,
                             corked: 0,
                             sync: false,
                             bufferProcessing: false,
                             onwrite: [Function],
                             writecb: null,
                             writelen: 0,
                             bufferedRequest: null,
                             lastBufferedRequest: null,
                             pendingcb: 3,
                             prefinished: false,
                             errorEmitted: false },
                          writable: true,
                          allowHalfOpen: true,
                          destroyed: false,
                          bytesRead: 0,
                          _bytesDispatched: 311,
                          _sockname: null,
                          _pendingData: null,
                          _pendingEncoding: '',
                          server: 
                           Server {
                             domain: null,
                             _events: 
                              { connection: [Function: connectionListener],
                                clientError: [Function],
                                close: [Function: bound ],
                                upgrade: [Function],
                                request: [Function] },
                             _eventsCount: 5,
                             _maxListeners: undefined,
                             _connections: 1,
                             _handle: 
                              TCP {
                                _externalStream: {},
                                fd: -1,
                                reading: false,
                                owner: [Circular],
                                onread: null,
                                onconnection: [Function: onconnection],
                                writeQueueSize: 0 },
                             _usingSlaves: false,
                             _slaves: [],
                             _unref: false,
                             allowHalfOpen: true,
                             pauseOnConnect: false,
                             httpAllowHalfOpen: false,
                             timeout: 120000,
                             _pendingResponseData: 0,
                             _connectionKey: '6::::8080' },
                          _idleTimeout: 120000,
                          _idleNext: 
                           { [Function: utcDate]
                             _onTimeout: [Function],
                             _idleTimeout: 5,
                             _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
                             _idlePrev: [Circular],
                             _idleStart: 995 },
                          _idlePrev: 
                           { _idleNext: [Circular],
                             _idlePrev: 
                              { [Function: utcDate]
                                _onTimeout: [Function],
                                _idleTimeout: 5,
                                _idleNext: [Circular],
                                _idlePrev: [Circular],
                                _idleStart: 995 } },
                          _idleStart: 997,
                          parser: 
                           HTTPParser {
                             '0': [Function: parserOnHeaders],
                             '1': [Function: parserOnHeadersComplete],
                             '2': [Function: parserOnBody],
                             '3': [Function: parserOnMessageComplete],
                             '4': [Function: onParserExecute],
                             _headers: [],
                             _url: '',
                             _consumed: true,
                             socket: [Circular],
                             incoming: [Circular],
                             maxHeaderPairs: 2000,
                             onIncoming: [Function: parserOnIncoming] },
                          on: [Function: socketOnWrap],
                          _paused: false,
                          read: [Function],
                          _consuming: true,
                          _httpMessage: 
                           ServerResponse {
                             domain: null,
                             _events: { finish: [Function: resOnFinish] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             output: [],
                             outputEncodings: [],
                             outputCallbacks: [],
                             outputSize: 0,
                             writable: true,
                             _last: false,
                             chunkedEncoding: false,
                             shouldKeepAlive: true,
                             useChunkedEncodingByDefault: true,
                             sendDate: true,
                             _removedHeader: {},
                             _contentLength: null,
                             _hasBody: true,
                             _trailer: '',
                             finished: true,
                             _headerSent: true,
                             socket: [Circular],
                             connection: [Circular],
                             _header: 'HTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-Length: 101\r\nAccess-Control-Allow-Origin: *\r\nSet-Cookie: io=A6RWxddJuNa2BXdbAAAA\r\nDate: Fri, 25 Mar 2016 05:34:04 GMT\r\nConnection: keep-alive\r\n\r\n',
                             _headers: null,
                             _headerNames: {},
                             _onPendingData: [Function: updateOutgoingData],
                             statusMessage: 'OK',
                             statusCode: 200 },
                          _peername: { address: '::1', family: 'IPv6', port: 50070 } },
                       connection: 
                        Socket {
                          _connecting: false,
                          _hadError: false,
                          _handle: 
                           TCP {
                             _externalStream: {},
                             fd: -1,
                             reading: true,
                             owner: [Circular],
                             onread: [Function: onread],
                             onconnection: null,
                             writeQueueSize: 0 },
                          _parent: null,
                          _host: null,
                          _readableState: 
                           ReadableState {
                             objectMode: false,
                             highWaterMark: 16384,
                             buffer: [],
                             length: 0,
                             pipes: null,
                             pipesCount: 0,
                             flowing: true,
                             ended: false,
                             endEmitted: false,
                             reading: true,
                             sync: false,
                             needReadable: true,
                             emittedReadable: false,
                             readableListening: false,
                             resumeScheduled: false,
                             defaultEncoding: 'utf8',
                             ranOut: false,
                             awaitDrain: 0,
                             readingMore: false,
                             decoder: null,
                             encoding: null },
                          readable: true,
                          domain: null,
                          _events: 
                           { end: 
                              [ { [Function: g] listener: [Function: onend] },
                                [Function: socketOnEnd] ],
                             finish: [Function: onSocketFinish],
                             _socketEnd: [Function: onSocketEnd],
                             drain: [ [Function: ondrain], [Function: socketOnDrain] ],
                             timeout: [Function],
                             error: [Function: socketOnError],
                             close: 
                              [ [Function: serverSocketCloseListener],
                                [Function: onServerResponseClose] ],
                             data: [Function: socketOnData],
                             resume: [Function: onSocketResume],
                             pause: [Function: onSocketPause] },
                          _eventsCount: 10,
                          _maxListeners: undefined,
                          _writableState: 
                           WritableState {
                             objectMode: false,
                             highWaterMark: 16384,
                             needDrain: false,
                             ending: false,
                             ended: false,
                             finished: false,
                             decodeStrings: false,
                             defaultEncoding: 'utf8',
                             length: 0,
                             writing: false,
                             corked: 0,
                             sync: false,
                             bufferProcessing: false,
                             onwrite: [Function],
                             writecb: null,
                             writelen: 0,
                             bufferedRequest: null,
                             lastBufferedRequest: null,
                             pendingcb: 3,
                             prefinished: false,
                             errorEmitted: false },
                          writable: true,
                          allowHalfOpen: true,
                          destroyed: false,
                          bytesRead: 0,
                          _bytesDispatched: 311,
                          _sockname: null,
                          _pendingData: null,
                          _pendingEncoding: '',
                          server: 
                           Server {
                             domain: null,
                             _events: 
                              { connection: [Function: connectionListener],
                                clientError: [Function],
                                close: [Function: bound ],
                                upgrade: [Function],
                                request: [Function] },
                             _eventsCount: 5,
                             _maxListeners: undefined,
                             _connections: 1,
                             _handle: 
                              TCP {
                                _externalStream: {},
                                fd: -1,
                                reading: false,
                                owner: [Circular],
                                onread: null,
                                onconnection: [Function: onconnection],
                                writeQueueSize: 0 },
                             _usingSlaves: false,
                             _slaves: [],
                             _unref: false,
                             allowHalfOpen: true,
                             pauseOnConnect: false,
                             httpAllowHalfOpen: false,
                             timeout: 120000,
                             _pendingResponseData: 0,
                             _connectionKey: '6::::8080' },
                          _idleTimeout: 120000,
                          _idleNext: 
                           { [Function: utcDate]
                             _onTimeout: [Function],
                             _idleTimeout: 5,
                             _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
                             _idlePrev: [Circular],
                             _idleStart: 995 },
                          _idlePrev: 
                           { _idleNext: [Circular],
                             _idlePrev: 
                              { [Function: utcDate]
                                _onTimeout: [Function],
                                _idleTimeout: 5,
                                _idleNext: [Circular],
                                _idlePrev: [Circular],
                                _idleStart: 995 } },
                          _idleStart: 997,
                          parser: 
                           HTTPParser {
                             '0': [Function: parserOnHeaders],
                             '1': [Function: parserOnHeadersComplete],
                             '2': [Function: parserOnBody],
                             '3': [Function: parserOnMessageComplete],
                             '4': [Function: onParserExecute],
                             _headers: [],
                             _url: '',
                             _consumed: true,
                             socket: [Circular],
                             incoming: [Circular],
                             maxHeaderPairs: 2000,
                             onIncoming: [Function: parserOnIncoming] },
                          on: [Function: socketOnWrap],
                          _paused: false,
                          read: [Function],
                          _consuming: true,
                          _httpMessage: 
                           ServerResponse {
                             domain: null,
                             _events: { finish: [Function: resOnFinish] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             output: [],
                             outputEncodings: [],
                             outputCallbacks: [],
                             outputSize: 0,
                             writable: true,
                             _last: false,
                             chunkedEncoding: false,
                             shouldKeepAlive: true,
                             useChunkedEncodingByDefault: true,
                             sendDate: true,
                             _removedHeader: {},
                             _contentLength: null,
                             _hasBody: true,
                             _trailer: '',
                             finished: true,
                             _headerSent: true,
                             socket: [Circular],
                             connection: [Circular],
                             _header: 'HTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-Length: 101\r\nAccess-Control-Allow-Origin: *\r\nSet-Cookie: io=A6RWxddJuNa2BXdbAAAA\r\nDate: Fri, 25 Mar 2016 05:34:04 GMT\r\nConnection: keep-alive\r\n\r\n',
                             _headers: null,
                             _headerNames: {},
                             _onPendingData: [Function: updateOutgoingData],
                             statusMessage: 'OK',
                             statusCode: 200 },
                          _peername: { address: '::1', family: 'IPv6', port: 50070 } },
                       httpVersionMajor: 1,
                       httpVersionMinor: 1,
                       httpVersion: '1.1',
                       complete: false,
                       headers: 
                        { host: 'localhost:8080',
                          connection: 'keep-alive',
                          pragma: 'no-cache',
                          'cache-control': 'no-cache',
                          'user-agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.132 Safari/537.36',
                          accept: '*/*',
                          referer: 'http://localhost:8080/',
                          'accept-encoding': 'gzip, deflate, sdch',
                          'accept-language': 'zh-CN,zh;q=0.8,en;q=0.6',
                          cookie: 'io=B5ehkX7J-gME2Jd5AAAA; amvid=7b2309f47fa4b428ae50a46e3d3c4381' },
                       rawHeaders: 
                        [ 'Host',
                          'localhost:8080',
                          'Connection',
                          'keep-alive',
                          'Pragma',
                          'no-cache',
                          'Cache-Control',
                          'no-cache',
                          'User-Agent',
                          'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.132 Safari/537.36',
                          'Accept',
                          '*/*',
                          'Referer',
                          'http://localhost:8080/',
                          'Accept-Encoding',
                          'gzip, deflate, sdch',
                          'Accept-Language',
                          'zh-CN,zh;q=0.8,en;q=0.6',
                          'Cookie',
                          'io=B5ehkX7J-gME2Jd5AAAA; amvid=7b2309f47fa4b428ae50a46e3d3c4381' ],
                       trailers: {},
                       rawTrailers: [],
                       upgrade: false,
                       url: '/socket.io/?EIO=3&transport=polling&t=LEiG-Ij',
                       method: 'GET',
                       statusCode: null,
                       statusMessage: null,
                       client: 
                        Socket {
                          _connecting: false,
                          _hadError: false,
                          _handle: 
                           TCP {
                             _externalStream: {},
                             fd: -1,
                             reading: true,
                             owner: [Circular],
                             onread: [Function: onread],
                             onconnection: null,
                             writeQueueSize: 0 },
                          _parent: null,
                          _host: null,
                          _readableState: 
                           ReadableState {
                             objectMode: false,
                             highWaterMark: 16384,
                             buffer: [],
                             length: 0,
                             pipes: null,
                             pipesCount: 0,
                             flowing: true,
                             ended: false,
                             endEmitted: false,
                             reading: true,
                             sync: false,
                             needReadable: true,
                             emittedReadable: false,
                             readableListening: false,
                             resumeScheduled: false,
                             defaultEncoding: 'utf8',
                             ranOut: false,
                             awaitDrain: 0,
                             readingMore: false,
                             decoder: null,
                             encoding: null },
                          readable: true,
                          domain: null,
                          _events: 
                           { end: 
                              [ { [Function: g] listener: [Function: onend] },
                                [Function: socketOnEnd] ],
                             finish: [Function: onSocketFinish],
                             _socketEnd: [Function: onSocketEnd],
                             drain: [ [Function: ondrain], [Function: socketOnDrain] ],
                             timeout: [Function],
                             error: [Function: socketOnError],
                             close: 
                              [ [Function: serverSocketCloseListener],
                                [Function: onServerResponseClose] ],
                             data: [Function: socketOnData],
                             resume: [Function: onSocketResume],
                             pause: [Function: onSocketPause] },
                          _eventsCount: 10,
                          _maxListeners: undefined,
                          _writableState: 
                           WritableState {
                             objectMode: false,
                             highWaterMark: 16384,
                             needDrain: false,
                             ending: false,
                             ended: false,
                             finished: false,
                             decodeStrings: false,
                             defaultEncoding: 'utf8',
                             length: 0,
                             writing: false,
                             corked: 0,
                             sync: false,
                             bufferProcessing: false,
                             onwrite: [Function],
                             writecb: null,
                             writelen: 0,
                             bufferedRequest: null,
                             lastBufferedRequest: null,
                             pendingcb: 3,
                             prefinished: false,
                             errorEmitted: false },
                          writable: true,
                          allowHalfOpen: true,
                          destroyed: false,
                          bytesRead: 0,
                          _bytesDispatched: 311,
                          _sockname: null,
                          _pendingData: null,
                          _pendingEncoding: '',
                          server: 
                           Server {
                             domain: null,
                             _events: 
                              { connection: [Function: connectionListener],
                                clientError: [Function],
                                close: [Function: bound ],
                                upgrade: [Function],
                                request: [Function] },
                             _eventsCount: 5,
                             _maxListeners: undefined,
                             _connections: 1,
                             _handle: 
                              TCP {
                                _externalStream: {},
                                fd: -1,
                                reading: false,
                                owner: [Circular],
                                onread: null,
                                onconnection: [Function: onconnection],
                                writeQueueSize: 0 },
                             _usingSlaves: false,
                             _slaves: [],
                             _unref: false,
                             allowHalfOpen: true,
                             pauseOnConnect: false,
                             httpAllowHalfOpen: false,
                             timeout: 120000,
                             _pendingResponseData: 0,
                             _connectionKey: '6::::8080' },
                          _idleTimeout: 120000,
                          _idleNext: 
                           { [Function: utcDate]
                             _onTimeout: [Function],
                             _idleTimeout: 5,
                             _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
                             _idlePrev: [Circular],
                             _idleStart: 995 },
                          _idlePrev: 
                           { _idleNext: [Circular],
                             _idlePrev: 
                              { [Function: utcDate]
                                _onTimeout: [Function],
                                _idleTimeout: 5,
                                _idleNext: [Circular],
                                _idlePrev: [Circular],
                                _idleStart: 995 } },
                          _idleStart: 997,
                          parser: 
                           HTTPParser {
                             '0': [Function: parserOnHeaders],
                             '1': [Function: parserOnHeadersComplete],
                             '2': [Function: parserOnBody],
                             '3': [Function: parserOnMessageComplete],
                             '4': [Function: onParserExecute],
                             _headers: [],
                             _url: '',
                             _consumed: true,
                             socket: [Circular],
                             incoming: [Circular],
                             maxHeaderPairs: 2000,
                             onIncoming: [Function: parserOnIncoming] },
                          on: [Function: socketOnWrap],
                          _paused: false,
                          read: [Function],
                          _consuming: true,
                          _httpMessage: 
                           ServerResponse {
                             domain: null,
                             _events: { finish: [Function: resOnFinish] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             output: [],
                             outputEncodings: [],
                             outputCallbacks: [],
                             outputSize: 0,
                             writable: true,
                             _last: false,
                             chunkedEncoding: false,
                             shouldKeepAlive: true,
                             useChunkedEncodingByDefault: true,
                             sendDate: true,
                             _removedHeader: {},
                             _contentLength: null,
                             _hasBody: true,
                             _trailer: '',
                             finished: true,
                             _headerSent: true,
                             socket: [Circular],
                             connection: [Circular],
                             _header: 'HTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-Length: 101\r\nAccess-Control-Allow-Origin: *\r\nSet-Cookie: io=A6RWxddJuNa2BXdbAAAA\r\nDate: Fri, 25 Mar 2016 05:34:04 GMT\r\nConnection: keep-alive\r\n\r\n',
                             _headers: null,
                             _headerNames: {},
                             _onPendingData: [Function: updateOutgoingData],
                             statusMessage: 'OK',
                             statusCode: 200 },
                          _peername: { address: '::1', family: 'IPv6', port: 50070 } },
                       _consuming: false,
                       _dumped: false,
                       _query: { EIO: '3', transport: 'polling', t: 'LEiG-Ij' },
                       res: 
                        ServerResponse {
                          domain: null,
                          _events: { finish: [Function: resOnFinish] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          output: [],
                          outputEncodings: [],
                          outputCallbacks: [],
                          outputSize: 0,
                          writable: true,
                          _last: false,
                          chunkedEncoding: false,
                          shouldKeepAlive: true,
                          useChunkedEncodingByDefault: true,
                          sendDate: true,
                          _removedHeader: {},
                          _contentLength: null,
                          _hasBody: true,
                          _trailer: '',
                          finished: true,
                          _headerSent: true,
                          socket: 
                           Socket {
                             _connecting: false,
                             _hadError: false,
                             _handle: 
                              TCP {
                                _externalStream: {},
                                fd: -1,
                                reading: true,
                                owner: [Circular],
                                onread: [Function: onread],
                                onconnection: null,
                                writeQueueSize: 0 },
                             _parent: null,
                             _host: null,
                             _readableState: 
                              ReadableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                buffer: [],
                                length: 0,
                                pipes: null,
                                pipesCount: 0,
                                flowing: true,
                                ended: false,
                                endEmitted: false,
                                reading: true,
                                sync: false,
                                needReadable: true,
                                emittedReadable: false,
                                readableListening: false,
                                resumeScheduled: false,
                                defaultEncoding: 'utf8',
                                ranOut: false,
                                awaitDrain: 0,
                                readingMore: false,
                                decoder: null,
                                encoding: null },
                             readable: true,
                             domain: null,
                             _events: 
                              { end: 
                                 [ { [Function: g] listener: [Function: onend] },
                                   [Function: socketOnEnd] ],
                                finish: [Function: onSocketFinish],
                                _socketEnd: [Function: onSocketEnd],
                                drain: [ [Function: ondrain], [Function: socketOnDrain] ],
                                timeout: [Function],
                                error: [Function: socketOnError],
                                close: 
                                 [ [Function: serverSocketCloseListener],
                                   [Function: onServerResponseClose] ],
                                data: [Function: socketOnData],
                                resume: [Function: onSocketResume],
                                pause: [Function: onSocketPause] },
                             _eventsCount: 10,
                             _maxListeners: undefined,
                             _writableState: 
                              WritableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                needDrain: false,
                                ending: false,
                                ended: false,
                                finished: false,
                                decodeStrings: false,
                                defaultEncoding: 'utf8',
                                length: 0,
                                writing: false,
                                corked: 0,
                                sync: false,
                                bufferProcessing: false,
                                onwrite: [Function],
                                writecb: null,
                                writelen: 0,
                                bufferedRequest: null,
                                lastBufferedRequest: null,
                                pendingcb: 3,
                                prefinished: false,
                                errorEmitted: false },
                             writable: true,
                             allowHalfOpen: true,
                             destroyed: false,
                             bytesRead: 0,
                             _bytesDispatched: 311,
                             _sockname: null,
                             _pendingData: null,
                             _pendingEncoding: '',
                             server: 
                              Server {
                                domain: null,
                                _events: 
                                 { connection: [Function: connectionListener],
                                   clientError: [Function],
                                   close: [Function: bound ],
                                   upgrade: [Function],
                                   request: [Function] },
                                _eventsCount: 5,
                                _maxListeners: undefined,
                                _connections: 1,
                                _handle: 
                                 TCP {
                                   _externalStream: {},
                                   fd: -1,
                                   reading: false,
                                   owner: [Circular],
                                   onread: null,
                                   onconnection: [Function: onconnection],
                                   writeQueueSize: 0 },
                                _usingSlaves: false,
                                _slaves: [],
                                _unref: false,
                                allowHalfOpen: true,
                                pauseOnConnect: false,
                                httpAllowHalfOpen: false,
                                timeout: 120000,
                                _pendingResponseData: 0,
                                _connectionKey: '6::::8080' },
                             _idleTimeout: 120000,
                             _idleNext: 
                              { [Function: utcDate]
                                _onTimeout: [Function],
                                _idleTimeout: 5,
                                _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
                                _idlePrev: [Circular],
                                _idleStart: 995 },
                             _idlePrev: 
                              { _idleNext: [Circular],
                                _idlePrev: 
                                 { [Function: utcDate]
                                   _onTimeout: [Function],
                                   _idleTimeout: 5,
                                   _idleNext: [Circular],
                                   _idlePrev: [Circular],
                                   _idleStart: 995 } },
                             _idleStart: 997,
                             parser: 
                              HTTPParser {
                                '0': [Function: parserOnHeaders],
                                '1': [Function: parserOnHeadersComplete],
                                '2': [Function: parserOnBody],
                                '3': [Function: parserOnMessageComplete],
                                '4': [Function: onParserExecute],
                                _headers: [],
                                _url: '',
                                _consumed: true,
                                socket: [Circular],
                                incoming: [Circular],
                                maxHeaderPairs: 2000,
                                onIncoming: [Function: parserOnIncoming] },
                             on: [Function: socketOnWrap],
                             _paused: false,
                             read: [Function],
                             _consuming: true,
                             _httpMessage: [Circular],
                             _peername: { address: '::1', family: 'IPv6', port: 50070 } },
                          connection: 
                           Socket {
                             _connecting: false,
                             _hadError: false,
                             _handle: 
                              TCP {
                                _externalStream: {},
                                fd: -1,
                                reading: true,
                                owner: [Circular],
                                onread: [Function: onread],
                                onconnection: null,
                                writeQueueSize: 0 },
                             _parent: null,
                             _host: null,
                             _readableState: 
                              ReadableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                buffer: [],
                                length: 0,
                                pipes: null,
                                pipesCount: 0,
                                flowing: true,
                                ended: false,
                                endEmitted: false,
                                reading: true,
                                sync: false,
                                needReadable: true,
                                emittedReadable: false,
                                readableListening: false,
                                resumeScheduled: false,
                                defaultEncoding: 'utf8',
                                ranOut: false,
                                awaitDrain: 0,
                                readingMore: false,
                                decoder: null,
                                encoding: null },
                             readable: true,
                             domain: null,
                             _events: 
                              { end: 
                                 [ { [Function: g] listener: [Function: onend] },
                                   [Function: socketOnEnd] ],
                                finish: [Function: onSocketFinish],
                                _socketEnd: [Function: onSocketEnd],
                                drain: [ [Function: ondrain], [Function: socketOnDrain] ],
                                timeout: [Function],
                                error: [Function: socketOnError],
                                close: 
                                 [ [Function: serverSocketCloseListener],
                                   [Function: onServerResponseClose] ],
                                data: [Function: socketOnData],
                                resume: [Function: onSocketResume],
                                pause: [Function: onSocketPause] },
                             _eventsCount: 10,
                             _maxListeners: undefined,
                             _writableState: 
                              WritableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                needDrain: false,
                                ending: false,
                                ended: false,
                                finished: false,
                                decodeStrings: false,
                                defaultEncoding: 'utf8',
                                length: 0,
                                writing: false,
                                corked: 0,
                                sync: false,
                                bufferProcessing: false,
                                onwrite: [Function],
                                writecb: null,
                                writelen: 0,
                                bufferedRequest: null,
                                lastBufferedRequest: null,
                                pendingcb: 3,
                                prefinished: false,
                                errorEmitted: false },
                             writable: true,
                             allowHalfOpen: true,
                             destroyed: false,
                             bytesRead: 0,
                             _bytesDispatched: 311,
                             _sockname: null,
                             _pendingData: null,
                             _pendingEncoding: '',
                             server: 
                              Server {
                                domain: null,
                                _events: 
                                 { connection: [Function: connectionListener],
                                   clientError: [Function],
                                   close: [Function: bound ],
                                   upgrade: [Function],
                                   request: [Function] },
                                _eventsCount: 5,
                                _maxListeners: undefined,
                                _connections: 1,
                                _handle: 
                                 TCP {
                                   _externalStream: {},
                                   fd: -1,
                                   reading: false,
                                   owner: [Circular],
                                   onread: null,
                                   onconnection: [Function: onconnection],
                                   writeQueueSize: 0 },
                                _usingSlaves: false,
                                _slaves: [],
                                _unref: false,
                                allowHalfOpen: true,
                                pauseOnConnect: false,
                                httpAllowHalfOpen: false,
                                timeout: 120000,
                                _pendingResponseData: 0,
                                _connectionKey: '6::::8080' },
                             _idleTimeout: 120000,
                             _idleNext: 
                              { [Function: utcDate]
                                _onTimeout: [Function],
                                _idleTimeout: 5,
                                _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
                                _idlePrev: [Circular],
                                _idleStart: 995 },
                             _idlePrev: 
                              { _idleNext: [Circular],
                                _idlePrev: 
                                 { [Function: utcDate]
                                   _onTimeout: [Function],
                                   _idleTimeout: 5,
                                   _idleNext: [Circular],
                                   _idlePrev: [Circular],
                                   _idleStart: 995 } },
                             _idleStart: 997,
                             parser: 
                              HTTPParser {
                                '0': [Function: parserOnHeaders],
                                '1': [Function: parserOnHeadersComplete],
                                '2': [Function: parserOnBody],
                                '3': [Function: parserOnMessageComplete],
                                '4': [Function: onParserExecute],
                                _headers: [],
                                _url: '',
                                _consumed: true,
                                socket: [Circular],
                                incoming: [Circular],
                                maxHeaderPairs: 2000,
                                onIncoming: [Function: parserOnIncoming] },
                             on: [Function: socketOnWrap],
                             _paused: false,
                             read: [Function],
                             _consuming: true,
                             _httpMessage: [Circular],
                             _peername: { address: '::1', family: 'IPv6', port: 50070 } },
                          _header: 'HTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-Length: 101\r\nAccess-Control-Allow-Origin: *\r\nSet-Cookie: io=A6RWxddJuNa2BXdbAAAA\r\nDate: Fri, 25 Mar 2016 05:34:04 GMT\r\nConnection: keep-alive\r\n\r\n',
                          _headers: null,
                          _headerNames: {},
                          _onPendingData: [Function: updateOutgoingData],
                          statusMessage: 'OK',
                          statusCode: 200 },
                       cleanup: [Function: cleanup] },
                    remoteAddress: '::1',
                    checkIntervalTimer: null,
                    upgradeTimeoutTimer: null,
                    pingTimeoutTimer: 
                     { _called: false,
                       _idleTimeout: 85000,
                       _idlePrev: 
                        Timer {
                          '0': [Function: listOnTimeout],
                          _idleNext: [Circular],
                          _idlePrev: [Circular],
                          msecs: 85000 },
                       _idleNext: 
                        Timer {
                          '0': [Function: listOnTimeout],
                          _idleNext: [Circular],
                          _idlePrev: [Circular],
                          msecs: 85000 },
                       _idleStart: 978,
                       _onTimeout: [Function],
                       _repeat: null },
                    transport: 
                     XHR {
                       readyState: 'open',
                       discarded: false,
                       closeTimeout: 30000,
                       maxHttpBufferSize: 100000000,
                       httpCompression: { threshold: 1024 },
                       supportsBinary: true,
                       _events: 
                        { error: { [Function: g] listener: [Function: bound ] },
                          packet: [Function: bound ],
                          drain: [ [Function: bound ], [Function: onDrain] ],
                          close: { [Function: g] listener: [Function: bound ] },
                          headers: [Function] },
                       _eventsCount: 5,
                       sid: 'A6RWxddJuNa2BXdbAAAA',
                       req: null,
                       res: null,
                       writable: false },
                    _events: 
                     { close: [ { [Function: g] listener: [Function] }, [Function: bound ] ],
                       data: [Function: bound ],
                       error: [Function: bound ] },
                    _eventsCount: 3 } },
              clientsCount: 1,
              pingTimeout: 60000,
              pingInterval: 25000,
              upgradeTimeout: 10000,
              maxHttpBufferSize: 100000000,
              transports: [ 'polling', 'websocket' ],
              allowUpgrades: true,
              allowRequest: [Function: bound ],
              cookie: 'io',
              cookiePath: false,
              perMessageDeflate: { threshold: 1024 },
              httpCompression: { threshold: 1024 },
              ws: 
               WebSocketServer {
                 domain: null,
                 _events: {},
                 _eventsCount: 0,
                 _maxListeners: undefined,
                 options: 
                  { host: [Getter],
                    port: [Getter],
                    server: [Getter],
                    verifyClient: [Getter],
                    handleProtocols: [Getter],
                    path: [Getter],
                    noServer: [Getter],
                    disableHixie: [Getter],
                    clientTracking: [Getter],
                    perMessageDeflate: [Getter] },
                 path: null,
                 clients: [] },
              _events: { connection: [Function: bound ] },
              _eventsCount: 1 },
           httpServer: 
            Server {
              domain: null,
              _events: 
               { connection: [Function: connectionListener],
                 clientError: [Function],
                 close: [Function: bound ],
                 upgrade: [Function],
                 request: [Function] },
              _eventsCount: 5,
              _maxListeners: undefined,
              _connections: 1,
              _handle: 
               TCP {
                 _externalStream: {},
                 fd: -1,
                 reading: false,
                 owner: [Circular],
                 onread: null,
                 onconnection: [Function: onconnection],
                 writeQueueSize: 0 },
              _usingSlaves: false,
              _slaves: [],
              _unref: false,
              allowHalfOpen: true,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              _pendingResponseData: 0,
              _connectionKey: '6::::8080' },
           engine: 
            Server {
              clients: 
               { A6RWxddJuNa2BXdbAAAA: 
                  Socket {
                    id: 'A6RWxddJuNa2BXdbAAAA',
                    server: [Circular],
                    upgrading: false,
                    upgraded: false,
                    readyState: 'open',
                    writeBuffer: [],
                    packetsFn: [],
                    sentCallbackFn: [],
                    cleanupFn: [ [Function], [Function] ],
                    request: 
                     IncomingMessage {
                       _readableState: 
                        ReadableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          buffer: [],
                          length: 0,
                          pipes: null,
                          pipesCount: 0,
                          flowing: null,
                          ended: false,
                          endEmitted: false,
                          reading: false,
                          sync: true,
                          needReadable: false,
                          emittedReadable: false,
                          readableListening: false,
                          resumeScheduled: false,
                          defaultEncoding: 'utf8',
                          ranOut: false,
                          awaitDrain: 0,
                          readingMore: false,
                          decoder: null,
                          encoding: null },
                       readable: true,
                       domain: null,
                       _events: {},
                       _eventsCount: 0,
                       _maxListeners: undefined,
                       socket: 
                        Socket {
                          _connecting: false,
                          _hadError: false,
                          _handle: 
                           TCP {
                             _externalStream: {},
                             fd: -1,
                             reading: true,
                             owner: [Circular],
                             onread: [Function: onread],
                             onconnection: null,
                             writeQueueSize: 0 },
                          _parent: null,
                          _host: null,
                          _readableState: 
                           ReadableState {
                             objectMode: false,
                             highWaterMark: 16384,
                             buffer: [],
                             length: 0,
                             pipes: null,
                             pipesCount: 0,
                             flowing: true,
                             ended: false,
                             endEmitted: false,
                             reading: true,
                             sync: false,
                             needReadable: true,
                             emittedReadable: false,
                             readableListening: false,
                             resumeScheduled: false,
                             defaultEncoding: 'utf8',
                             ranOut: false,
                             awaitDrain: 0,
                             readingMore: false,
                             decoder: null,
                             encoding: null },
                          readable: true,
                          domain: null,
                          _events: 
                           { end: 
                              [ { [Function: g] listener: [Function: onend] },
                                [Function: socketOnEnd] ],
                             finish: [Function: onSocketFinish],
                             _socketEnd: [Function: onSocketEnd],
                             drain: [ [Function: ondrain], [Function: socketOnDrain] ],
                             timeout: [Function],
                             error: [Function: socketOnError],
                             close: 
                              [ [Function: serverSocketCloseListener],
                                [Function: onServerResponseClose] ],
                             data: [Function: socketOnData],
                             resume: [Function: onSocketResume],
                             pause: [Function: onSocketPause] },
                          _eventsCount: 10,
                          _maxListeners: undefined,
                          _writableState: 
                           WritableState {
                             objectMode: false,
                             highWaterMark: 16384,
                             needDrain: false,
                             ending: false,
                             ended: false,
                             finished: false,
                             decodeStrings: false,
                             defaultEncoding: 'utf8',
                             length: 0,
                             writing: false,
                             corked: 0,
                             sync: false,
                             bufferProcessing: false,
                             onwrite: [Function],
                             writecb: null,
                             writelen: 0,
                             bufferedRequest: null,
                             lastBufferedRequest: null,
                             pendingcb: 3,
                             prefinished: false,
                             errorEmitted: false },
                          writable: true,
                          allowHalfOpen: true,
                          destroyed: false,
                          bytesRead: 0,
                          _bytesDispatched: 311,
                          _sockname: null,
                          _pendingData: null,
                          _pendingEncoding: '',
                          server: 
                           Server {
                             domain: null,
                             _events: 
                              { connection: [Function: connectionListener],
                                clientError: [Function],
                                close: [Function: bound ],
                                upgrade: [Function],
                                request: [Function] },
                             _eventsCount: 5,
                             _maxListeners: undefined,
                             _connections: 1,
                             _handle: 
                              TCP {
                                _externalStream: {},
                                fd: -1,
                                reading: false,
                                owner: [Circular],
                                onread: null,
                                onconnection: [Function: onconnection],
                                writeQueueSize: 0 },
                             _usingSlaves: false,
                             _slaves: [],
                             _unref: false,
                             allowHalfOpen: true,
                             pauseOnConnect: false,
                             httpAllowHalfOpen: false,
                             timeout: 120000,
                             _pendingResponseData: 0,
                             _connectionKey: '6::::8080' },
                          _idleTimeout: 120000,
                          _idleNext: 
                           { [Function: utcDate]
                             _onTimeout: [Function],
                             _idleTimeout: 5,
                             _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
                             _idlePrev: [Circular],
                             _idleStart: 995 },
                          _idlePrev: 
                           { _idleNext: [Circular],
                             _idlePrev: 
                              { [Function: utcDate]
                                _onTimeout: [Function],
                                _idleTimeout: 5,
                                _idleNext: [Circular],
                                _idlePrev: [Circular],
                                _idleStart: 995 } },
                          _idleStart: 997,
                          parser: 
                           HTTPParser {
                             '0': [Function: parserOnHeaders],
                             '1': [Function: parserOnHeadersComplete],
                             '2': [Function: parserOnBody],
                             '3': [Function: parserOnMessageComplete],
                             '4': [Function: onParserExecute],
                             _headers: [],
                             _url: '',
                             _consumed: true,
                             socket: [Circular],
                             incoming: [Circular],
                             maxHeaderPairs: 2000,
                             onIncoming: [Function: parserOnIncoming] },
                          on: [Function: socketOnWrap],
                          _paused: false,
                          read: [Function],
                          _consuming: true,
                          _httpMessage: 
                           ServerResponse {
                             domain: null,
                             _events: { finish: [Function: resOnFinish] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             output: [],
                             outputEncodings: [],
                             outputCallbacks: [],
                             outputSize: 0,
                             writable: true,
                             _last: false,
                             chunkedEncoding: false,
                             shouldKeepAlive: true,
                             useChunkedEncodingByDefault: true,
                             sendDate: true,
                             _removedHeader: {},
                             _contentLength: null,
                             _hasBody: true,
                             _trailer: '',
                             finished: true,
                             _headerSent: true,
                             socket: [Circular],
                             connection: [Circular],
                             _header: 'HTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-Length: 101\r\nAccess-Control-Allow-Origin: *\r\nSet-Cookie: io=A6RWxddJuNa2BXdbAAAA\r\nDate: Fri, 25 Mar 2016 05:34:04 GMT\r\nConnection: keep-alive\r\n\r\n',
                             _headers: null,
                             _headerNames: {},
                             _onPendingData: [Function: updateOutgoingData],
                             statusMessage: 'OK',
                             statusCode: 200 },
                          _peername: { address: '::1', family: 'IPv6', port: 50070 } },
                       connection: 
                        Socket {
                          _connecting: false,
                          _hadError: false,
                          _handle: 
                           TCP {
                             _externalStream: {},
                             fd: -1,
                             reading: true,
                             owner: [Circular],
                             onread: [Function: onread],
                             onconnection: null,
                             writeQueueSize: 0 },
                          _parent: null,
                          _host: null,
                          _readableState: 
                           ReadableState {
                             objectMode: false,
                             highWaterMark: 16384,
                             buffer: [],
                             length: 0,
                             pipes: null,
                             pipesCount: 0,
                             flowing: true,
                             ended: false,
                             endEmitted: false,
                             reading: true,
                             sync: false,
                             needReadable: true,
                             emittedReadable: false,
                             readableListening: false,
                             resumeScheduled: false,
                             defaultEncoding: 'utf8',
                             ranOut: false,
                             awaitDrain: 0,
                             readingMore: false,
                             decoder: null,
                             encoding: null },
                          readable: true,
                          domain: null,
                          _events: 
                           { end: 
                              [ { [Function: g] listener: [Function: onend] },
                                [Function: socketOnEnd] ],
                             finish: [Function: onSocketFinish],
                             _socketEnd: [Function: onSocketEnd],
                             drain: [ [Function: ondrain], [Function: socketOnDrain] ],
                             timeout: [Function],
                             error: [Function: socketOnError],
                             close: 
                              [ [Function: serverSocketCloseListener],
                                [Function: onServerResponseClose] ],
                             data: [Function: socketOnData],
                             resume: [Function: onSocketResume],
                             pause: [Function: onSocketPause] },
                          _eventsCount: 10,
                          _maxListeners: undefined,
                          _writableState: 
                           WritableState {
                             objectMode: false,
                             highWaterMark: 16384,
                             needDrain: false,
                             ending: false,
                             ended: false,
                             finished: false,
                             decodeStrings: false,
                             defaultEncoding: 'utf8',
                             length: 0,
                             writing: false,
                             corked: 0,
                             sync: false,
                             bufferProcessing: false,
                             onwrite: [Function],
                             writecb: null,
                             writelen: 0,
                             bufferedRequest: null,
                             lastBufferedRequest: null,
                             pendingcb: 3,
                             prefinished: false,
                             errorEmitted: false },
                          writable: true,
                          allowHalfOpen: true,
                          destroyed: false,
                          bytesRead: 0,
                          _bytesDispatched: 311,
                          _sockname: null,
                          _pendingData: null,
                          _pendingEncoding: '',
                          server: 
                           Server {
                             domain: null,
                             _events: 
                              { connection: [Function: connectionListener],
                                clientError: [Function],
                                close: [Function: bound ],
                                upgrade: [Function],
                                request: [Function] },
                             _eventsCount: 5,
                             _maxListeners: undefined,
                             _connections: 1,
                             _handle: 
                              TCP {
                                _externalStream: {},
                                fd: -1,
                                reading: false,
                                owner: [Circular],
                                onread: null,
                                onconnection: [Function: onconnection],
                                writeQueueSize: 0 },
                             _usingSlaves: false,
                             _slaves: [],
                             _unref: false,
                             allowHalfOpen: true,
                             pauseOnConnect: false,
                             httpAllowHalfOpen: false,
                             timeout: 120000,
                             _pendingResponseData: 0,
                             _connectionKey: '6::::8080' },
                          _idleTimeout: 120000,
                          _idleNext: 
                           { [Function: utcDate]
                             _onTimeout: [Function],
                             _idleTimeout: 5,
                             _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
                             _idlePrev: [Circular],
                             _idleStart: 995 },
                          _idlePrev: 
                           { _idleNext: [Circular],
                             _idlePrev: 
                              { [Function: utcDate]
                                _onTimeout: [Function],
                                _idleTimeout: 5,
                                _idleNext: [Circular],
                                _idlePrev: [Circular],
                                _idleStart: 995 } },
                          _idleStart: 997,
                          parser: 
                           HTTPParser {
                             '0': [Function: parserOnHeaders],
                             '1': [Function: parserOnHeadersComplete],
                             '2': [Function: parserOnBody],
                             '3': [Function: parserOnMessageComplete],
                             '4': [Function: onParserExecute],
                             _headers: [],
                             _url: '',
                             _consumed: true,
                             socket: [Circular],
                             incoming: [Circular],
                             maxHeaderPairs: 2000,
                             onIncoming: [Function: parserOnIncoming] },
                          on: [Function: socketOnWrap],
                          _paused: false,
                          read: [Function],
                          _consuming: true,
                          _httpMessage: 
                           ServerResponse {
                             domain: null,
                             _events: { finish: [Function: resOnFinish] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             output: [],
                             outputEncodings: [],
                             outputCallbacks: [],
                             outputSize: 0,
                             writable: true,
                             _last: false,
                             chunkedEncoding: false,
                             shouldKeepAlive: true,
                             useChunkedEncodingByDefault: true,
                             sendDate: true,
                             _removedHeader: {},
                             _contentLength: null,
                             _hasBody: true,
                             _trailer: '',
                             finished: true,
                             _headerSent: true,
                             socket: [Circular],
                             connection: [Circular],
                             _header: 'HTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-Length: 101\r\nAccess-Control-Allow-Origin: *\r\nSet-Cookie: io=A6RWxddJuNa2BXdbAAAA\r\nDate: Fri, 25 Mar 2016 05:34:04 GMT\r\nConnection: keep-alive\r\n\r\n',
                             _headers: null,
                             _headerNames: {},
                             _onPendingData: [Function: updateOutgoingData],
                             statusMessage: 'OK',
                             statusCode: 200 },
                          _peername: { address: '::1', family: 'IPv6', port: 50070 } },
                       httpVersionMajor: 1,
                       httpVersionMinor: 1,
                       httpVersion: '1.1',
                       complete: false,
                       headers: 
                        { host: 'localhost:8080',
                          connection: 'keep-alive',
                          pragma: 'no-cache',
                          'cache-control': 'no-cache',
                          'user-agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.132 Safari/537.36',
                          accept: '*/*',
                          referer: 'http://localhost:8080/',
                          'accept-encoding': 'gzip, deflate, sdch',
                          'accept-language': 'zh-CN,zh;q=0.8,en;q=0.6',
                          cookie: 'io=B5ehkX7J-gME2Jd5AAAA; amvid=7b2309f47fa4b428ae50a46e3d3c4381' },
                       rawHeaders: 
                        [ 'Host',
                          'localhost:8080',
                          'Connection',
                          'keep-alive',
                          'Pragma',
                          'no-cache',
                          'Cache-Control',
                          'no-cache',
                          'User-Agent',
                          'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.132 Safari/537.36',
                          'Accept',
                          '*/*',
                          'Referer',
                          'http://localhost:8080/',
                          'Accept-Encoding',
                          'gzip, deflate, sdch',
                          'Accept-Language',
                          'zh-CN,zh;q=0.8,en;q=0.6',
                          'Cookie',
                          'io=B5ehkX7J-gME2Jd5AAAA; amvid=7b2309f47fa4b428ae50a46e3d3c4381' ],
                       trailers: {},
                       rawTrailers: [],
                       upgrade: false,
                       url: '/socket.io/?EIO=3&transport=polling&t=LEiG-Ij',
                       method: 'GET',
                       statusCode: null,
                       statusMessage: null,
                       client: 
                        Socket {
                          _connecting: false,
                          _hadError: false,
                          _handle: 
                           TCP {
                             _externalStream: {},
                             fd: -1,
                             reading: true,
                             owner: [Circular],
                             onread: [Function: onread],
                             onconnection: null,
                             writeQueueSize: 0 },
                          _parent: null,
                          _host: null,
                          _readableState: 
                           ReadableState {
                             objectMode: false,
                             highWaterMark: 16384,
                             buffer: [],
                             length: 0,
                             pipes: null,
                             pipesCount: 0,
                             flowing: true,
                             ended: false,
                             endEmitted: false,
                             reading: true,
                             sync: false,
                             needReadable: true,
                             emittedReadable: false,
                             readableListening: false,
                             resumeScheduled: false,
                             defaultEncoding: 'utf8',
                             ranOut: false,
                             awaitDrain: 0,
                             readingMore: false,
                             decoder: null,
                             encoding: null },
                          readable: true,
                          domain: null,
                          _events: 
                           { end: 
                              [ { [Function: g] listener: [Function: onend] },
                                [Function: socketOnEnd] ],
                             finish: [Function: onSocketFinish],
                             _socketEnd: [Function: onSocketEnd],
                             drain: [ [Function: ondrain], [Function: socketOnDrain] ],
                             timeout: [Function],
                             error: [Function: socketOnError],
                             close: 
                              [ [Function: serverSocketCloseListener],
                                [Function: onServerResponseClose] ],
                             data: [Function: socketOnData],
                             resume: [Function: onSocketResume],
                             pause: [Function: onSocketPause] },
                          _eventsCount: 10,
                          _maxListeners: undefined,
                          _writableState: 
                           WritableState {
                             objectMode: false,
                             highWaterMark: 16384,
                             needDrain: false,
                             ending: false,
                             ended: false,
                             finished: false,
                             decodeStrings: false,
                             defaultEncoding: 'utf8',
                             length: 0,
                             writing: false,
                             corked: 0,
                             sync: false,
                             bufferProcessing: false,
                             onwrite: [Function],
                             writecb: null,
                             writelen: 0,
                             bufferedRequest: null,
                             lastBufferedRequest: null,
                             pendingcb: 3,
                             prefinished: false,
                             errorEmitted: false },
                          writable: true,
                          allowHalfOpen: true,
                          destroyed: false,
                          bytesRead: 0,
                          _bytesDispatched: 311,
                          _sockname: null,
                          _pendingData: null,
                          _pendingEncoding: '',
                          server: 
                           Server {
                             domain: null,
                             _events: 
                              { connection: [Function: connectionListener],
                                clientError: [Function],
                                close: [Function: bound ],
                                upgrade: [Function],
                                request: [Function] },
                             _eventsCount: 5,
                             _maxListeners: undefined,
                             _connections: 1,
                             _handle: 
                              TCP {
                                _externalStream: {},
                                fd: -1,
                                reading: false,
                                owner: [Circular],
                                onread: null,
                                onconnection: [Function: onconnection],
                                writeQueueSize: 0 },
                             _usingSlaves: false,
                             _slaves: [],
                             _unref: false,
                             allowHalfOpen: true,
                             pauseOnConnect: false,
                             httpAllowHalfOpen: false,
                             timeout: 120000,
                             _pendingResponseData: 0,
                             _connectionKey: '6::::8080' },
                          _idleTimeout: 120000,
                          _idleNext: 
                           { [Function: utcDate]
                             _onTimeout: [Function],
                             _idleTimeout: 5,
                             _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
                             _idlePrev: [Circular],
                             _idleStart: 995 },
                          _idlePrev: 
                           { _idleNext: [Circular],
                             _idlePrev: 
                              { [Function: utcDate]
                                _onTimeout: [Function],
                                _idleTimeout: 5,
                                _idleNext: [Circular],
                                _idlePrev: [Circular],
                                _idleStart: 995 } },
                          _idleStart: 997,
                          parser: 
                           HTTPParser {
                             '0': [Function: parserOnHeaders],
                             '1': [Function: parserOnHeadersComplete],
                             '2': [Function: parserOnBody],
                             '3': [Function: parserOnMessageComplete],
                             '4': [Function: onParserExecute],
                             _headers: [],
                             _url: '',
                             _consumed: true,
                             socket: [Circular],
                             incoming: [Circular],
                             maxHeaderPairs: 2000,
                             onIncoming: [Function: parserOnIncoming] },
                          on: [Function: socketOnWrap],
                          _paused: false,
                          read: [Function],
                          _consuming: true,
                          _httpMessage: 
                           ServerResponse {
                             domain: null,
                             _events: { finish: [Function: resOnFinish] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             output: [],
                             outputEncodings: [],
                             outputCallbacks: [],
                             outputSize: 0,
                             writable: true,
                             _last: false,
                             chunkedEncoding: false,
                             shouldKeepAlive: true,
                             useChunkedEncodingByDefault: true,
                             sendDate: true,
                             _removedHeader: {},
                             _contentLength: null,
                             _hasBody: true,
                             _trailer: '',
                             finished: true,
                             _headerSent: true,
                             socket: [Circular],
                             connection: [Circular],
                             _header: 'HTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-Length: 101\r\nAccess-Control-Allow-Origin: *\r\nSet-Cookie: io=A6RWxddJuNa2BXdbAAAA\r\nDate: Fri, 25 Mar 2016 05:34:04 GMT\r\nConnection: keep-alive\r\n\r\n',
                             _headers: null,
                             _headerNames: {},
                             _onPendingData: [Function: updateOutgoingData],
                             statusMessage: 'OK',
                             statusCode: 200 },
                          _peername: { address: '::1', family: 'IPv6', port: 50070 } },
                       _consuming: false,
                       _dumped: false,
                       _query: { EIO: '3', transport: 'polling', t: 'LEiG-Ij' },
                       res: 
                        ServerResponse {
                          domain: null,
                          _events: { finish: [Function: resOnFinish] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          output: [],
                          outputEncodings: [],
                          outputCallbacks: [],
                          outputSize: 0,
                          writable: true,
                          _last: false,
                          chunkedEncoding: false,
                          shouldKeepAlive: true,
                          useChunkedEncodingByDefault: true,
                          sendDate: true,
                          _removedHeader: {},
                          _contentLength: null,
                          _hasBody: true,
                          _trailer: '',
                          finished: true,
                          _headerSent: true,
                          socket: 
                           Socket {
                             _connecting: false,
                             _hadError: false,
                             _handle: 
                              TCP {
                                _externalStream: {},
                                fd: -1,
                                reading: true,
                                owner: [Circular],
                                onread: [Function: onread],
                                onconnection: null,
                                writeQueueSize: 0 },
                             _parent: null,
                             _host: null,
                             _readableState: 
                              ReadableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                buffer: [],
                                length: 0,
                                pipes: null,
                                pipesCount: 0,
                                flowing: true,
                                ended: false,
                                endEmitted: false,
                                reading: true,
                                sync: false,
                                needReadable: true,
                                emittedReadable: false,
                                readableListening: false,
                                resumeScheduled: false,
                                defaultEncoding: 'utf8',
                                ranOut: false,
                                awaitDrain: 0,
                                readingMore: false,
                                decoder: null,
                                encoding: null },
                             readable: true,
                             domain: null,
                             _events: 
                              { end: 
                                 [ { [Function: g] listener: [Function: onend] },
                                   [Function: socketOnEnd] ],
                                finish: [Function: onSocketFinish],
                                _socketEnd: [Function: onSocketEnd],
                                drain: [ [Function: ondrain], [Function: socketOnDrain] ],
                                timeout: [Function],
                                error: [Function: socketOnError],
                                close: 
                                 [ [Function: serverSocketCloseListener],
                                   [Function: onServerResponseClose] ],
                                data: [Function: socketOnData],
                                resume: [Function: onSocketResume],
                                pause: [Function: onSocketPause] },
                             _eventsCount: 10,
                             _maxListeners: undefined,
                             _writableState: 
                              WritableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                needDrain: false,
                                ending: false,
                                ended: false,
                                finished: false,
                                decodeStrings: false,
                                defaultEncoding: 'utf8',
                                length: 0,
                                writing: false,
                                corked: 0,
                                sync: false,
                                bufferProcessing: false,
                                onwrite: [Function],
                                writecb: null,
                                writelen: 0,
                                bufferedRequest: null,
                                lastBufferedRequest: null,
                                pendingcb: 3,
                                prefinished: false,
                                errorEmitted: false },
                             writable: true,
                             allowHalfOpen: true,
                             destroyed: false,
                             bytesRead: 0,
                             _bytesDispatched: 311,
                             _sockname: null,
                             _pendingData: null,
                             _pendingEncoding: '',
                             server: 
                              Server {
                                domain: null,
                                _events: 
                                 { connection: [Function: connectionListener],
                                   clientError: [Function],
                                   close: [Function: bound ],
                                   upgrade: [Function],
                                   request: [Function] },
                                _eventsCount: 5,
                                _maxListeners: undefined,
                                _connections: 1,
                                _handle: 
                                 TCP {
                                   _externalStream: {},
                                   fd: -1,
                                   reading: false,
                                   owner: [Circular],
                                   onread: null,
                                   onconnection: [Function: onconnection],
                                   writeQueueSize: 0 },
                                _usingSlaves: false,
                                _slaves: [],
                                _unref: false,
                                allowHalfOpen: true,
                                pauseOnConnect: false,
                                httpAllowHalfOpen: false,
                                timeout: 120000,
                                _pendingResponseData: 0,
                                _connectionKey: '6::::8080' },
                             _idleTimeout: 120000,
                             _idleNext: 
                              { [Function: utcDate]
                                _onTimeout: [Function],
                                _idleTimeout: 5,
                                _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
                                _idlePrev: [Circular],
                                _idleStart: 995 },
                             _idlePrev: 
                              { _idleNext: [Circular],
                                _idlePrev: 
                                 { [Function: utcDate]
                                   _onTimeout: [Function],
                                   _idleTimeout: 5,
                                   _idleNext: [Circular],
                                   _idlePrev: [Circular],
                                   _idleStart: 995 } },
                             _idleStart: 997,
                             parser: 
                              HTTPParser {
                                '0': [Function: parserOnHeaders],
                                '1': [Function: parserOnHeadersComplete],
                                '2': [Function: parserOnBody],
                                '3': [Function: parserOnMessageComplete],
                                '4': [Function: onParserExecute],
                                _headers: [],
                                _url: '',
                                _consumed: true,
                                socket: [Circular],
                                incoming: [Circular],
                                maxHeaderPairs: 2000,
                                onIncoming: [Function: parserOnIncoming] },
                             on: [Function: socketOnWrap],
                             _paused: false,
                             read: [Function],
                             _consuming: true,
                             _httpMessage: [Circular],
                             _peername: { address: '::1', family: 'IPv6', port: 50070 } },
                          connection: 
                           Socket {
                             _connecting: false,
                             _hadError: false,
                             _handle: 
                              TCP {
                                _externalStream: {},
                                fd: -1,
                                reading: true,
                                owner: [Circular],
                                onread: [Function: onread],
                                onconnection: null,
                                writeQueueSize: 0 },
                             _parent: null,
                             _host: null,
                             _readableState: 
                              ReadableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                buffer: [],
                                length: 0,
                                pipes: null,
                                pipesCount: 0,
                                flowing: true,
                                ended: false,
                                endEmitted: false,
                                reading: true,
                                sync: false,
                                needReadable: true,
                                emittedReadable: false,
                                readableListening: false,
                                resumeScheduled: false,
                                defaultEncoding: 'utf8',
                                ranOut: false,
                                awaitDrain: 0,
                                readingMore: false,
                                decoder: null,
                                encoding: null },
                             readable: true,
                             domain: null,
                             _events: 
                              { end: 
                                 [ { [Function: g] listener: [Function: onend] },
                                   [Function: socketOnEnd] ],
                                finish: [Function: onSocketFinish],
                                _socketEnd: [Function: onSocketEnd],
                                drain: [ [Function: ondrain], [Function: socketOnDrain] ],
                                timeout: [Function],
                                error: [Function: socketOnError],
                                close: 
                                 [ [Function: serverSocketCloseListener],
                                   [Function: onServerResponseClose] ],
                                data: [Function: socketOnData],
                                resume: [Function: onSocketResume],
                                pause: [Function: onSocketPause] },
                             _eventsCount: 10,
                             _maxListeners: undefined,
                             _writableState: 
                              WritableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                needDrain: false,
                                ending: false,
                                ended: false,
                                finished: false,
                                decodeStrings: false,
                                defaultEncoding: 'utf8',
                                length: 0,
                                writing: false,
                                corked: 0,
                                sync: false,
                                bufferProcessing: false,
                                onwrite: [Function],
                                writecb: null,
                                writelen: 0,
                                bufferedRequest: null,
                                lastBufferedRequest: null,
                                pendingcb: 3,
                                prefinished: false,
                                errorEmitted: false },
                             writable: true,
                             allowHalfOpen: true,
                             destroyed: false,
                             bytesRead: 0,
                             _bytesDispatched: 311,
                             _sockname: null,
                             _pendingData: null,
                             _pendingEncoding: '',
                             server: 
                              Server {
                                domain: null,
                                _events: 
                                 { connection: [Function: connectionListener],
                                   clientError: [Function],
                                   close: [Function: bound ],
                                   upgrade: [Function],
                                   request: [Function] },
                                _eventsCount: 5,
                                _maxListeners: undefined,
                                _connections: 1,
                                _handle: 
                                 TCP {
                                   _externalStream: {},
                                   fd: -1,
                                   reading: false,
                                   owner: [Circular],
                                   onread: null,
                                   onconnection: [Function: onconnection],
                                   writeQueueSize: 0 },
                                _usingSlaves: false,
                                _slaves: [],
                                _unref: false,
                                allowHalfOpen: true,
                                pauseOnConnect: false,
                                httpAllowHalfOpen: false,
                                timeout: 120000,
                                _pendingResponseData: 0,
                                _connectionKey: '6::::8080' },
                             _idleTimeout: 120000,
                             _idleNext: 
                              { [Function: utcDate]
                                _onTimeout: [Function],
                                _idleTimeout: 5,
                                _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
                                _idlePrev: [Circular],
                                _idleStart: 995 },
                             _idlePrev: 
                              { _idleNext: [Circular],
                                _idlePrev: 
                                 { [Function: utcDate]
                                   _onTimeout: [Function],
                                   _idleTimeout: 5,
                                   _idleNext: [Circular],
                                   _idlePrev: [Circular],
                                   _idleStart: 995 } },
                             _idleStart: 997,
                             parser: 
                              HTTPParser {
                                '0': [Function: parserOnHeaders],
                                '1': [Function: parserOnHeadersComplete],
                                '2': [Function: parserOnBody],
                                '3': [Function: parserOnMessageComplete],
                                '4': [Function: onParserExecute],
                                _headers: [],
                                _url: '',
                                _consumed: true,
                                socket: [Circular],
                                incoming: [Circular],
                                maxHeaderPairs: 2000,
                                onIncoming: [Function: parserOnIncoming] },
                             on: [Function: socketOnWrap],
                             _paused: false,
                             read: [Function],
                             _consuming: true,
                             _httpMessage: [Circular],
                             _peername: { address: '::1', family: 'IPv6', port: 50070 } },
                          _header: 'HTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-Length: 101\r\nAccess-Control-Allow-Origin: *\r\nSet-Cookie: io=A6RWxddJuNa2BXdbAAAA\r\nDate: Fri, 25 Mar 2016 05:34:04 GMT\r\nConnection: keep-alive\r\n\r\n',
                          _headers: null,
                          _headerNames: {},
                          _onPendingData: [Function: updateOutgoingData],
                          statusMessage: 'OK',
                          statusCode: 200 },
                       cleanup: [Function: cleanup] },
                    remoteAddress: '::1',
                    checkIntervalTimer: null,
                    upgradeTimeoutTimer: null,
                    pingTimeoutTimer: 
                     { _called: false,
                       _idleTimeout: 85000,
                       _idlePrev: 
                        Timer {
                          '0': [Function: listOnTimeout],
                          _idleNext: [Circular],
                          _idlePrev: [Circular],
                          msecs: 85000 },
                       _idleNext: 
                        Timer {
                          '0': [Function: listOnTimeout],
                          _idleNext: [Circular],
                          _idlePrev: [Circular],
                          msecs: 85000 },
                       _idleStart: 978,
                       _onTimeout: [Function],
                       _repeat: null },
                    transport: 
                     XHR {
                       readyState: 'open',
                       discarded: false,
                       closeTimeout: 30000,
                       maxHttpBufferSize: 100000000,
                       httpCompression: { threshold: 1024 },
                       supportsBinary: true,
                       _events: 
                        { error: { [Function: g] listener: [Function: bound ] },
                          packet: [Function: bound ],
                          drain: [ [Function: bound ], [Function: onDrain] ],
                          close: { [Function: g] listener: [Function: bound ] },
                          headers: [Function] },
                       _eventsCount: 5,
                       sid: 'A6RWxddJuNa2BXdbAAAA',
                       req: null,
                       res: null,
                       writable: false },
                    _events: 
                     { close: [ { [Function: g] listener: [Function] }, [Function: bound ] ],
                       data: [Function: bound ],
                       error: [Function: bound ] },
                    _eventsCount: 3 } },
              clientsCount: 1,
              pingTimeout: 60000,
              pingInterval: 25000,
              upgradeTimeout: 10000,
              maxHttpBufferSize: 100000000,
              transports: [ 'polling', 'websocket' ],
              allowUpgrades: true,
              allowRequest: [Function: bound ],
              cookie: 'io',
              cookiePath: false,
              perMessageDeflate: { threshold: 1024 },
              httpCompression: { threshold: 1024 },
              ws: 
               WebSocketServer {
                 domain: null,
                 _events: {},
                 _eventsCount: 0,
                 _maxListeners: undefined,
                 options: 
                  { host: [Getter],
                    port: [Getter],
                    server: [Getter],
                    verifyClient: [Getter],
                    handleProtocols: [Getter],
                    path: [Getter],
                    noServer: [Getter],
                    disableHixie: [Getter],
                    clientTracking: [Getter],
                    perMessageDeflate: [Getter] },
                 path: null,
                 clients: [] },
              _events: { connection: [Function: bound ] },
              _eventsCount: 1 } },
        sockets: {},
        connected: {},
        fns: [ [Function], [Function] ],
        ids: 0,
        adapter: [Circular],
        _events: { connection: [Function] },
        _eventsCount: 1 },
     rooms: {},
     sids: {},
     encoder: Encoder {} },
  id: '/#A6RWxddJuNa2BXdbAAAA',
  client: 
   Client {
     server: 
      Server {
        nsps: 
         { '/': 
            Namespace {
              name: '/',
              server: [Circular],
              sockets: {},
              connected: {},
              fns: [ [Function], [Function] ],
              ids: 0,
              adapter: Adapter { nsp: [Circular], rooms: {}, sids: {}, encoder: Encoder {} },
              _events: { connection: [Function] },
              _eventsCount: 1 } },
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: 
         Namespace {
           name: '/',
           server: [Circular],
           sockets: {},
           connected: {},
           fns: [ [Function], [Function] ],
           ids: 0,
           adapter: Adapter { nsp: [Circular], rooms: {}, sids: {}, encoder: Encoder {} },
           _events: { connection: [Function] },
           _eventsCount: 1 },
        eio: 
         Server {
           clients: 
            { A6RWxddJuNa2BXdbAAAA: 
               Socket {
                 id: 'A6RWxddJuNa2BXdbAAAA',
                 server: [Circular],
                 upgrading: false,
                 upgraded: false,
                 readyState: 'open',
                 writeBuffer: [],
                 packetsFn: [],
                 sentCallbackFn: [],
                 cleanupFn: [ [Function], [Function] ],
                 request: 
                  IncomingMessage {
                    _readableState: 
                     ReadableState {
                       objectMode: false,
                       highWaterMark: 16384,
                       buffer: [],
                       length: 0,
                       pipes: null,
                       pipesCount: 0,
                       flowing: null,
                       ended: false,
                       endEmitted: false,
                       reading: false,
                       sync: true,
                       needReadable: false,
                       emittedReadable: false,
                       readableListening: false,
                       resumeScheduled: false,
                       defaultEncoding: 'utf8',
                       ranOut: false,
                       awaitDrain: 0,
                       readingMore: false,
                       decoder: null,
                       encoding: null },
                    readable: true,
                    domain: null,
                    _events: {},
                    _eventsCount: 0,
                    _maxListeners: undefined,
                    socket: 
                     Socket {
                       _connecting: false,
                       _hadError: false,
                       _handle: 
                        TCP {
                          _externalStream: {},
                          fd: -1,
                          reading: true,
                          owner: [Circular],
                          onread: [Function: onread],
                          onconnection: null,
                          writeQueueSize: 0 },
                       _parent: null,
                       _host: null,
                       _readableState: 
                        ReadableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          buffer: [],
                          length: 0,
                          pipes: null,
                          pipesCount: 0,
                          flowing: true,
                          ended: false,
                          endEmitted: false,
                          reading: true,
                          sync: false,
                          needReadable: true,
                          emittedReadable: false,
                          readableListening: false,
                          resumeScheduled: false,
                          defaultEncoding: 'utf8',
                          ranOut: false,
                          awaitDrain: 0,
                          readingMore: false,
                          decoder: null,
                          encoding: null },
                       readable: true,
                       domain: null,
                       _events: 
                        { end: 
                           [ { [Function: g] listener: [Function: onend] },
                             [Function: socketOnEnd] ],
                          finish: [Function: onSocketFinish],
                          _socketEnd: [Function: onSocketEnd],
                          drain: [ [Function: ondrain], [Function: socketOnDrain] ],
                          timeout: [Function],
                          error: [Function: socketOnError],
                          close: 
                           [ [Function: serverSocketCloseListener],
                             [Function: onServerResponseClose] ],
                          data: [Function: socketOnData],
                          resume: [Function: onSocketResume],
                          pause: [Function: onSocketPause] },
                       _eventsCount: 10,
                       _maxListeners: undefined,
                       _writableState: 
                        WritableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          needDrain: false,
                          ending: false,
                          ended: false,
                          finished: false,
                          decodeStrings: false,
                          defaultEncoding: 'utf8',
                          length: 0,
                          writing: false,
                          corked: 0,
                          sync: false,
                          bufferProcessing: false,
                          onwrite: [Function],
                          writecb: null,
                          writelen: 0,
                          bufferedRequest: null,
                          lastBufferedRequest: null,
                          pendingcb: 3,
                          prefinished: false,
                          errorEmitted: false },
                       writable: true,
                       allowHalfOpen: true,
                       destroyed: false,
                       bytesRead: 0,
                       _bytesDispatched: 311,
                       _sockname: null,
                       _pendingData: null,
                       _pendingEncoding: '',
                       server: 
                        Server {
                          domain: null,
                          _events: 
                           { connection: [Function: connectionListener],
                             clientError: [Function],
                             close: [Function: bound ],
                             upgrade: [Function],
                             request: [Function] },
                          _eventsCount: 5,
                          _maxListeners: undefined,
                          _connections: 1,
                          _handle: 
                           TCP {
                             _externalStream: {},
                             fd: -1,
                             reading: false,
                             owner: [Circular],
                             onread: null,
                             onconnection: [Function: onconnection],
                             writeQueueSize: 0 },
                          _usingSlaves: false,
                          _slaves: [],
                          _unref: false,
                          allowHalfOpen: true,
                          pauseOnConnect: false,
                          httpAllowHalfOpen: false,
                          timeout: 120000,
                          _pendingResponseData: 0,
                          _connectionKey: '6::::8080' },
                       _idleTimeout: 120000,
                       _idleNext: 
                        { [Function: utcDate]
                          _onTimeout: [Function],
                          _idleTimeout: 5,
                          _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
                          _idlePrev: [Circular],
                          _idleStart: 995 },
                       _idlePrev: 
                        { _idleNext: [Circular],
                          _idlePrev: 
                           { [Function: utcDate]
                             _onTimeout: [Function],
                             _idleTimeout: 5,
                             _idleNext: [Circular],
                             _idlePrev: [Circular],
                             _idleStart: 995 } },
                       _idleStart: 997,
                       parser: 
                        HTTPParser {
                          '0': [Function: parserOnHeaders],
                          '1': [Function: parserOnHeadersComplete],
                          '2': [Function: parserOnBody],
                          '3': [Function: parserOnMessageComplete],
                          '4': [Function: onParserExecute],
                          _headers: [],
                          _url: '',
                          _consumed: true,
                          socket: [Circular],
                          incoming: [Circular],
                          maxHeaderPairs: 2000,
                          onIncoming: [Function: parserOnIncoming] },
                       on: [Function: socketOnWrap],
                       _paused: false,
                       read: [Function],
                       _consuming: true,
                       _httpMessage: 
                        ServerResponse {
                          domain: null,
                          _events: { finish: [Function: resOnFinish] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          output: [],
                          outputEncodings: [],
                          outputCallbacks: [],
                          outputSize: 0,
                          writable: true,
                          _last: false,
                          chunkedEncoding: false,
                          shouldKeepAlive: true,
                          useChunkedEncodingByDefault: true,
                          sendDate: true,
                          _removedHeader: {},
                          _contentLength: null,
                          _hasBody: true,
                          _trailer: '',
                          finished: true,
                          _headerSent: true,
                          socket: [Circular],
                          connection: [Circular],
                          _header: 'HTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-Length: 101\r\nAccess-Control-Allow-Origin: *\r\nSet-Cookie: io=A6RWxddJuNa2BXdbAAAA\r\nDate: Fri, 25 Mar 2016 05:34:04 GMT\r\nConnection: keep-alive\r\n\r\n',
                          _headers: null,
                          _headerNames: {},
                          _onPendingData: [Function: updateOutgoingData],
                          statusMessage: 'OK',
                          statusCode: 200 },
                       _peername: { address: '::1', family: 'IPv6', port: 50070 } },
                    connection: 
                     Socket {
                       _connecting: false,
                       _hadError: false,
                       _handle: 
                        TCP {
                          _externalStream: {},
                          fd: -1,
                          reading: true,
                          owner: [Circular],
                          onread: [Function: onread],
                          onconnection: null,
                          writeQueueSize: 0 },
                       _parent: null,
                       _host: null,
                       _readableState: 
                        ReadableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          buffer: [],
                          length: 0,
                          pipes: null,
                          pipesCount: 0,
                          flowing: true,
                          ended: false,
                          endEmitted: false,
                          reading: true,
                          sync: false,
                          needReadable: true,
                          emittedReadable: false,
                          readableListening: false,
                          resumeScheduled: false,
                          defaultEncoding: 'utf8',
                          ranOut: false,
                          awaitDrain: 0,
                          readingMore: false,
                          decoder: null,
                          encoding: null },
                       readable: true,
                       domain: null,
                       _events: 
                        { end: 
                           [ { [Function: g] listener: [Function: onend] },
                             [Function: socketOnEnd] ],
                          finish: [Function: onSocketFinish],
                          _socketEnd: [Function: onSocketEnd],
                          drain: [ [Function: ondrain], [Function: socketOnDrain] ],
                          timeout: [Function],
                          error: [Function: socketOnError],
                          close: 
                           [ [Function: serverSocketCloseListener],
                             [Function: onServerResponseClose] ],
                          data: [Function: socketOnData],
                          resume: [Function: onSocketResume],
                          pause: [Function: onSocketPause] },
                       _eventsCount: 10,
                       _maxListeners: undefined,
                       _writableState: 
                        WritableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          needDrain: false,
                          ending: false,
                          ended: false,
                          finished: false,
                          decodeStrings: false,
                          defaultEncoding: 'utf8',
                          length: 0,
                          writing: false,
                          corked: 0,
                          sync: false,
                          bufferProcessing: false,
                          onwrite: [Function],
                          writecb: null,
                          writelen: 0,
                          bufferedRequest: null,
                          lastBufferedRequest: null,
                          pendingcb: 3,
                          prefinished: false,
                          errorEmitted: false },
                       writable: true,
                       allowHalfOpen: true,
                       destroyed: false,
                       bytesRead: 0,
                       _bytesDispatched: 311,
                       _sockname: null,
                       _pendingData: null,
                       _pendingEncoding: '',
                       server: 
                        Server {
                          domain: null,
                          _events: 
                           { connection: [Function: connectionListener],
                             clientError: [Function],
                             close: [Function: bound ],
                             upgrade: [Function],
                             request: [Function] },
                          _eventsCount: 5,
                          _maxListeners: undefined,
                          _connections: 1,
                          _handle: 
                           TCP {
                             _externalStream: {},
                             fd: -1,
                             reading: false,
                             owner: [Circular],
                             onread: null,
                             onconnection: [Function: onconnection],
                             writeQueueSize: 0 },
                          _usingSlaves: false,
                          _slaves: [],
                          _unref: false,
                          allowHalfOpen: true,
                          pauseOnConnect: false,
                          httpAllowHalfOpen: false,
                          timeout: 120000,
                          _pendingResponseData: 0,
                          _connectionKey: '6::::8080' },
                       _idleTimeout: 120000,
                       _idleNext: 
                        { [Function: utcDate]
                          _onTimeout: [Function],
                          _idleTimeout: 5,
                          _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
                          _idlePrev: [Circular],
                          _idleStart: 995 },
                       _idlePrev: 
                        { _idleNext: [Circular],
                          _idlePrev: 
                           { [Function: utcDate]
                             _onTimeout: [Function],
                             _idleTimeout: 5,
                             _idleNext: [Circular],
                             _idlePrev: [Circular],
                             _idleStart: 995 } },
                       _idleStart: 997,
                       parser: 
                        HTTPParser {
                          '0': [Function: parserOnHeaders],
                          '1': [Function: parserOnHeadersComplete],
                          '2': [Function: parserOnBody],
                          '3': [Function: parserOnMessageComplete],
                          '4': [Function: onParserExecute],
                          _headers: [],
                          _url: '',
                          _consumed: true,
                          socket: [Circular],
                          incoming: [Circular],
                          maxHeaderPairs: 2000,
                          onIncoming: [Function: parserOnIncoming] },
                       on: [Function: socketOnWrap],
                       _paused: false,
                       read: [Function],
                       _consuming: true,
                       _httpMessage: 
                        ServerResponse {
                          domain: null,
                          _events: { finish: [Function: resOnFinish] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          output: [],
                          outputEncodings: [],
                          outputCallbacks: [],
                          outputSize: 0,
                          writable: true,
                          _last: false,
                          chunkedEncoding: false,
                          shouldKeepAlive: true,
                          useChunkedEncodingByDefault: true,
                          sendDate: true,
                          _removedHeader: {},
                          _contentLength: null,
                          _hasBody: true,
                          _trailer: '',
                          finished: true,
                          _headerSent: true,
                          socket: [Circular],
                          connection: [Circular],
                          _header: 'HTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-Length: 101\r\nAccess-Control-Allow-Origin: *\r\nSet-Cookie: io=A6RWxddJuNa2BXdbAAAA\r\nDate: Fri, 25 Mar 2016 05:34:04 GMT\r\nConnection: keep-alive\r\n\r\n',
                          _headers: null,
                          _headerNames: {},
                          _onPendingData: [Function: updateOutgoingData],
                          statusMessage: 'OK',
                          statusCode: 200 },
                       _peername: { address: '::1', family: 'IPv6', port: 50070 } },
                    httpVersionMajor: 1,
                    httpVersionMinor: 1,
                    httpVersion: '1.1',
                    complete: false,
                    headers: 
                     { host: 'localhost:8080',
                       connection: 'keep-alive',
                       pragma: 'no-cache',
                       'cache-control': 'no-cache',
                       'user-agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.132 Safari/537.36',
                       accept: '*/*',
                       referer: 'http://localhost:8080/',
                       'accept-encoding': 'gzip, deflate, sdch',
                       'accept-language': 'zh-CN,zh;q=0.8,en;q=0.6',
                       cookie: 'io=B5ehkX7J-gME2Jd5AAAA; amvid=7b2309f47fa4b428ae50a46e3d3c4381' },
                    rawHeaders: 
                     [ 'Host',
                       'localhost:8080',
                       'Connection',
                       'keep-alive',
                       'Pragma',
                       'no-cache',
                       'Cache-Control',
                       'no-cache',
                       'User-Agent',
                       'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.132 Safari/537.36',
                       'Accept',
                       '*/*',
                       'Referer',
                       'http://localhost:8080/',
                       'Accept-Encoding',
                       'gzip, deflate, sdch',
                       'Accept-Language',
                       'zh-CN,zh;q=0.8,en;q=0.6',
                       'Cookie',
                       'io=B5ehkX7J-gME2Jd5AAAA; amvid=7b2309f47fa4b428ae50a46e3d3c4381' ],
                    trailers: {},
                    rawTrailers: [],
                    upgrade: false,
                    url: '/socket.io/?EIO=3&transport=polling&t=LEiG-Ij',
                    method: 'GET',
                    statusCode: null,
                    statusMessage: null,
                    client: 
                     Socket {
                       _connecting: false,
                       _hadError: false,
                       _handle: 
                        TCP {
                          _externalStream: {},
                          fd: -1,
                          reading: true,
                          owner: [Circular],
                          onread: [Function: onread],
                          onconnection: null,
                          writeQueueSize: 0 },
                       _parent: null,
                       _host: null,
                       _readableState: 
                        ReadableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          buffer: [],
                          length: 0,
                          pipes: null,
                          pipesCount: 0,
                          flowing: true,
                          ended: false,
                          endEmitted: false,
                          reading: true,
                          sync: false,
                          needReadable: true,
                          emittedReadable: false,
                          readableListening: false,
                          resumeScheduled: false,
                          defaultEncoding: 'utf8',
                          ranOut: false,
                          awaitDrain: 0,
                          readingMore: false,
                          decoder: null,
                          encoding: null },
                       readable: true,
                       domain: null,
                       _events: 
                        { end: 
                           [ { [Function: g] listener: [Function: onend] },
                             [Function: socketOnEnd] ],
                          finish: [Function: onSocketFinish],
                          _socketEnd: [Function: onSocketEnd],
                          drain: [ [Function: ondrain], [Function: socketOnDrain] ],
                          timeout: [Function],
                          error: [Function: socketOnError],
                          close: 
                           [ [Function: serverSocketCloseListener],
                             [Function: onServerResponseClose] ],
                          data: [Function: socketOnData],
                          resume: [Function: onSocketResume],
                          pause: [Function: onSocketPause] },
                       _eventsCount: 10,
                       _maxListeners: undefined,
                       _writableState: 
                        WritableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          needDrain: false,
                          ending: false,
                          ended: false,
                          finished: false,
                          decodeStrings: false,
                          defaultEncoding: 'utf8',
                          length: 0,
                          writing: false,
                          corked: 0,
                          sync: false,
                          bufferProcessing: false,
                          onwrite: [Function],
                          writecb: null,
                          writelen: 0,
                          bufferedRequest: null,
                          lastBufferedRequest: null,
                          pendingcb: 3,
                          prefinished: false,
                          errorEmitted: false },
                       writable: true,
                       allowHalfOpen: true,
                       destroyed: false,
                       bytesRead: 0,
                       _bytesDispatched: 311,
                       _sockname: null,
                       _pendingData: null,
                       _pendingEncoding: '',
                       server: 
                        Server {
                          domain: null,
                          _events: 
                           { connection: [Function: connectionListener],
                             clientError: [Function],
                             close: [Function: bound ],
                             upgrade: [Function],
                             request: [Function] },
                          _eventsCount: 5,
                          _maxListeners: undefined,
                          _connections: 1,
                          _handle: 
                           TCP {
                             _externalStream: {},
                             fd: -1,
                             reading: false,
                             owner: [Circular],
                             onread: null,
                             onconnection: [Function: onconnection],
                             writeQueueSize: 0 },
                          _usingSlaves: false,
                          _slaves: [],
                          _unref: false,
                          allowHalfOpen: true,
                          pauseOnConnect: false,
                          httpAllowHalfOpen: false,
                          timeout: 120000,
                          _pendingResponseData: 0,
                          _connectionKey: '6::::8080' },
                       _idleTimeout: 120000,
                       _idleNext: 
                        { [Function: utcDate]
                          _onTimeout: [Function],
                          _idleTimeout: 5,
                          _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
                          _idlePrev: [Circular],
                          _idleStart: 995 },
                       _idlePrev: 
                        { _idleNext: [Circular],
                          _idlePrev: 
                           { [Function: utcDate]
                             _onTimeout: [Function],
                             _idleTimeout: 5,
                             _idleNext: [Circular],
                             _idlePrev: [Circular],
                             _idleStart: 995 } },
                       _idleStart: 997,
                       parser: 
                        HTTPParser {
                          '0': [Function: parserOnHeaders],
                          '1': [Function: parserOnHeadersComplete],
                          '2': [Function: parserOnBody],
                          '3': [Function: parserOnMessageComplete],
                          '4': [Function: onParserExecute],
                          _headers: [],
                          _url: '',
                          _consumed: true,
                          socket: [Circular],
                          incoming: [Circular],
                          maxHeaderPairs: 2000,
                          onIncoming: [Function: parserOnIncoming] },
                       on: [Function: socketOnWrap],
                       _paused: false,
                       read: [Function],
                       _consuming: true,
                       _httpMessage: 
                        ServerResponse {
                          domain: null,
                          _events: { finish: [Function: resOnFinish] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          output: [],
                          outputEncodings: [],
                          outputCallbacks: [],
                          outputSize: 0,
                          writable: true,
                          _last: false,
                          chunkedEncoding: false,
                          shouldKeepAlive: true,
                          useChunkedEncodingByDefault: true,
                          sendDate: true,
                          _removedHeader: {},
                          _contentLength: null,
                          _hasBody: true,
                          _trailer: '',
                          finished: true,
                          _headerSent: true,
                          socket: [Circular],
                          connection: [Circular],
                          _header: 'HTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-Length: 101\r\nAccess-Control-Allow-Origin: *\r\nSet-Cookie: io=A6RWxddJuNa2BXdbAAAA\r\nDate: Fri, 25 Mar 2016 05:34:04 GMT\r\nConnection: keep-alive\r\n\r\n',
                          _headers: null,
                          _headerNames: {},
                          _onPendingData: [Function: updateOutgoingData],
                          statusMessage: 'OK',
                          statusCode: 200 },
                       _peername: { address: '::1', family: 'IPv6', port: 50070 } },
                    _consuming: false,
                    _dumped: false,
                    _query: { EIO: '3', transport: 'polling', t: 'LEiG-Ij' },
                    res: 
                     ServerResponse {
                       domain: null,
                       _events: { finish: [Function: resOnFinish] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       output: [],
                       outputEncodings: [],
                       outputCallbacks: [],
                       outputSize: 0,
                       writable: true,
                       _last: false,
                       chunkedEncoding: false,
                       shouldKeepAlive: true,
                       useChunkedEncodingByDefault: true,
                       sendDate: true,
                       _removedHeader: {},
                       _contentLength: null,
                       _hasBody: true,
                       _trailer: '',
                       finished: true,
                       _headerSent: true,
                       socket: 
                        Socket {
                          _connecting: false,
                          _hadError: false,
                          _handle: 
                           TCP {
                             _externalStream: {},
                             fd: -1,
                             reading: true,
                             owner: [Circular],
                             onread: [Function: onread],
                             onconnection: null,
                             writeQueueSize: 0 },
                          _parent: null,
                          _host: null,
                          _readableState: 
                           ReadableState {
                             objectMode: false,
                             highWaterMark: 16384,
                             buffer: [],
                             length: 0,
                             pipes: null,
                             pipesCount: 0,
                             flowing: true,
                             ended: false,
                             endEmitted: false,
                             reading: true,
                             sync: false,
                             needReadable: true,
                             emittedReadable: false,
                             readableListening: false,
                             resumeScheduled: false,
                             defaultEncoding: 'utf8',
                             ranOut: false,
                             awaitDrain: 0,
                             readingMore: false,
                             decoder: null,
                             encoding: null },
                          readable: true,
                          domain: null,
                          _events: 
                           { end: 
                              [ { [Function: g] listener: [Function: onend] },
                                [Function: socketOnEnd] ],
                             finish: [Function: onSocketFinish],
                             _socketEnd: [Function: onSocketEnd],
                             drain: [ [Function: ondrain], [Function: socketOnDrain] ],
                             timeout: [Function],
                             error: [Function: socketOnError],
                             close: 
                              [ [Function: serverSocketCloseListener],
                                [Function: onServerResponseClose] ],
                             data: [Function: socketOnData],
                             resume: [Function: onSocketResume],
                             pause: [Function: onSocketPause] },
                          _eventsCount: 10,
                          _maxListeners: undefined,
                          _writableState: 
                           WritableState {
                             objectMode: false,
                             highWaterMark: 16384,
                             needDrain: false,
                             ending: false,
                             ended: false,
                             finished: false,
                             decodeStrings: false,
                             defaultEncoding: 'utf8',
                             length: 0,
                             writing: false,
                             corked: 0,
                             sync: false,
                             bufferProcessing: false,
                             onwrite: [Function],
                             writecb: null,
                             writelen: 0,
                             bufferedRequest: null,
                             lastBufferedRequest: null,
                             pendingcb: 3,
                             prefinished: false,
                             errorEmitted: false },
                          writable: true,
                          allowHalfOpen: true,
                          destroyed: false,
                          bytesRead: 0,
                          _bytesDispatched: 311,
                          _sockname: null,
                          _pendingData: null,
                          _pendingEncoding: '',
                          server: 
                           Server {
                             domain: null,
                             _events: 
                              { connection: [Function: connectionListener],
                                clientError: [Function],
                                close: [Function: bound ],
                                upgrade: [Function],
                                request: [Function] },
                             _eventsCount: 5,
                             _maxListeners: undefined,
                             _connections: 1,
                             _handle: 
                              TCP {
                                _externalStream: {},
                                fd: -1,
                                reading: false,
                                owner: [Circular],
                                onread: null,
                                onconnection: [Function: onconnection],
                                writeQueueSize: 0 },
                             _usingSlaves: false,
                             _slaves: [],
                             _unref: false,
                             allowHalfOpen: true,
                             pauseOnConnect: false,
                             httpAllowHalfOpen: false,
                             timeout: 120000,
                             _pendingResponseData: 0,
                             _connectionKey: '6::::8080' },
                          _idleTimeout: 120000,
                          _idleNext: 
                           { [Function: utcDate]
                             _onTimeout: [Function],
                             _idleTimeout: 5,
                             _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
                             _idlePrev: [Circular],
                             _idleStart: 995 },
                          _idlePrev: 
                           { _idleNext: [Circular],
                             _idlePrev: 
                              { [Function: utcDate]
                                _onTimeout: [Function],
                                _idleTimeout: 5,
                                _idleNext: [Circular],
                                _idlePrev: [Circular],
                                _idleStart: 995 } },
                          _idleStart: 997,
                          parser: 
                           HTTPParser {
                             '0': [Function: parserOnHeaders],
                             '1': [Function: parserOnHeadersComplete],
                             '2': [Function: parserOnBody],
                             '3': [Function: parserOnMessageComplete],
                             '4': [Function: onParserExecute],
                             _headers: [],
                             _url: '',
                             _consumed: true,
                             socket: [Circular],
                             incoming: [Circular],
                             maxHeaderPairs: 2000,
                             onIncoming: [Function: parserOnIncoming] },
                          on: [Function: socketOnWrap],
                          _paused: false,
                          read: [Function],
                          _consuming: true,
                          _httpMessage: [Circular],
                          _peername: { address: '::1', family: 'IPv6', port: 50070 } },
                       connection: 
                        Socket {
                          _connecting: false,
                          _hadError: false,
                          _handle: 
                           TCP {
                             _externalStream: {},
                             fd: -1,
                             reading: true,
                             owner: [Circular],
                             onread: [Function: onread],
                             onconnection: null,
                             writeQueueSize: 0 },
                          _parent: null,
                          _host: null,
                          _readableState: 
                           ReadableState {
                             objectMode: false,
                             highWaterMark: 16384,
                             buffer: [],
                             length: 0,
                             pipes: null,
                             pipesCount: 0,
                             flowing: true,
                             ended: false,
                             endEmitted: false,
                             reading: true,
                             sync: false,
                             needReadable: true,
                             emittedReadable: false,
                             readableListening: false,
                             resumeScheduled: false,
                             defaultEncoding: 'utf8',
                             ranOut: false,
                             awaitDrain: 0,
                             readingMore: false,
                             decoder: null,
                             encoding: null },
                          readable: true,
                          domain: null,
                          _events: 
                           { end: 
                              [ { [Function: g] listener: [Function: onend] },
                                [Function: socketOnEnd] ],
                             finish: [Function: onSocketFinish],
                             _socketEnd: [Function: onSocketEnd],
                             drain: [ [Function: ondrain], [Function: socketOnDrain] ],
                             timeout: [Function],
                             error: [Function: socketOnError],
                             close: 
                              [ [Function: serverSocketCloseListener],
                                [Function: onServerResponseClose] ],
                             data: [Function: socketOnData],
                             resume: [Function: onSocketResume],
                             pause: [Function: onSocketPause] },
                          _eventsCount: 10,
                          _maxListeners: undefined,
                          _writableState: 
                           WritableState {
                             objectMode: false,
                             highWaterMark: 16384,
                             needDrain: false,
                             ending: false,
                             ended: false,
                             finished: false,
                             decodeStrings: false,
                             defaultEncoding: 'utf8',
                             length: 0,
                             writing: false,
                             corked: 0,
                             sync: false,
                             bufferProcessing: false,
                             onwrite: [Function],
                             writecb: null,
                             writelen: 0,
                             bufferedRequest: null,
                             lastBufferedRequest: null,
                             pendingcb: 3,
                             prefinished: false,
                             errorEmitted: false },
                          writable: true,
                          allowHalfOpen: true,
                          destroyed: false,
                          bytesRead: 0,
                          _bytesDispatched: 311,
                          _sockname: null,
                          _pendingData: null,
                          _pendingEncoding: '',
                          server: 
                           Server {
                             domain: null,
                             _events: 
                              { connection: [Function: connectionListener],
                                clientError: [Function],
                                close: [Function: bound ],
                                upgrade: [Function],
                                request: [Function] },
                             _eventsCount: 5,
                             _maxListeners: undefined,
                             _connections: 1,
                             _handle: 
                              TCP {
                                _externalStream: {},
                                fd: -1,
                                reading: false,
                                owner: [Circular],
                                onread: null,
                                onconnection: [Function: onconnection],
                                writeQueueSize: 0 },
                             _usingSlaves: false,
                             _slaves: [],
                             _unref: false,
                             allowHalfOpen: true,
                             pauseOnConnect: false,
                             httpAllowHalfOpen: false,
                             timeout: 120000,
                             _pendingResponseData: 0,
                             _connectionKey: '6::::8080' },
                          _idleTimeout: 120000,
                          _idleNext: 
                           { [Function: utcDate]
                             _onTimeout: [Function],
                             _idleTimeout: 5,
                             _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
                             _idlePrev: [Circular],
                             _idleStart: 995 },
                          _idlePrev: 
                           { _idleNext: [Circular],
                             _idlePrev: 
                              { [Function: utcDate]
                                _onTimeout: [Function],
                                _idleTimeout: 5,
                                _idleNext: [Circular],
                                _idlePrev: [Circular],
                                _idleStart: 995 } },
                          _idleStart: 997,
                          parser: 
                           HTTPParser {
                             '0': [Function: parserOnHeaders],
                             '1': [Function: parserOnHeadersComplete],
                             '2': [Function: parserOnBody],
                             '3': [Function: parserOnMessageComplete],
                             '4': [Function: onParserExecute],
                             _headers: [],
                             _url: '',
                             _consumed: true,
                             socket: [Circular],
                             incoming: [Circular],
                             maxHeaderPairs: 2000,
                             onIncoming: [Function: parserOnIncoming] },
                          on: [Function: socketOnWrap],
                          _paused: false,
                          read: [Function],
                          _consuming: true,
                          _httpMessage: [Circular],
                          _peername: { address: '::1', family: 'IPv6', port: 50070 } },
                       _header: 'HTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-Length: 101\r\nAccess-Control-Allow-Origin: *\r\nSet-Cookie: io=A6RWxddJuNa2BXdbAAAA\r\nDate: Fri, 25 Mar 2016 05:34:04 GMT\r\nConnection: keep-alive\r\n\r\n',
                       _headers: null,
                       _headerNames: {},
                       _onPendingData: [Function: updateOutgoingData],
                       statusMessage: 'OK',
                       statusCode: 200 },
                    cleanup: [Function: cleanup] },
                 remoteAddress: '::1',
                 checkIntervalTimer: null,
                 upgradeTimeoutTimer: null,
                 pingTimeoutTimer: 
                  { _called: false,
                    _idleTimeout: 85000,
                    _idlePrev: 
                     Timer {
                       '0': [Function: listOnTimeout],
                       _idleNext: [Circular],
                       _idlePrev: [Circular],
                       msecs: 85000 },
                    _idleNext: 
                     Timer {
                       '0': [Function: listOnTimeout],
                       _idleNext: [Circular],
                       _idlePrev: [Circular],
                       msecs: 85000 },
                    _idleStart: 978,
                    _onTimeout: [Function],
                    _repeat: null },
                 transport: 
                  XHR {
                    readyState: 'open',
                    discarded: false,
                    closeTimeout: 30000,
                    maxHttpBufferSize: 100000000,
                    httpCompression: { threshold: 1024 },
                    supportsBinary: true,
                    _events: 
                     { error: { [Function: g] listener: [Function: bound ] },
                       packet: [Function: bound ],
                       drain: [ [Function: bound ], [Function: onDrain] ],
                       close: { [Function: g] listener: [Function: bound ] },
                       headers: [Function] },
                    _eventsCount: 5,
                    sid: 'A6RWxddJuNa2BXdbAAAA',
                    req: null,
                    res: null,
                    writable: false },
                 _events: 
                  { close: [ { [Function: g] listener: [Function] }, [Function: bound ] ],
                    data: [Function: bound ],
                    error: [Function: bound ] },
                 _eventsCount: 3 } },
           clientsCount: 1,
           pingTimeout: 60000,
           pingInterval: 25000,
           upgradeTimeout: 10000,
           maxHttpBufferSize: 100000000,
           transports: [ 'polling', 'websocket' ],
           allowUpgrades: true,
           allowRequest: [Function: bound ],
           cookie: 'io',
           cookiePath: false,
           perMessageDeflate: { threshold: 1024 },
           httpCompression: { threshold: 1024 },
           ws: 
            WebSocketServer {
              domain: null,
              _events: {},
              _eventsCount: 0,
              _maxListeners: undefined,
              options: 
               { host: [Getter],
                 port: [Getter],
                 server: [Getter],
                 verifyClient: [Getter],
                 handleProtocols: [Getter],
                 path: [Getter],
                 noServer: [Getter],
                 disableHixie: [Getter],
                 clientTracking: [Getter],
                 perMessageDeflate: [Getter] },
              path: null,
              clients: [] },
           _events: { connection: [Function: bound ] },
           _eventsCount: 1 },
        httpServer: 
         Server {
           domain: null,
           _events: 
            { connection: [Function: connectionListener],
              clientError: [Function],
              close: [Function: bound ],
              upgrade: [Function],
              request: [Function] },
           _eventsCount: 5,
           _maxListeners: undefined,
           _connections: 1,
           _handle: 
            TCP {
              _externalStream: {},
              fd: -1,
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function: onconnection],
              writeQueueSize: 0 },
           _usingSlaves: false,
           _slaves: [],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           _pendingResponseData: 0,
           _connectionKey: '6::::8080' },
        engine: 
         Server {
           clients: 
            { A6RWxddJuNa2BXdbAAAA: 
               Socket {
                 id: 'A6RWxddJuNa2BXdbAAAA',
                 server: [Circular],
                 upgrading: false,
                 upgraded: false,
                 readyState: 'open',
                 writeBuffer: [],
                 packetsFn: [],
                 sentCallbackFn: [],
                 cleanupFn: [ [Function], [Function] ],
                 request: 
                  IncomingMessage {
                    _readableState: 
                     ReadableState {
                       objectMode: false,
                       highWaterMark: 16384,
                       buffer: [],
                       length: 0,
                       pipes: null,
                       pipesCount: 0,
                       flowing: null,
                       ended: false,
                       endEmitted: false,
                       reading: false,
                       sync: true,
                       needReadable: false,
                       emittedReadable: false,
                       readableListening: false,
                       resumeScheduled: false,
                       defaultEncoding: 'utf8',
                       ranOut: false,
                       awaitDrain: 0,
                       readingMore: false,
                       decoder: null,
                       encoding: null },
                    readable: true,
                    domain: null,
                    _events: {},
                    _eventsCount: 0,
                    _maxListeners: undefined,
                    socket: 
                     Socket {
                       _connecting: false,
                       _hadError: false,
                       _handle: 
                        TCP {
                          _externalStream: {},
                          fd: -1,
                          reading: true,
                          owner: [Circular],
                          onread: [Function: onread],
                          onconnection: null,
                          writeQueueSize: 0 },
                       _parent: null,
                       _host: null,
                       _readableState: 
                        ReadableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          buffer: [],
                          length: 0,
                          pipes: null,
                          pipesCount: 0,
                          flowing: true,
                          ended: false,
                          endEmitted: false,
                          reading: true,
                          sync: false,
                          needReadable: true,
                          emittedReadable: false,
                          readableListening: false,
                          resumeScheduled: false,
                          defaultEncoding: 'utf8',
                          ranOut: false,
                          awaitDrain: 0,
                          readingMore: false,
                          decoder: null,
                          encoding: null },
                       readable: true,
                       domain: null,
                       _events: 
                        { end: 
                           [ { [Function: g] listener: [Function: onend] },
                             [Function: socketOnEnd] ],
                          finish: [Function: onSocketFinish],
                          _socketEnd: [Function: onSocketEnd],
                          drain: [ [Function: ondrain], [Function: socketOnDrain] ],
                          timeout: [Function],
                          error: [Function: socketOnError],
                          close: 
                           [ [Function: serverSocketCloseListener],
                             [Function: onServerResponseClose] ],
                          data: [Function: socketOnData],
                          resume: [Function: onSocketResume],
                          pause: [Function: onSocketPause] },
                       _eventsCount: 10,
                       _maxListeners: undefined,
                       _writableState: 
                        WritableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          needDrain: false,
                          ending: false,
                          ended: false,
                          finished: false,
                          decodeStrings: false,
                          defaultEncoding: 'utf8',
                          length: 0,
                          writing: false,
                          corked: 0,
                          sync: false,
                          bufferProcessing: false,
                          onwrite: [Function],
                          writecb: null,
                          writelen: 0,
                          bufferedRequest: null,
                          lastBufferedRequest: null,
                          pendingcb: 3,
                          prefinished: false,
                          errorEmitted: false },
                       writable: true,
                       allowHalfOpen: true,
                       destroyed: false,
                       bytesRead: 0,
                       _bytesDispatched: 311,
                       _sockname: null,
                       _pendingData: null,
                       _pendingEncoding: '',
                       server: 
                        Server {
                          domain: null,
                          _events: 
                           { connection: [Function: connectionListener],
                             clientError: [Function],
                             close: [Function: bound ],
                             upgrade: [Function],
                             request: [Function] },
                          _eventsCount: 5,
                          _maxListeners: undefined,
                          _connections: 1,
                          _handle: 
                           TCP {
                             _externalStream: {},
                             fd: -1,
                             reading: false,
                             owner: [Circular],
                             onread: null,
                             onconnection: [Function: onconnection],
                             writeQueueSize: 0 },
                          _usingSlaves: false,
                          _slaves: [],
                          _unref: false,
                          allowHalfOpen: true,
                          pauseOnConnect: false,
                          httpAllowHalfOpen: false,
                          timeout: 120000,
                          _pendingResponseData: 0,
                          _connectionKey: '6::::8080' },
                       _idleTimeout: 120000,
                       _idleNext: 
                        { [Function: utcDate]
                          _onTimeout: [Function],
                          _idleTimeout: 5,
                          _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
                          _idlePrev: [Circular],
                          _idleStart: 995 },
                       _idlePrev: 
                        { _idleNext: [Circular],
                          _idlePrev: 
                           { [Function: utcDate]
                             _onTimeout: [Function],
                             _idleTimeout: 5,
                             _idleNext: [Circular],
                             _idlePrev: [Circular],
                             _idleStart: 995 } },
                       _idleStart: 997,
                       parser: 
                        HTTPParser {
                          '0': [Function: parserOnHeaders],
                          '1': [Function: parserOnHeadersComplete],
                          '2': [Function: parserOnBody],
                          '3': [Function: parserOnMessageComplete],
                          '4': [Function: onParserExecute],
                          _headers: [],
                          _url: '',
                          _consumed: true,
                          socket: [Circular],
                          incoming: [Circular],
                          maxHeaderPairs: 2000,
                          onIncoming: [Function: parserOnIncoming] },
                       on: [Function: socketOnWrap],
                       _paused: false,
                       read: [Function],
                       _consuming: true,
                       _httpMessage: 
                        ServerResponse {
                          domain: null,
                          _events: { finish: [Function: resOnFinish] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          output: [],
                          outputEncodings: [],
                          outputCallbacks: [],
                          outputSize: 0,
                          writable: true,
                          _last: false,
                          chunkedEncoding: false,
                          shouldKeepAlive: true,
                          useChunkedEncodingByDefault: true,
                          sendDate: true,
                          _removedHeader: {},
                          _contentLength: null,
                          _hasBody: true,
                          _trailer: '',
                          finished: true,
                          _headerSent: true,
                          socket: [Circular],
                          connection: [Circular],
                          _header: 'HTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-Length: 101\r\nAccess-Control-Allow-Origin: *\r\nSet-Cookie: io=A6RWxddJuNa2BXdbAAAA\r\nDate: Fri, 25 Mar 2016 05:34:04 GMT\r\nConnection: keep-alive\r\n\r\n',
                          _headers: null,
                          _headerNames: {},
                          _onPendingData: [Function: updateOutgoingData],
                          statusMessage: 'OK',
                          statusCode: 200 },
                       _peername: { address: '::1', family: 'IPv6', port: 50070 } },
                    connection: 
                     Socket {
                       _connecting: false,
                       _hadError: false,
                       _handle: 
                        TCP {
                          _externalStream: {},
                          fd: -1,
                          reading: true,
                          owner: [Circular],
                          onread: [Function: onread],
                          onconnection: null,
                          writeQueueSize: 0 },
                       _parent: null,
                       _host: null,
                       _readableState: 
                        ReadableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          buffer: [],
                          length: 0,
                          pipes: null,
                          pipesCount: 0,
                          flowing: true,
                          ended: false,
                          endEmitted: false,
                          reading: true,
                          sync: false,
                          needReadable: true,
                          emittedReadable: false,
                          readableListening: false,
                          resumeScheduled: false,
                          defaultEncoding: 'utf8',
                          ranOut: false,
                          awaitDrain: 0,
                          readingMore: false,
                          decoder: null,
                          encoding: null },
                       readable: true,
                       domain: null,
                       _events: 
                        { end: 
                           [ { [Function: g] listener: [Function: onend] },
                             [Function: socketOnEnd] ],
                          finish: [Function: onSocketFinish],
                          _socketEnd: [Function: onSocketEnd],
                          drain: [ [Function: ondrain], [Function: socketOnDrain] ],
                          timeout: [Function],
                          error: [Function: socketOnError],
                          close: 
                           [ [Function: serverSocketCloseListener],
                             [Function: onServerResponseClose] ],
                          data: [Function: socketOnData],
                          resume: [Function: onSocketResume],
                          pause: [Function: onSocketPause] },
                       _eventsCount: 10,
                       _maxListeners: undefined,
                       _writableState: 
                        WritableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          needDrain: false,
                          ending: false,
                          ended: false,
                          finished: false,
                          decodeStrings: false,
                          defaultEncoding: 'utf8',
                          length: 0,
                          writing: false,
                          corked: 0,
                          sync: false,
                          bufferProcessing: false,
                          onwrite: [Function],
                          writecb: null,
                          writelen: 0,
                          bufferedRequest: null,
                          lastBufferedRequest: null,
                          pendingcb: 3,
                          prefinished: false,
                          errorEmitted: false },
                       writable: true,
                       allowHalfOpen: true,
                       destroyed: false,
                       bytesRead: 0,
                       _bytesDispatched: 311,
                       _sockname: null,
                       _pendingData: null,
                       _pendingEncoding: '',
                       server: 
                        Server {
                          domain: null,
                          _events: 
                           { connection: [Function: connectionListener],
                             clientError: [Function],
                             close: [Function: bound ],
                             upgrade: [Function],
                             request: [Function] },
                          _eventsCount: 5,
                          _maxListeners: undefined,
                          _connections: 1,
                          _handle: 
                           TCP {
                             _externalStream: {},
                             fd: -1,
                             reading: false,
                             owner: [Circular],
                             onread: null,
                             onconnection: [Function: onconnection],
                             writeQueueSize: 0 },
                          _usingSlaves: false,
                          _slaves: [],
                          _unref: false,
                          allowHalfOpen: true,
                          pauseOnConnect: false,
                          httpAllowHalfOpen: false,
                          timeout: 120000,
                          _pendingResponseData: 0,
                          _connectionKey: '6::::8080' },
                       _idleTimeout: 120000,
                       _idleNext: 
                        { [Function: utcDate]
                          _onTimeout: [Function],
                          _idleTimeout: 5,
                          _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
                          _idlePrev: [Circular],
                          _idleStart: 995 },
                       _idlePrev: 
                        { _idleNext: [Circular],
                          _idlePrev: 
                           { [Function: utcDate]
                             _onTimeout: [Function],
                             _idleTimeout: 5,
                             _idleNext: [Circular],
                             _idlePrev: [Circular],
                             _idleStart: 995 } },
                       _idleStart: 997,
                       parser: 
                        HTTPParser {
                          '0': [Function: parserOnHeaders],
                          '1': [Function: parserOnHeadersComplete],
                          '2': [Function: parserOnBody],
                          '3': [Function: parserOnMessageComplete],
                          '4': [Function: onParserExecute],
                          _headers: [],
                          _url: '',
                          _consumed: true,
                          socket: [Circular],
                          incoming: [Circular],
                          maxHeaderPairs: 2000,
                          onIncoming: [Function: parserOnIncoming] },
                       on: [Function: socketOnWrap],
                       _paused: false,
                       read: [Function],
                       _consuming: true,
                       _httpMessage: 
                        ServerResponse {
                          domain: null,
                          _events: { finish: [Function: resOnFinish] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          output: [],
                          outputEncodings: [],
                          outputCallbacks: [],
                          outputSize: 0,
                          writable: true,
                          _last: false,
                          chunkedEncoding: false,
                          shouldKeepAlive: true,
                          useChunkedEncodingByDefault: true,
                          sendDate: true,
                          _removedHeader: {},
                          _contentLength: null,
                          _hasBody: true,
                          _trailer: '',
                          finished: true,
                          _headerSent: true,
                          socket: [Circular],
                          connection: [Circular],
                          _header: 'HTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-Length: 101\r\nAccess-Control-Allow-Origin: *\r\nSet-Cookie: io=A6RWxddJuNa2BXdbAAAA\r\nDate: Fri, 25 Mar 2016 05:34:04 GMT\r\nConnection: keep-alive\r\n\r\n',
                          _headers: null,
                          _headerNames: {},
                          _onPendingData: [Function: updateOutgoingData],
                          statusMessage: 'OK',
                          statusCode: 200 },
                       _peername: { address: '::1', family: 'IPv6', port: 50070 } },
                    httpVersionMajor: 1,
                    httpVersionMinor: 1,
                    httpVersion: '1.1',
                    complete: false,
                    headers: 
                     { host: 'localhost:8080',
                       connection: 'keep-alive',
                       pragma: 'no-cache',
                       'cache-control': 'no-cache',
                       'user-agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.132 Safari/537.36',
                       accept: '*/*',
                       referer: 'http://localhost:8080/',
                       'accept-encoding': 'gzip, deflate, sdch',
                       'accept-language': 'zh-CN,zh;q=0.8,en;q=0.6',
                       cookie: 'io=B5ehkX7J-gME2Jd5AAAA; amvid=7b2309f47fa4b428ae50a46e3d3c4381' },
                    rawHeaders: 
                     [ 'Host',
                       'localhost:8080',
                       'Connection',
                       'keep-alive',
                       'Pragma',
                       'no-cache',
                       'Cache-Control',
                       'no-cache',
                       'User-Agent',
                       'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.132 Safari/537.36',
                       'Accept',
                       '*/*',
                       'Referer',
                       'http://localhost:8080/',
                       'Accept-Encoding',
                       'gzip, deflate, sdch',
                       'Accept-Language',
                       'zh-CN,zh;q=0.8,en;q=0.6',
                       'Cookie',
                       'io=B5ehkX7J-gME2Jd5AAAA; amvid=7b2309f47fa4b428ae50a46e3d3c4381' ],
                    trailers: {},
                    rawTrailers: [],
                    upgrade: false,
                    url: '/socket.io/?EIO=3&transport=polling&t=LEiG-Ij',
                    method: 'GET',
                    statusCode: null,
                    statusMessage: null,
                    client: 
                     Socket {
                       _connecting: false,
                       _hadError: false,
                       _handle: 
                        TCP {
                          _externalStream: {},
                          fd: -1,
                          reading: true,
                          owner: [Circular],
                          onread: [Function: onread],
                          onconnection: null,
                          writeQueueSize: 0 },
                       _parent: null,
                       _host: null,
                       _readableState: 
                        ReadableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          buffer: [],
                          length: 0,
                          pipes: null,
                          pipesCount: 0,
                          flowing: true,
                          ended: false,
                          endEmitted: false,
                          reading: true,
                          sync: false,
                          needReadable: true,
                          emittedReadable: false,
                          readableListening: false,
                          resumeScheduled: false,
                          defaultEncoding: 'utf8',
                          ranOut: false,
                          awaitDrain: 0,
                          readingMore: false,
                          decoder: null,
                          encoding: null },
                       readable: true,
                       domain: null,
                       _events: 
                        { end: 
                           [ { [Function: g] listener: [Function: onend] },
                             [Function: socketOnEnd] ],
                          finish: [Function: onSocketFinish],
                          _socketEnd: [Function: onSocketEnd],
                          drain: [ [Function: ondrain], [Function: socketOnDrain] ],
                          timeout: [Function],
                          error: [Function: socketOnError],
                          close: 
                           [ [Function: serverSocketCloseListener],
                             [Function: onServerResponseClose] ],
                          data: [Function: socketOnData],
                          resume: [Function: onSocketResume],
                          pause: [Function: onSocketPause] },
                       _eventsCount: 10,
                       _maxListeners: undefined,
                       _writableState: 
                        WritableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          needDrain: false,
                          ending: false,
                          ended: false,
                          finished: false,
                          decodeStrings: false,
                          defaultEncoding: 'utf8',
                          length: 0,
                          writing: false,
                          corked: 0,
                          sync: false,
                          bufferProcessing: false,
                          onwrite: [Function],
                          writecb: null,
                          writelen: 0,
                          bufferedRequest: null,
                          lastBufferedRequest: null,
                          pendingcb: 3,
                          prefinished: false,
                          errorEmitted: false },
                       writable: true,
                       allowHalfOpen: true,
                       destroyed: false,
                       bytesRead: 0,
                       _bytesDispatched: 311,
                       _sockname: null,
                       _pendingData: null,
                       _pendingEncoding: '',
                       server: 
                        Server {
                          domain: null,
                          _events: 
                           { connection: [Function: connectionListener],
                             clientError: [Function],
                             close: [Function: bound ],
                             upgrade: [Function],
                             request: [Function] },
                          _eventsCount: 5,
                          _maxListeners: undefined,
                          _connections: 1,
                          _handle: 
                           TCP {
                             _externalStream: {},
                             fd: -1,
                             reading: false,
                             owner: [Circular],
                             onread: null,
                             onconnection: [Function: onconnection],
                             writeQueueSize: 0 },
                          _usingSlaves: false,
                          _slaves: [],
                          _unref: false,
                          allowHalfOpen: true,
                          pauseOnConnect: false,
                          httpAllowHalfOpen: false,
                          timeout: 120000,
                          _pendingResponseData: 0,
                          _connectionKey: '6::::8080' },
                       _idleTimeout: 120000,
                       _idleNext: 
                        { [Function: utcDate]
                          _onTimeout: [Function],
                          _idleTimeout: 5,
                          _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
                          _idlePrev: [Circular],
                          _idleStart: 995 },
                       _idlePrev: 
                        { _idleNext: [Circular],
                          _idlePrev: 
                           { [Function: utcDate]
                             _onTimeout: [Function],
                             _idleTimeout: 5,
                             _idleNext: [Circular],
                             _idlePrev: [Circular],
                             _idleStart: 995 } },
                       _idleStart: 997,
                       parser: 
                        HTTPParser {
                          '0': [Function: parserOnHeaders],
                          '1': [Function: parserOnHeadersComplete],
                          '2': [Function: parserOnBody],
                          '3': [Function: parserOnMessageComplete],
                          '4': [Function: onParserExecute],
                          _headers: [],
                          _url: '',
                          _consumed: true,
                          socket: [Circular],
                          incoming: [Circular],
                          maxHeaderPairs: 2000,
                          onIncoming: [Function: parserOnIncoming] },
                       on: [Function: socketOnWrap],
                       _paused: false,
                       read: [Function],
                       _consuming: true,
                       _httpMessage: 
                        ServerResponse {
                          domain: null,
                          _events: { finish: [Function: resOnFinish] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          output: [],
                          outputEncodings: [],
                          outputCallbacks: [],
                          outputSize: 0,
                          writable: true,
                          _last: false,
                          chunkedEncoding: false,
                          shouldKeepAlive: true,
                          useChunkedEncodingByDefault: true,
                          sendDate: true,
                          _removedHeader: {},
                          _contentLength: null,
                          _hasBody: true,
                          _trailer: '',
                          finished: true,
                          _headerSent: true,
                          socket: [Circular],
                          connection: [Circular],
                          _header: 'HTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-Length: 101\r\nAccess-Control-Allow-Origin: *\r\nSet-Cookie: io=A6RWxddJuNa2BXdbAAAA\r\nDate: Fri, 25 Mar 2016 05:34:04 GMT\r\nConnection: keep-alive\r\n\r\n',
                          _headers: null,
                          _headerNames: {},
                          _onPendingData: [Function: updateOutgoingData],
                          statusMessage: 'OK',
                          statusCode: 200 },
                       _peername: { address: '::1', family: 'IPv6', port: 50070 } },
                    _consuming: false,
                    _dumped: false,
                    _query: { EIO: '3', transport: 'polling', t: 'LEiG-Ij' },
                    res: 
                     ServerResponse {
                       domain: null,
                       _events: { finish: [Function: resOnFinish] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       output: [],
                       outputEncodings: [],
                       outputCallbacks: [],
                       outputSize: 0,
                       writable: true,
                       _last: false,
                       chunkedEncoding: false,
                       shouldKeepAlive: true,
                       useChunkedEncodingByDefault: true,
                       sendDate: true,
                       _removedHeader: {},
                       _contentLength: null,
                       _hasBody: true,
                       _trailer: '',
                       finished: true,
                       _headerSent: true,
                       socket: 
                        Socket {
                          _connecting: false,
                          _hadError: false,
                          _handle: 
                           TCP {
                             _externalStream: {},
                             fd: -1,
                             reading: true,
                             owner: [Circular],
                             onread: [Function: onread],
                             onconnection: null,
                             writeQueueSize: 0 },
                          _parent: null,
                          _host: null,
                          _readableState: 
                           ReadableState {
                             objectMode: false,
                             highWaterMark: 16384,
                             buffer: [],
                             length: 0,
                             pipes: null,
                             pipesCount: 0,
                             flowing: true,
                             ended: false,
                             endEmitted: false,
                             reading: true,
                             sync: false,
                             needReadable: true,
                             emittedReadable: false,
                             readableListening: false,
                             resumeScheduled: false,
                             defaultEncoding: 'utf8',
                             ranOut: false,
                             awaitDrain: 0,
                             readingMore: false,
                             decoder: null,
                             encoding: null },
                          readable: true,
                          domain: null,
                          _events: 
                           { end: 
                              [ { [Function: g] listener: [Function: onend] },
                                [Function: socketOnEnd] ],
                             finish: [Function: onSocketFinish],
                             _socketEnd: [Function: onSocketEnd],
                             drain: [ [Function: ondrain], [Function: socketOnDrain] ],
                             timeout: [Function],
                             error: [Function: socketOnError],
                             close: 
                              [ [Function: serverSocketCloseListener],
                                [Function: onServerResponseClose] ],
                             data: [Function: socketOnData],
                             resume: [Function: onSocketResume],
                             pause: [Function: onSocketPause] },
                          _eventsCount: 10,
                          _maxListeners: undefined,
                          _writableState: 
                           WritableState {
                             objectMode: false,
                             highWaterMark: 16384,
                             needDrain: false,
                             ending: false,
                             ended: false,
                             finished: false,
                             decodeStrings: false,
                             defaultEncoding: 'utf8',
                             length: 0,
                             writing: false,
                             corked: 0,
                             sync: false,
                             bufferProcessing: false,
                             onwrite: [Function],
                             writecb: null,
                             writelen: 0,
                             bufferedRequest: null,
                             lastBufferedRequest: null,
                             pendingcb: 3,
                             prefinished: false,
                             errorEmitted: false },
                          writable: true,
                          allowHalfOpen: true,
                          destroyed: false,
                          bytesRead: 0,
                          _bytesDispatched: 311,
                          _sockname: null,
                          _pendingData: null,
                          _pendingEncoding: '',
                          server: 
                           Server {
                             domain: null,
                             _events: 
                              { connection: [Function: connectionListener],
                                clientError: [Function],
                                close: [Function: bound ],
                                upgrade: [Function],
                                request: [Function] },
                             _eventsCount: 5,
                             _maxListeners: undefined,
                             _connections: 1,
                             _handle: 
                              TCP {
                                _externalStream: {},
                                fd: -1,
                                reading: false,
                                owner: [Circular],
                                onread: null,
                                onconnection: [Function: onconnection],
                                writeQueueSize: 0 },
                             _usingSlaves: false,
                             _slaves: [],
                             _unref: false,
                             allowHalfOpen: true,
                             pauseOnConnect: false,
                             httpAllowHalfOpen: false,
                             timeout: 120000,
                             _pendingResponseData: 0,
                             _connectionKey: '6::::8080' },
                          _idleTimeout: 120000,
                          _idleNext: 
                           { [Function: utcDate]
                             _onTimeout: [Function],
                             _idleTimeout: 5,
                             _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
                             _idlePrev: [Circular],
                             _idleStart: 995 },
                          _idlePrev: 
                           { _idleNext: [Circular],
                             _idlePrev: 
                              { [Function: utcDate]
                                _onTimeout: [Function],
                                _idleTimeout: 5,
                                _idleNext: [Circular],
                                _idlePrev: [Circular],
                                _idleStart: 995 } },
                          _idleStart: 997,
                          parser: 
                           HTTPParser {
                             '0': [Function: parserOnHeaders],
                             '1': [Function: parserOnHeadersComplete],
                             '2': [Function: parserOnBody],
                             '3': [Function: parserOnMessageComplete],
                             '4': [Function: onParserExecute],
                             _headers: [],
                             _url: '',
                             _consumed: true,
                             socket: [Circular],
                             incoming: [Circular],
                             maxHeaderPairs: 2000,
                             onIncoming: [Function: parserOnIncoming] },
                          on: [Function: socketOnWrap],
                          _paused: false,
                          read: [Function],
                          _consuming: true,
                          _httpMessage: [Circular],
                          _peername: { address: '::1', family: 'IPv6', port: 50070 } },
                       connection: 
                        Socket {
                          _connecting: false,
                          _hadError: false,
                          _handle: 
                           TCP {
                             _externalStream: {},
                             fd: -1,
                             reading: true,
                             owner: [Circular],
                             onread: [Function: onread],
                             onconnection: null,
                             writeQueueSize: 0 },
                          _parent: null,
                          _host: null,
                          _readableState: 
                           ReadableState {
                             objectMode: false,
                             highWaterMark: 16384,
                             buffer: [],
                             length: 0,
                             pipes: null,
                             pipesCount: 0,
                             flowing: true,
                             ended: false,
                             endEmitted: false,
                             reading: true,
                             sync: false,
                             needReadable: true,
                             emittedReadable: false,
                             readableListening: false,
                             resumeScheduled: false,
                             defaultEncoding: 'utf8',
                             ranOut: false,
                             awaitDrain: 0,
                             readingMore: false,
                             decoder: null,
                             encoding: null },
                          readable: true,
                          domain: null,
                          _events: 
                           { end: 
                              [ { [Function: g] listener: [Function: onend] },
                                [Function: socketOnEnd] ],
                             finish: [Function: onSocketFinish],
                             _socketEnd: [Function: onSocketEnd],
                             drain: [ [Function: ondrain], [Function: socketOnDrain] ],
                             timeout: [Function],
                             error: [Function: socketOnError],
                             close: 
                              [ [Function: serverSocketCloseListener],
                                [Function: onServerResponseClose] ],
                             data: [Function: socketOnData],
                             resume: [Function: onSocketResume],
                             pause: [Function: onSocketPause] },
                          _eventsCount: 10,
                          _maxListeners: undefined,
                          _writableState: 
                           WritableState {
                             objectMode: false,
                             highWaterMark: 16384,
                             needDrain: false,
                             ending: false,
                             ended: false,
                             finished: false,
                             decodeStrings: false,
                             defaultEncoding: 'utf8',
                             length: 0,
                             writing: false,
                             corked: 0,
                             sync: false,
                             bufferProcessing: false,
                             onwrite: [Function],
                             writecb: null,
                             writelen: 0,
                             bufferedRequest: null,
                             lastBufferedRequest: null,
                             pendingcb: 3,
                             prefinished: false,
                             errorEmitted: false },
                          writable: true,
                          allowHalfOpen: true,
                          destroyed: false,
                          bytesRead: 0,
                          _bytesDispatched: 311,
                          _sockname: null,
                          _pendingData: null,
                          _pendingEncoding: '',
                          server: 
                           Server {
                             domain: null,
                             _events: 
                              { connection: [Function: connectionListener],
                                clientError: [Function],
                                close: [Function: bound ],
                                upgrade: [Function],
                                request: [Function] },
                             _eventsCount: 5,
                             _maxListeners: undefined,
                             _connections: 1,
                             _handle: 
                              TCP {
                                _externalStream: {},
                                fd: -1,
                                reading: false,
                                owner: [Circular],
                                onread: null,
                                onconnection: [Function: onconnection],
                                writeQueueSize: 0 },
                             _usingSlaves: false,
                             _slaves: [],
                             _unref: false,
                             allowHalfOpen: true,
                             pauseOnConnect: false,
                             httpAllowHalfOpen: false,
                             timeout: 120000,
                             _pendingResponseData: 0,
                             _connectionKey: '6::::8080' },
                          _idleTimeout: 120000,
                          _idleNext: 
                           { [Function: utcDate]
                             _onTimeout: [Function],
                             _idleTimeout: 5,
                             _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
                             _idlePrev: [Circular],
                             _idleStart: 995 },
                          _idlePrev: 
                           { _idleNext: [Circular],
                             _idlePrev: 
                              { [Function: utcDate]
                                _onTimeout: [Function],
                                _idleTimeout: 5,
                                _idleNext: [Circular],
                                _idlePrev: [Circular],
                                _idleStart: 995 } },
                          _idleStart: 997,
                          parser: 
                           HTTPParser {
                             '0': [Function: parserOnHeaders],
                             '1': [Function: parserOnHeadersComplete],
                             '2': [Function: parserOnBody],
                             '3': [Function: parserOnMessageComplete],
                             '4': [Function: onParserExecute],
                             _headers: [],
                             _url: '',
                             _consumed: true,
                             socket: [Circular],
                             incoming: [Circular],
                             maxHeaderPairs: 2000,
                             onIncoming: [Function: parserOnIncoming] },
                          on: [Function: socketOnWrap],
                          _paused: false,
                          read: [Function],
                          _consuming: true,
                          _httpMessage: [Circular],
                          _peername: { address: '::1', family: 'IPv6', port: 50070 } },
                       _header: 'HTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-Length: 101\r\nAccess-Control-Allow-Origin: *\r\nSet-Cookie: io=A6RWxddJuNa2BXdbAAAA\r\nDate: Fri, 25 Mar 2016 05:34:04 GMT\r\nConnection: keep-alive\r\n\r\n',
                       _headers: null,
                       _headerNames: {},
                       _onPendingData: [Function: updateOutgoingData],
                       statusMessage: 'OK',
                       statusCode: 200 },
                    cleanup: [Function: cleanup] },
                 remoteAddress: '::1',
                 checkIntervalTimer: null,
                 upgradeTimeoutTimer: null,
                 pingTimeoutTimer: 
                  { _called: false,
                    _idleTimeout: 85000,
                    _idlePrev: 
                     Timer {
                       '0': [Function: listOnTimeout],
                       _idleNext: [Circular],
                       _idlePrev: [Circular],
                       msecs: 85000 },
                    _idleNext: 
                     Timer {
                       '0': [Function: listOnTimeout],
                       _idleNext: [Circular],
                       _idlePrev: [Circular],
                       msecs: 85000 },
                    _idleStart: 978,
                    _onTimeout: [Function],
                    _repeat: null },
                 transport: 
                  XHR {
                    readyState: 'open',
                    discarded: false,
                    closeTimeout: 30000,
                    maxHttpBufferSize: 100000000,
                    httpCompression: { threshold: 1024 },
                    supportsBinary: true,
                    _events: 
                     { error: { [Function: g] listener: [Function: bound ] },
                       packet: [Function: bound ],
                       drain: [ [Function: bound ], [Function: onDrain] ],
                       close: { [Function: g] listener: [Function: bound ] },
                       headers: [Function] },
                    _eventsCount: 5,
                    sid: 'A6RWxddJuNa2BXdbAAAA',
                    req: null,
                    res: null,
                    writable: false },
                 _events: 
                  { close: [ { [Function: g] listener: [Function] }, [Function: bound ] ],
                    data: [Function: bound ],
                    error: [Function: bound ] },
                 _eventsCount: 3 } },
           clientsCount: 1,
           pingTimeout: 60000,
           pingInterval: 25000,
           upgradeTimeout: 10000,
           maxHttpBufferSize: 100000000,
           transports: [ 'polling', 'websocket' ],
           allowUpgrades: true,
           allowRequest: [Function: bound ],
           cookie: 'io',
           cookiePath: false,
           perMessageDeflate: { threshold: 1024 },
           httpCompression: { threshold: 1024 },
           ws: 
            WebSocketServer {
              domain: null,
              _events: {},
              _eventsCount: 0,
              _maxListeners: undefined,
              options: 
               { host: [Getter],
                 port: [Getter],
                 server: [Getter],
                 verifyClient: [Getter],
                 handleProtocols: [Getter],
                 path: [Getter],
                 noServer: [Getter],
                 disableHixie: [Getter],
                 clientTracking: [Getter],
                 perMessageDeflate: [Getter] },
              path: null,
              clients: [] },
           _events: { connection: [Function: bound ] },
           _eventsCount: 1 } },
     conn: 
      Socket {
        id: 'A6RWxddJuNa2BXdbAAAA',
        server: 
         Server {
           clients: { A6RWxddJuNa2BXdbAAAA: [Circular] },
           clientsCount: 1,
           pingTimeout: 60000,
           pingInterval: 25000,
           upgradeTimeout: 10000,
           maxHttpBufferSize: 100000000,
           transports: [ 'polling', 'websocket' ],
           allowUpgrades: true,
           allowRequest: [Function: bound ],
           cookie: 'io',
           cookiePath: false,
           perMessageDeflate: { threshold: 1024 },
           httpCompression: { threshold: 1024 },
           ws: 
            WebSocketServer {
              domain: null,
              _events: {},
              _eventsCount: 0,
              _maxListeners: undefined,
              options: 
               { host: [Getter],
                 port: [Getter],
                 server: [Getter],
                 verifyClient: [Getter],
                 handleProtocols: [Getter],
                 path: [Getter],
                 noServer: [Getter],
                 disableHixie: [Getter],
                 clientTracking: [Getter],
                 perMessageDeflate: [Getter] },
              path: null,
              clients: [] },
           _events: { connection: [Function: bound ] },
           _eventsCount: 1 },
        upgrading: false,
        upgraded: false,
        readyState: 'open',
        writeBuffer: [],
        packetsFn: [],
        sentCallbackFn: [],
        cleanupFn: [ [Function], [Function] ],
        request: 
         IncomingMessage {
           _readableState: 
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: [],
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: null,
              ended: false,
              endEmitted: false,
              reading: false,
              sync: true,
              needReadable: false,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              defaultEncoding: 'utf8',
              ranOut: false,
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           domain: null,
           _events: {},
           _eventsCount: 0,
           _maxListeners: undefined,
           socket: 
            Socket {
              _connecting: false,
              _hadError: false,
              _handle: 
               TCP {
                 _externalStream: {},
                 fd: -1,
                 reading: true,
                 owner: [Circular],
                 onread: [Function: onread],
                 onconnection: null,
                 writeQueueSize: 0 },
              _parent: null,
              _host: null,
              _readableState: 
               ReadableState {
                 objectMode: false,
                 highWaterMark: 16384,
                 buffer: [],
                 length: 0,
                 pipes: null,
                 pipesCount: 0,
                 flowing: true,
                 ended: false,
                 endEmitted: false,
                 reading: true,
                 sync: false,
                 needReadable: true,
                 emittedReadable: false,
                 readableListening: false,
                 resumeScheduled: false,
                 defaultEncoding: 'utf8',
                 ranOut: false,
                 awaitDrain: 0,
                 readingMore: false,
                 decoder: null,
                 encoding: null },
              readable: true,
              domain: null,
              _events: 
               { end: 
                  [ { [Function: g] listener: [Function: onend] },
                    [Function: socketOnEnd] ],
                 finish: [Function: onSocketFinish],
                 _socketEnd: [Function: onSocketEnd],
                 drain: [ [Function: ondrain], [Function: socketOnDrain] ],
                 timeout: [Function],
                 error: [Function: socketOnError],
                 close: 
                  [ [Function: serverSocketCloseListener],
                    [Function: onServerResponseClose] ],
                 data: [Function: socketOnData],
                 resume: [Function: onSocketResume],
                 pause: [Function: onSocketPause] },
              _eventsCount: 10,
              _maxListeners: undefined,
              _writableState: 
               WritableState {
                 objectMode: false,
                 highWaterMark: 16384,
                 needDrain: false,
                 ending: false,
                 ended: false,
                 finished: false,
                 decodeStrings: false,
                 defaultEncoding: 'utf8',
                 length: 0,
                 writing: false,
                 corked: 0,
                 sync: false,
                 bufferProcessing: false,
                 onwrite: [Function],
                 writecb: null,
                 writelen: 0,
                 bufferedRequest: null,
                 lastBufferedRequest: null,
                 pendingcb: 3,
                 prefinished: false,
                 errorEmitted: false },
              writable: true,
              allowHalfOpen: true,
              destroyed: false,
              bytesRead: 0,
              _bytesDispatched: 311,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: 
               Server {
                 domain: null,
                 _events: 
                  { connection: [Function: connectionListener],
                    clientError: [Function],
                    close: [Function: bound ],
                    upgrade: [Function],
                    request: [Function] },
                 _eventsCount: 5,
                 _maxListeners: undefined,
                 _connections: 1,
                 _handle: 
                  TCP {
                    _externalStream: {},
                    fd: -1,
                    reading: false,
                    owner: [Circular],
                    onread: null,
                    onconnection: [Function: onconnection],
                    writeQueueSize: 0 },
                 _usingSlaves: false,
                 _slaves: [],
                 _unref: false,
                 allowHalfOpen: true,
                 pauseOnConnect: false,
                 httpAllowHalfOpen: false,
                 timeout: 120000,
                 _pendingResponseData: 0,
                 _connectionKey: '6::::8080' },
              _idleTimeout: 120000,
              _idleNext: 
               { [Function: utcDate]
                 _onTimeout: [Function],
                 _idleTimeout: 5,
                 _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
                 _idlePrev: [Circular],
                 _idleStart: 995 },
              _idlePrev: 
               { _idleNext: [Circular],
                 _idlePrev: 
                  { [Function: utcDate]
                    _onTimeout: [Function],
                    _idleTimeout: 5,
                    _idleNext: [Circular],
                    _idlePrev: [Circular],
                    _idleStart: 995 } },
              _idleStart: 997,
              parser: 
               HTTPParser {
                 '0': [Function: parserOnHeaders],
                 '1': [Function: parserOnHeadersComplete],
                 '2': [Function: parserOnBody],
                 '3': [Function: parserOnMessageComplete],
                 '4': [Function: onParserExecute],
                 _headers: [],
                 _url: '',
                 _consumed: true,
                 socket: [Circular],
                 incoming: [Circular],
                 maxHeaderPairs: 2000,
                 onIncoming: [Function: parserOnIncoming] },
              on: [Function: socketOnWrap],
              _paused: false,
              read: [Function],
              _consuming: true,
              _httpMessage: 
               ServerResponse {
                 domain: null,
                 _events: { finish: [Function: resOnFinish] },
                 _eventsCount: 1,
                 _maxListeners: undefined,
                 output: [],
                 outputEncodings: [],
                 outputCallbacks: [],
                 outputSize: 0,
                 writable: true,
                 _last: false,
                 chunkedEncoding: false,
                 shouldKeepAlive: true,
                 useChunkedEncodingByDefault: true,
                 sendDate: true,
                 _removedHeader: {},
                 _contentLength: null,
                 _hasBody: true,
                 _trailer: '',
                 finished: true,
                 _headerSent: true,
                 socket: [Circular],
                 connection: [Circular],
                 _header: 'HTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-Length: 101\r\nAccess-Control-Allow-Origin: *\r\nSet-Cookie: io=A6RWxddJuNa2BXdbAAAA\r\nDate: Fri, 25 Mar 2016 05:34:04 GMT\r\nConnection: keep-alive\r\n\r\n',
                 _headers: null,
                 _headerNames: {},
                 _onPendingData: [Function: updateOutgoingData],
                 statusMessage: 'OK',
                 statusCode: 200 },
              _peername: { address: '::1', family: 'IPv6', port: 50070 } },
           connection: 
            Socket {
              _connecting: false,
              _hadError: false,
              _handle: 
               TCP {
                 _externalStream: {},
                 fd: -1,
                 reading: true,
                 owner: [Circular],
                 onread: [Function: onread],
                 onconnection: null,
                 writeQueueSize: 0 },
              _parent: null,
              _host: null,
              _readableState: 
               ReadableState {
                 objectMode: false,
                 highWaterMark: 16384,
                 buffer: [],
                 length: 0,
                 pipes: null,
                 pipesCount: 0,
                 flowing: true,
                 ended: false,
                 endEmitted: false,
                 reading: true,
                 sync: false,
                 needReadable: true,
                 emittedReadable: false,
                 readableListening: false,
                 resumeScheduled: false,
                 defaultEncoding: 'utf8',
                 ranOut: false,
                 awaitDrain: 0,
                 readingMore: false,
                 decoder: null,
                 encoding: null },
              readable: true,
              domain: null,
              _events: 
               { end: 
                  [ { [Function: g] listener: [Function: onend] },
                    [Function: socketOnEnd] ],
                 finish: [Function: onSocketFinish],
                 _socketEnd: [Function: onSocketEnd],
                 drain: [ [Function: ondrain], [Function: socketOnDrain] ],
                 timeout: [Function],
                 error: [Function: socketOnError],
                 close: 
                  [ [Function: serverSocketCloseListener],
                    [Function: onServerResponseClose] ],
                 data: [Function: socketOnData],
                 resume: [Function: onSocketResume],
                 pause: [Function: onSocketPause] },
              _eventsCount: 10,
              _maxListeners: undefined,
              _writableState: 
               WritableState {
                 objectMode: false,
                 highWaterMark: 16384,
                 needDrain: false,
                 ending: false,
                 ended: false,
                 finished: false,
                 decodeStrings: false,
                 defaultEncoding: 'utf8',
                 length: 0,
                 writing: false,
                 corked: 0,
                 sync: false,
                 bufferProcessing: false,
                 onwrite: [Function],
                 writecb: null,
                 writelen: 0,
                 bufferedRequest: null,
                 lastBufferedRequest: null,
                 pendingcb: 3,
                 prefinished: false,
                 errorEmitted: false },
              writable: true,
              allowHalfOpen: true,
              destroyed: false,
              bytesRead: 0,
              _bytesDispatched: 311,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: 
               Server {
                 domain: null,
                 _events: 
                  { connection: [Function: connectionListener],
                    clientError: [Function],
                    close: [Function: bound ],
                    upgrade: [Function],
                    request: [Function] },
                 _eventsCount: 5,
                 _maxListeners: undefined,
                 _connections: 1,
                 _handle: 
                  TCP {
                    _externalStream: {},
                    fd: -1,
                    reading: false,
                    owner: [Circular],
                    onread: null,
                    onconnection: [Function: onconnection],
                    writeQueueSize: 0 },
                 _usingSlaves: false,
                 _slaves: [],
                 _unref: false,
                 allowHalfOpen: true,
                 pauseOnConnect: false,
                 httpAllowHalfOpen: false,
                 timeout: 120000,
                 _pendingResponseData: 0,
                 _connectionKey: '6::::8080' },
              _idleTimeout: 120000,
              _idleNext: 
               { [Function: utcDate]
                 _onTimeout: [Function],
                 _idleTimeout: 5,
                 _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
                 _idlePrev: [Circular],
                 _idleStart: 995 },
              _idlePrev: 
               { _idleNext: [Circular],
                 _idlePrev: 
                  { [Function: utcDate]
                    _onTimeout: [Function],
                    _idleTimeout: 5,
                    _idleNext: [Circular],
                    _idlePrev: [Circular],
                    _idleStart: 995 } },
              _idleStart: 997,
              parser: 
               HTTPParser {
                 '0': [Function: parserOnHeaders],
                 '1': [Function: parserOnHeadersComplete],
                 '2': [Function: parserOnBody],
                 '3': [Function: parserOnMessageComplete],
                 '4': [Function: onParserExecute],
                 _headers: [],
                 _url: '',
                 _consumed: true,
                 socket: [Circular],
                 incoming: [Circular],
                 maxHeaderPairs: 2000,
                 onIncoming: [Function: parserOnIncoming] },
              on: [Function: socketOnWrap],
              _paused: false,
              read: [Function],
              _consuming: true,
              _httpMessage: 
               ServerResponse {
                 domain: null,
                 _events: { finish: [Function: resOnFinish] },
                 _eventsCount: 1,
                 _maxListeners: undefined,
                 output: [],
                 outputEncodings: [],
                 outputCallbacks: [],
                 outputSize: 0,
                 writable: true,
                 _last: false,
                 chunkedEncoding: false,
                 shouldKeepAlive: true,
                 useChunkedEncodingByDefault: true,
                 sendDate: true,
                 _removedHeader: {},
                 _contentLength: null,
                 _hasBody: true,
                 _trailer: '',
                 finished: true,
                 _headerSent: true,
                 socket: [Circular],
                 connection: [Circular],
                 _header: 'HTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-Length: 101\r\nAccess-Control-Allow-Origin: *\r\nSet-Cookie: io=A6RWxddJuNa2BXdbAAAA\r\nDate: Fri, 25 Mar 2016 05:34:04 GMT\r\nConnection: keep-alive\r\n\r\n',
                 _headers: null,
                 _headerNames: {},
                 _onPendingData: [Function: updateOutgoingData],
                 statusMessage: 'OK',
                 statusCode: 200 },
              _peername: { address: '::1', family: 'IPv6', port: 50070 } },
           httpVersionMajor: 1,
           httpVersionMinor: 1,
           httpVersion: '1.1',
           complete: false,
           headers: 
            { host: 'localhost:8080',
              connection: 'keep-alive',
              pragma: 'no-cache',
              'cache-control': 'no-cache',
              'user-agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.132 Safari/537.36',
              accept: '*/*',
              referer: 'http://localhost:8080/',
              'accept-encoding': 'gzip, deflate, sdch',
              'accept-language': 'zh-CN,zh;q=0.8,en;q=0.6',
              cookie: 'io=B5ehkX7J-gME2Jd5AAAA; amvid=7b2309f47fa4b428ae50a46e3d3c4381' },
           rawHeaders: 
            [ 'Host',
              'localhost:8080',
              'Connection',
              'keep-alive',
              'Pragma',
              'no-cache',
              'Cache-Control',
              'no-cache',
              'User-Agent',
              'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.132 Safari/537.36',
              'Accept',
              '*/*',
              'Referer',
              'http://localhost:8080/',
              'Accept-Encoding',
              'gzip, deflate, sdch',
              'Accept-Language',
              'zh-CN,zh;q=0.8,en;q=0.6',
              'Cookie',
              'io=B5ehkX7J-gME2Jd5AAAA; amvid=7b2309f47fa4b428ae50a46e3d3c4381' ],
           trailers: {},
           rawTrailers: [],
           upgrade: false,
           url: '/socket.io/?EIO=3&transport=polling&t=LEiG-Ij',
           method: 'GET',
           statusCode: null,
           statusMessage: null,
           client: 
            Socket {
              _connecting: false,
              _hadError: false,
              _handle: 
               TCP {
                 _externalStream: {},
                 fd: -1,
                 reading: true,
                 owner: [Circular],
                 onread: [Function: onread],
                 onconnection: null,
                 writeQueueSize: 0 },
              _parent: null,
              _host: null,
              _readableState: 
               ReadableState {
                 objectMode: false,
                 highWaterMark: 16384,
                 buffer: [],
                 length: 0,
                 pipes: null,
                 pipesCount: 0,
                 flowing: true,
                 ended: false,
                 endEmitted: false,
                 reading: true,
                 sync: false,
                 needReadable: true,
                 emittedReadable: false,
                 readableListening: false,
                 resumeScheduled: false,
                 defaultEncoding: 'utf8',
                 ranOut: false,
                 awaitDrain: 0,
                 readingMore: false,
                 decoder: null,
                 encoding: null },
              readable: true,
              domain: null,
              _events: 
               { end: 
                  [ { [Function: g] listener: [Function: onend] },
                    [Function: socketOnEnd] ],
                 finish: [Function: onSocketFinish],
                 _socketEnd: [Function: onSocketEnd],
                 drain: [ [Function: ondrain], [Function: socketOnDrain] ],
                 timeout: [Function],
                 error: [Function: socketOnError],
                 close: 
                  [ [Function: serverSocketCloseListener],
                    [Function: onServerResponseClose] ],
                 data: [Function: socketOnData],
                 resume: [Function: onSocketResume],
                 pause: [Function: onSocketPause] },
              _eventsCount: 10,
              _maxListeners: undefined,
              _writableState: 
               WritableState {
                 objectMode: false,
                 highWaterMark: 16384,
                 needDrain: false,
                 ending: false,
                 ended: false,
                 finished: false,
                 decodeStrings: false,
                 defaultEncoding: 'utf8',
                 length: 0,
                 writing: false,
                 corked: 0,
                 sync: false,
                 bufferProcessing: false,
                 onwrite: [Function],
                 writecb: null,
                 writelen: 0,
                 bufferedRequest: null,
                 lastBufferedRequest: null,
                 pendingcb: 3,
                 prefinished: false,
                 errorEmitted: false },
              writable: true,
              allowHalfOpen: true,
              destroyed: false,
              bytesRead: 0,
              _bytesDispatched: 311,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: 
               Server {
                 domain: null,
                 _events: 
                  { connection: [Function: connectionListener],
                    clientError: [Function],
                    close: [Function: bound ],
                    upgrade: [Function],
                    request: [Function] },
                 _eventsCount: 5,
                 _maxListeners: undefined,
                 _connections: 1,
                 _handle: 
                  TCP {
                    _externalStream: {},
                    fd: -1,
                    reading: false,
                    owner: [Circular],
                    onread: null,
                    onconnection: [Function: onconnection],
                    writeQueueSize: 0 },
                 _usingSlaves: false,
                 _slaves: [],
                 _unref: false,
                 allowHalfOpen: true,
                 pauseOnConnect: false,
                 httpAllowHalfOpen: false,
                 timeout: 120000,
                 _pendingResponseData: 0,
                 _connectionKey: '6::::8080' },
              _idleTimeout: 120000,
              _idleNext: 
               { [Function: utcDate]
                 _onTimeout: [Function],
                 _idleTimeout: 5,
                 _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
                 _idlePrev: [Circular],
                 _idleStart: 995 },
              _idlePrev: 
               { _idleNext: [Circular],
                 _idlePrev: 
                  { [Function: utcDate]
                    _onTimeout: [Function],
                    _idleTimeout: 5,
                    _idleNext: [Circular],
                    _idlePrev: [Circular],
                    _idleStart: 995 } },
              _idleStart: 997,
              parser: 
               HTTPParser {
                 '0': [Function: parserOnHeaders],
                 '1': [Function: parserOnHeadersComplete],
                 '2': [Function: parserOnBody],
                 '3': [Function: parserOnMessageComplete],
                 '4': [Function: onParserExecute],
                 _headers: [],
                 _url: '',
                 _consumed: true,
                 socket: [Circular],
                 incoming: [Circular],
                 maxHeaderPairs: 2000,
                 onIncoming: [Function: parserOnIncoming] },
              on: [Function: socketOnWrap],
              _paused: false,
              read: [Function],
              _consuming: true,
              _httpMessage: 
               ServerResponse {
                 domain: null,
                 _events: { finish: [Function: resOnFinish] },
                 _eventsCount: 1,
                 _maxListeners: undefined,
                 output: [],
                 outputEncodings: [],
                 outputCallbacks: [],
                 outputSize: 0,
                 writable: true,
                 _last: false,
                 chunkedEncoding: false,
                 shouldKeepAlive: true,
                 useChunkedEncodingByDefault: true,
                 sendDate: true,
                 _removedHeader: {},
                 _contentLength: null,
                 _hasBody: true,
                 _trailer: '',
                 finished: true,
                 _headerSent: true,
                 socket: [Circular],
                 connection: [Circular],
                 _header: 'HTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-Length: 101\r\nAccess-Control-Allow-Origin: *\r\nSet-Cookie: io=A6RWxddJuNa2BXdbAAAA\r\nDate: Fri, 25 Mar 2016 05:34:04 GMT\r\nConnection: keep-alive\r\n\r\n',
                 _headers: null,
                 _headerNames: {},
                 _onPendingData: [Function: updateOutgoingData],
                 statusMessage: 'OK',
                 statusCode: 200 },
              _peername: { address: '::1', family: 'IPv6', port: 50070 } },
           _consuming: false,
           _dumped: false,
           _query: { EIO: '3', transport: 'polling', t: 'LEiG-Ij' },
           res: 
            ServerResponse {
              domain: null,
              _events: { finish: [Function: resOnFinish] },
              _eventsCount: 1,
              _maxListeners: undefined,
              output: [],
              outputEncodings: [],
              outputCallbacks: [],
              outputSize: 0,
              writable: true,
              _last: false,
              chunkedEncoding: false,
              shouldKeepAlive: true,
              useChunkedEncodingByDefault: true,
              sendDate: true,
              _removedHeader: {},
              _contentLength: null,
              _hasBody: true,
              _trailer: '',
              finished: true,
              _headerSent: true,
              socket: 
               Socket {
                 _connecting: false,
                 _hadError: false,
                 _handle: 
                  TCP {
                    _externalStream: {},
                    fd: -1,
                    reading: true,
                    owner: [Circular],
                    onread: [Function: onread],
                    onconnection: null,
                    writeQueueSize: 0 },
                 _parent: null,
                 _host: null,
                 _readableState: 
                  ReadableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    buffer: [],
                    length: 0,
                    pipes: null,
                    pipesCount: 0,
                    flowing: true,
                    ended: false,
                    endEmitted: false,
                    reading: true,
                    sync: false,
                    needReadable: true,
                    emittedReadable: false,
                    readableListening: false,
                    resumeScheduled: false,
                    defaultEncoding: 'utf8',
                    ranOut: false,
                    awaitDrain: 0,
                    readingMore: false,
                    decoder: null,
                    encoding: null },
                 readable: true,
                 domain: null,
                 _events: 
                  { end: 
                     [ { [Function: g] listener: [Function: onend] },
                       [Function: socketOnEnd] ],
                    finish: [Function: onSocketFinish],
                    _socketEnd: [Function: onSocketEnd],
                    drain: [ [Function: ondrain], [Function: socketOnDrain] ],
                    timeout: [Function],
                    error: [Function: socketOnError],
                    close: 
                     [ [Function: serverSocketCloseListener],
                       [Function: onServerResponseClose] ],
                    data: [Function: socketOnData],
                    resume: [Function: onSocketResume],
                    pause: [Function: onSocketPause] },
                 _eventsCount: 10,
                 _maxListeners: undefined,
                 _writableState: 
                  WritableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    needDrain: false,
                    ending: false,
                    ended: false,
                    finished: false,
                    decodeStrings: false,
                    defaultEncoding: 'utf8',
                    length: 0,
                    writing: false,
                    corked: 0,
                    sync: false,
                    bufferProcessing: false,
                    onwrite: [Function],
                    writecb: null,
                    writelen: 0,
                    bufferedRequest: null,
                    lastBufferedRequest: null,
                    pendingcb: 3,
                    prefinished: false,
                    errorEmitted: false },
                 writable: true,
                 allowHalfOpen: true,
                 destroyed: false,
                 bytesRead: 0,
                 _bytesDispatched: 311,
                 _sockname: null,
                 _pendingData: null,
                 _pendingEncoding: '',
                 server: 
                  Server {
                    domain: null,
                    _events: 
                     { connection: [Function: connectionListener],
                       clientError: [Function],
                       close: [Function: bound ],
                       upgrade: [Function],
                       request: [Function] },
                    _eventsCount: 5,
                    _maxListeners: undefined,
                    _connections: 1,
                    _handle: 
                     TCP {
                       _externalStream: {},
                       fd: -1,
                       reading: false,
                       owner: [Circular],
                       onread: null,
                       onconnection: [Function: onconnection],
                       writeQueueSize: 0 },
                    _usingSlaves: false,
                    _slaves: [],
                    _unref: false,
                    allowHalfOpen: true,
                    pauseOnConnect: false,
                    httpAllowHalfOpen: false,
                    timeout: 120000,
                    _pendingResponseData: 0,
                    _connectionKey: '6::::8080' },
                 _idleTimeout: 120000,
                 _idleNext: 
                  { [Function: utcDate]
                    _onTimeout: [Function],
                    _idleTimeout: 5,
                    _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
                    _idlePrev: [Circular],
                    _idleStart: 995 },
                 _idlePrev: 
                  { _idleNext: [Circular],
                    _idlePrev: 
                     { [Function: utcDate]
                       _onTimeout: [Function],
                       _idleTimeout: 5,
                       _idleNext: [Circular],
                       _idlePrev: [Circular],
                       _idleStart: 995 } },
                 _idleStart: 997,
                 parser: 
                  HTTPParser {
                    '0': [Function: parserOnHeaders],
                    '1': [Function: parserOnHeadersComplete],
                    '2': [Function: parserOnBody],
                    '3': [Function: parserOnMessageComplete],
                    '4': [Function: onParserExecute],
                    _headers: [],
                    _url: '',
                    _consumed: true,
                    socket: [Circular],
                    incoming: [Circular],
                    maxHeaderPairs: 2000,
                    onIncoming: [Function: parserOnIncoming] },
                 on: [Function: socketOnWrap],
                 _paused: false,
                 read: [Function],
                 _consuming: true,
                 _httpMessage: [Circular],
                 _peername: { address: '::1', family: 'IPv6', port: 50070 } },
              connection: 
               Socket {
                 _connecting: false,
                 _hadError: false,
                 _handle: 
                  TCP {
                    _externalStream: {},
                    fd: -1,
                    reading: true,
                    owner: [Circular],
                    onread: [Function: onread],
                    onconnection: null,
                    writeQueueSize: 0 },
                 _parent: null,
                 _host: null,
                 _readableState: 
                  ReadableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    buffer: [],
                    length: 0,
                    pipes: null,
                    pipesCount: 0,
                    flowing: true,
                    ended: false,
                    endEmitted: false,
                    reading: true,
                    sync: false,
                    needReadable: true,
                    emittedReadable: false,
                    readableListening: false,
                    resumeScheduled: false,
                    defaultEncoding: 'utf8',
                    ranOut: false,
                    awaitDrain: 0,
                    readingMore: false,
                    decoder: null,
                    encoding: null },
                 readable: true,
                 domain: null,
                 _events: 
                  { end: 
                     [ { [Function: g] listener: [Function: onend] },
                       [Function: socketOnEnd] ],
                    finish: [Function: onSocketFinish],
                    _socketEnd: [Function: onSocketEnd],
                    drain: [ [Function: ondrain], [Function: socketOnDrain] ],
                    timeout: [Function],
                    error: [Function: socketOnError],
                    close: 
                     [ [Function: serverSocketCloseListener],
                       [Function: onServerResponseClose] ],
                    data: [Function: socketOnData],
                    resume: [Function: onSocketResume],
                    pause: [Function: onSocketPause] },
                 _eventsCount: 10,
                 _maxListeners: undefined,
                 _writableState: 
                  WritableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    needDrain: false,
                    ending: false,
                    ended: false,
                    finished: false,
                    decodeStrings: false,
                    defaultEncoding: 'utf8',
                    length: 0,
                    writing: false,
                    corked: 0,
                    sync: false,
                    bufferProcessing: false,
                    onwrite: [Function],
                    writecb: null,
                    writelen: 0,
                    bufferedRequest: null,
                    lastBufferedRequest: null,
                    pendingcb: 3,
                    prefinished: false,
                    errorEmitted: false },
                 writable: true,
                 allowHalfOpen: true,
                 destroyed: false,
                 bytesRead: 0,
                 _bytesDispatched: 311,
                 _sockname: null,
                 _pendingData: null,
                 _pendingEncoding: '',
                 server: 
                  Server {
                    domain: null,
                    _events: 
                     { connection: [Function: connectionListener],
                       clientError: [Function],
                       close: [Function: bound ],
                       upgrade: [Function],
                       request: [Function] },
                    _eventsCount: 5,
                    _maxListeners: undefined,
                    _connections: 1,
                    _handle: 
                     TCP {
                       _externalStream: {},
                       fd: -1,
                       reading: false,
                       owner: [Circular],
                       onread: null,
                       onconnection: [Function: onconnection],
                       writeQueueSize: 0 },
                    _usingSlaves: false,
                    _slaves: [],
                    _unref: false,
                    allowHalfOpen: true,
                    pauseOnConnect: false,
                    httpAllowHalfOpen: false,
                    timeout: 120000,
                    _pendingResponseData: 0,
                    _connectionKey: '6::::8080' },
                 _idleTimeout: 120000,
                 _idleNext: 
                  { [Function: utcDate]
                    _onTimeout: [Function],
                    _idleTimeout: 5,
                    _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
                    _idlePrev: [Circular],
                    _idleStart: 995 },
                 _idlePrev: 
                  { _idleNext: [Circular],
                    _idlePrev: 
                     { [Function: utcDate]
                       _onTimeout: [Function],
                       _idleTimeout: 5,
                       _idleNext: [Circular],
                       _idlePrev: [Circular],
                       _idleStart: 995 } },
                 _idleStart: 997,
                 parser: 
                  HTTPParser {
                    '0': [Function: parserOnHeaders],
                    '1': [Function: parserOnHeadersComplete],
                    '2': [Function: parserOnBody],
                    '3': [Function: parserOnMessageComplete],
                    '4': [Function: onParserExecute],
                    _headers: [],
                    _url: '',
                    _consumed: true,
                    socket: [Circular],
                    incoming: [Circular],
                    maxHeaderPairs: 2000,
                    onIncoming: [Function: parserOnIncoming] },
                 on: [Function: socketOnWrap],
                 _paused: false,
                 read: [Function],
                 _consuming: true,
                 _httpMessage: [Circular],
                 _peername: { address: '::1', family: 'IPv6', port: 50070 } },
              _header: 'HTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-Length: 101\r\nAccess-Control-Allow-Origin: *\r\nSet-Cookie: io=A6RWxddJuNa2BXdbAAAA\r\nDate: Fri, 25 Mar 2016 05:34:04 GMT\r\nConnection: keep-alive\r\n\r\n',
              _headers: null,
              _headerNames: {},
              _onPendingData: [Function: updateOutgoingData],
              statusMessage: 'OK',
              statusCode: 200 },
           cleanup: [Function: cleanup] },
        remoteAddress: '::1',
        checkIntervalTimer: null,
        upgradeTimeoutTimer: null,
        pingTimeoutTimer: 
         { _called: false,
           _idleTimeout: 85000,
           _idlePrev: 
            Timer {
              '0': [Function: listOnTimeout],
              _idleNext: [Circular],
              _idlePrev: [Circular],
              msecs: 85000 },
           _idleNext: 
            Timer {
              '0': [Function: listOnTimeout],
              _idleNext: [Circular],
              _idlePrev: [Circular],
              msecs: 85000 },
           _idleStart: 978,
           _onTimeout: [Function],
           _repeat: null },
        transport: 
         XHR {
           readyState: 'open',
           discarded: false,
           closeTimeout: 30000,
           maxHttpBufferSize: 100000000,
           httpCompression: { threshold: 1024 },
           supportsBinary: true,
           _events: 
            { error: { [Function: g] listener: [Function: bound ] },
              packet: [Function: bound ],
              drain: [ [Function: bound ], [Function: onDrain] ],
              close: { [Function: g] listener: [Function: bound ] },
              headers: [Function] },
           _eventsCount: 5,
           sid: 'A6RWxddJuNa2BXdbAAAA',
           req: null,
           res: null,
           writable: false },
        _events: 
         { close: [ { [Function: g] listener: [Function] }, [Function: bound ] ],
           data: [Function: bound ],
           error: [Function: bound ] },
        _eventsCount: 3 },
     encoder: Encoder {},
     decoder: 
      Decoder {
        reconstructor: null,
        _callbacks: { decoded: [ [Function: bound ] ] } },
     id: 'A6RWxddJuNa2BXdbAAAA',
     request: 
      IncomingMessage {
        _readableState: 
         ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: [],
           length: 0,
           pipes: null,
           pipesCount: 0,
           flowing: null,
           ended: false,
           endEmitted: false,
           reading: false,
           sync: true,
           needReadable: false,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: false,
           defaultEncoding: 'utf8',
           ranOut: false,
           awaitDrain: 0,
           readingMore: false,
           decoder: null,
           encoding: null },
        readable: true,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: 
         Socket {
           _connecting: false,
           _hadError: false,
           _handle: 
            TCP {
              _externalStream: {},
              fd: -1,
              reading: true,
              owner: [Circular],
              onread: [Function: onread],
              onconnection: null,
              writeQueueSize: 0 },
           _parent: null,
           _host: null,
           _readableState: 
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: [],
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              defaultEncoding: 'utf8',
              ranOut: false,
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           domain: null,
           _events: 
            { end: 
               [ { [Function: g] listener: [Function: onend] },
                 [Function: socketOnEnd] ],
              finish: [Function: onSocketFinish],
              _socketEnd: [Function: onSocketEnd],
              drain: [ [Function: ondrain], [Function: socketOnDrain] ],
              timeout: [Function],
              error: [Function: socketOnError],
              close: 
               [ [Function: serverSocketCloseListener],
                 [Function: onServerResponseClose] ],
              data: [Function: socketOnData],
              resume: [Function: onSocketResume],
              pause: [Function: onSocketPause] },
           _eventsCount: 10,
           _maxListeners: undefined,
           _writableState: 
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 3,
              prefinished: false,
              errorEmitted: false },
           writable: true,
           allowHalfOpen: true,
           destroyed: false,
           bytesRead: 0,
           _bytesDispatched: 311,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server: 
            Server {
              domain: null,
              _events: 
               { connection: [Function: connectionListener],
                 clientError: [Function],
                 close: [Function: bound ],
                 upgrade: [Function],
                 request: [Function] },
              _eventsCount: 5,
              _maxListeners: undefined,
              _connections: 1,
              _handle: 
               TCP {
                 _externalStream: {},
                 fd: -1,
                 reading: false,
                 owner: [Circular],
                 onread: null,
                 onconnection: [Function: onconnection],
                 writeQueueSize: 0 },
              _usingSlaves: false,
              _slaves: [],
              _unref: false,
              allowHalfOpen: true,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              _pendingResponseData: 0,
              _connectionKey: '6::::8080' },
           _idleTimeout: 120000,
           _idleNext: 
            { [Function: utcDate]
              _onTimeout: [Function],
              _idleTimeout: 5,
              _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
              _idlePrev: [Circular],
              _idleStart: 995 },
           _idlePrev: 
            { _idleNext: [Circular],
              _idlePrev: 
               { [Function: utcDate]
                 _onTimeout: [Function],
                 _idleTimeout: 5,
                 _idleNext: [Circular],
                 _idlePrev: [Circular],
                 _idleStart: 995 } },
           _idleStart: 997,
           parser: 
            HTTPParser {
              '0': [Function: parserOnHeaders],
              '1': [Function: parserOnHeadersComplete],
              '2': [Function: parserOnBody],
              '3': [Function: parserOnMessageComplete],
              '4': [Function: onParserExecute],
              _headers: [],
              _url: '',
              _consumed: true,
              socket: [Circular],
              incoming: [Circular],
              maxHeaderPairs: 2000,
              onIncoming: [Function: parserOnIncoming] },
           on: [Function: socketOnWrap],
           _paused: false,
           read: [Function],
           _consuming: true,
           _httpMessage: 
            ServerResponse {
              domain: null,
              _events: { finish: [Function: resOnFinish] },
              _eventsCount: 1,
              _maxListeners: undefined,
              output: [],
              outputEncodings: [],
              outputCallbacks: [],
              outputSize: 0,
              writable: true,
              _last: false,
              chunkedEncoding: false,
              shouldKeepAlive: true,
              useChunkedEncodingByDefault: true,
              sendDate: true,
              _removedHeader: {},
              _contentLength: null,
              _hasBody: true,
              _trailer: '',
              finished: true,
              _headerSent: true,
              socket: [Circular],
              connection: [Circular],
              _header: 'HTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-Length: 101\r\nAccess-Control-Allow-Origin: *\r\nSet-Cookie: io=A6RWxddJuNa2BXdbAAAA\r\nDate: Fri, 25 Mar 2016 05:34:04 GMT\r\nConnection: keep-alive\r\n\r\n',
              _headers: null,
              _headerNames: {},
              _onPendingData: [Function: updateOutgoingData],
              statusMessage: 'OK',
              statusCode: 200 },
           _peername: { address: '::1', family: 'IPv6', port: 50070 } },
        connection: 
         Socket {
           _connecting: false,
           _hadError: false,
           _handle: 
            TCP {
              _externalStream: {},
              fd: -1,
              reading: true,
              owner: [Circular],
              onread: [Function: onread],
              onconnection: null,
              writeQueueSize: 0 },
           _parent: null,
           _host: null,
           _readableState: 
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: [],
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              defaultEncoding: 'utf8',
              ranOut: false,
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           domain: null,
           _events: 
            { end: 
               [ { [Function: g] listener: [Function: onend] },
                 [Function: socketOnEnd] ],
              finish: [Function: onSocketFinish],
              _socketEnd: [Function: onSocketEnd],
              drain: [ [Function: ondrain], [Function: socketOnDrain] ],
              timeout: [Function],
              error: [Function: socketOnError],
              close: 
               [ [Function: serverSocketCloseListener],
                 [Function: onServerResponseClose] ],
              data: [Function: socketOnData],
              resume: [Function: onSocketResume],
              pause: [Function: onSocketPause] },
           _eventsCount: 10,
           _maxListeners: undefined,
           _writableState: 
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 3,
              prefinished: false,
              errorEmitted: false },
           writable: true,
           allowHalfOpen: true,
           destroyed: false,
           bytesRead: 0,
           _bytesDispatched: 311,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server: 
            Server {
              domain: null,
              _events: 
               { connection: [Function: connectionListener],
                 clientError: [Function],
                 close: [Function: bound ],
                 upgrade: [Function],
                 request: [Function] },
              _eventsCount: 5,
              _maxListeners: undefined,
              _connections: 1,
              _handle: 
               TCP {
                 _externalStream: {},
                 fd: -1,
                 reading: false,
                 owner: [Circular],
                 onread: null,
                 onconnection: [Function: onconnection],
                 writeQueueSize: 0 },
              _usingSlaves: false,
              _slaves: [],
              _unref: false,
              allowHalfOpen: true,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              _pendingResponseData: 0,
              _connectionKey: '6::::8080' },
           _idleTimeout: 120000,
           _idleNext: 
            { [Function: utcDate]
              _onTimeout: [Function],
              _idleTimeout: 5,
              _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
              _idlePrev: [Circular],
              _idleStart: 995 },
           _idlePrev: 
            { _idleNext: [Circular],
              _idlePrev: 
               { [Function: utcDate]
                 _onTimeout: [Function],
                 _idleTimeout: 5,
                 _idleNext: [Circular],
                 _idlePrev: [Circular],
                 _idleStart: 995 } },
           _idleStart: 997,
           parser: 
            HTTPParser {
              '0': [Function: parserOnHeaders],
              '1': [Function: parserOnHeadersComplete],
              '2': [Function: parserOnBody],
              '3': [Function: parserOnMessageComplete],
              '4': [Function: onParserExecute],
              _headers: [],
              _url: '',
              _consumed: true,
              socket: [Circular],
              incoming: [Circular],
              maxHeaderPairs: 2000,
              onIncoming: [Function: parserOnIncoming] },
           on: [Function: socketOnWrap],
           _paused: false,
           read: [Function],
           _consuming: true,
           _httpMessage: 
            ServerResponse {
              domain: null,
              _events: { finish: [Function: resOnFinish] },
              _eventsCount: 1,
              _maxListeners: undefined,
              output: [],
              outputEncodings: [],
              outputCallbacks: [],
              outputSize: 0,
              writable: true,
              _last: false,
              chunkedEncoding: false,
              shouldKeepAlive: true,
              useChunkedEncodingByDefault: true,
              sendDate: true,
              _removedHeader: {},
              _contentLength: null,
              _hasBody: true,
              _trailer: '',
              finished: true,
              _headerSent: true,
              socket: [Circular],
              connection: [Circular],
              _header: 'HTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-Length: 101\r\nAccess-Control-Allow-Origin: *\r\nSet-Cookie: io=A6RWxddJuNa2BXdbAAAA\r\nDate: Fri, 25 Mar 2016 05:34:04 GMT\r\nConnection: keep-alive\r\n\r\n',
              _headers: null,
              _headerNames: {},
              _onPendingData: [Function: updateOutgoingData],
              statusMessage: 'OK',
              statusCode: 200 },
           _peername: { address: '::1', family: 'IPv6', port: 50070 } },
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: false,
        headers: 
         { host: 'localhost:8080',
           connection: 'keep-alive',
           pragma: 'no-cache',
           'cache-control': 'no-cache',
           'user-agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.132 Safari/537.36',
           accept: '*/*',
           referer: 'http://localhost:8080/',
           'accept-encoding': 'gzip, deflate, sdch',
           'accept-language': 'zh-CN,zh;q=0.8,en;q=0.6',
           cookie: 'io=B5ehkX7J-gME2Jd5AAAA; amvid=7b2309f47fa4b428ae50a46e3d3c4381' },
        rawHeaders: 
         [ 'Host',
           'localhost:8080',
           'Connection',
           'keep-alive',
           'Pragma',
           'no-cache',
           'Cache-Control',
           'no-cache',
           'User-Agent',
           'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.132 Safari/537.36',
           'Accept',
           '*/*',
           'Referer',
           'http://localhost:8080/',
           'Accept-Encoding',
           'gzip, deflate, sdch',
           'Accept-Language',
           'zh-CN,zh;q=0.8,en;q=0.6',
           'Cookie',
           'io=B5ehkX7J-gME2Jd5AAAA; amvid=7b2309f47fa4b428ae50a46e3d3c4381' ],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/socket.io/?EIO=3&transport=polling&t=LEiG-Ij',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: 
         Socket {
           _connecting: false,
           _hadError: false,
           _handle: 
            TCP {
              _externalStream: {},
              fd: -1,
              reading: true,
              owner: [Circular],
              onread: [Function: onread],
              onconnection: null,
              writeQueueSize: 0 },
           _parent: null,
           _host: null,
           _readableState: 
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: [],
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              defaultEncoding: 'utf8',
              ranOut: false,
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           domain: null,
           _events: 
            { end: 
               [ { [Function: g] listener: [Function: onend] },
                 [Function: socketOnEnd] ],
              finish: [Function: onSocketFinish],
              _socketEnd: [Function: onSocketEnd],
              drain: [ [Function: ondrain], [Function: socketOnDrain] ],
              timeout: [Function],
              error: [Function: socketOnError],
              close: 
               [ [Function: serverSocketCloseListener],
                 [Function: onServerResponseClose] ],
              data: [Function: socketOnData],
              resume: [Function: onSocketResume],
              pause: [Function: onSocketPause] },
           _eventsCount: 10,
           _maxListeners: undefined,
           _writableState: 
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 3,
              prefinished: false,
              errorEmitted: false },
           writable: true,
           allowHalfOpen: true,
           destroyed: false,
           bytesRead: 0,
           _bytesDispatched: 311,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server: 
            Server {
              domain: null,
              _events: 
               { connection: [Function: connectionListener],
                 clientError: [Function],
                 close: [Function: bound ],
                 upgrade: [Function],
                 request: [Function] },
              _eventsCount: 5,
              _maxListeners: undefined,
              _connections: 1,
              _handle: 
               TCP {
                 _externalStream: {},
                 fd: -1,
                 reading: false,
                 owner: [Circular],
                 onread: null,
                 onconnection: [Function: onconnection],
                 writeQueueSize: 0 },
              _usingSlaves: false,
              _slaves: [],
              _unref: false,
              allowHalfOpen: true,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              _pendingResponseData: 0,
              _connectionKey: '6::::8080' },
           _idleTimeout: 120000,
           _idleNext: 
            { [Function: utcDate]
              _onTimeout: [Function],
              _idleTimeout: 5,
              _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
              _idlePrev: [Circular],
              _idleStart: 995 },
           _idlePrev: 
            { _idleNext: [Circular],
              _idlePrev: 
               { [Function: utcDate]
                 _onTimeout: [Function],
                 _idleTimeout: 5,
                 _idleNext: [Circular],
                 _idlePrev: [Circular],
                 _idleStart: 995 } },
           _idleStart: 997,
           parser: 
            HTTPParser {
              '0': [Function: parserOnHeaders],
              '1': [Function: parserOnHeadersComplete],
              '2': [Function: parserOnBody],
              '3': [Function: parserOnMessageComplete],
              '4': [Function: onParserExecute],
              _headers: [],
              _url: '',
              _consumed: true,
              socket: [Circular],
              incoming: [Circular],
              maxHeaderPairs: 2000,
              onIncoming: [Function: parserOnIncoming] },
           on: [Function: socketOnWrap],
           _paused: false,
           read: [Function],
           _consuming: true,
           _httpMessage: 
            ServerResponse {
              domain: null,
              _events: { finish: [Function: resOnFinish] },
              _eventsCount: 1,
              _maxListeners: undefined,
              output: [],
              outputEncodings: [],
              outputCallbacks: [],
              outputSize: 0,
              writable: true,
              _last: false,
              chunkedEncoding: false,
              shouldKeepAlive: true,
              useChunkedEncodingByDefault: true,
              sendDate: true,
              _removedHeader: {},
              _contentLength: null,
              _hasBody: true,
              _trailer: '',
              finished: true,
              _headerSent: true,
              socket: [Circular],
              connection: [Circular],
              _header: 'HTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-Length: 101\r\nAccess-Control-Allow-Origin: *\r\nSet-Cookie: io=A6RWxddJuNa2BXdbAAAA\r\nDate: Fri, 25 Mar 2016 05:34:04 GMT\r\nConnection: keep-alive\r\n\r\n',
              _headers: null,
              _headerNames: {},
              _onPendingData: [Function: updateOutgoingData],
              statusMessage: 'OK',
              statusCode: 200 },
           _peername: { address: '::1', family: 'IPv6', port: 50070 } },
        _consuming: false,
        _dumped: false,
        _query: { EIO: '3', transport: 'polling', t: 'LEiG-Ij' },
        res: 
         ServerResponse {
           domain: null,
           _events: { finish: [Function: resOnFinish] },
           _eventsCount: 1,
           _maxListeners: undefined,
           output: [],
           outputEncodings: [],
           outputCallbacks: [],
           outputSize: 0,
           writable: true,
           _last: false,
           chunkedEncoding: false,
           shouldKeepAlive: true,
           useChunkedEncodingByDefault: true,
           sendDate: true,
           _removedHeader: {},
           _contentLength: null,
           _hasBody: true,
           _trailer: '',
           finished: true,
           _headerSent: true,
           socket: 
            Socket {
              _connecting: false,
              _hadError: false,
              _handle: 
               TCP {
                 _externalStream: {},
                 fd: -1,
                 reading: true,
                 owner: [Circular],
                 onread: [Function: onread],
                 onconnection: null,
                 writeQueueSize: 0 },
              _parent: null,
              _host: null,
              _readableState: 
               ReadableState {
                 objectMode: false,
                 highWaterMark: 16384,
                 buffer: [],
                 length: 0,
                 pipes: null,
                 pipesCount: 0,
                 flowing: true,
                 ended: false,
                 endEmitted: false,
                 reading: true,
                 sync: false,
                 needReadable: true,
                 emittedReadable: false,
                 readableListening: false,
                 resumeScheduled: false,
                 defaultEncoding: 'utf8',
                 ranOut: false,
                 awaitDrain: 0,
                 readingMore: false,
                 decoder: null,
                 encoding: null },
              readable: true,
              domain: null,
              _events: 
               { end: 
                  [ { [Function: g] listener: [Function: onend] },
                    [Function: socketOnEnd] ],
                 finish: [Function: onSocketFinish],
                 _socketEnd: [Function: onSocketEnd],
                 drain: [ [Function: ondrain], [Function: socketOnDrain] ],
                 timeout: [Function],
                 error: [Function: socketOnError],
                 close: 
                  [ [Function: serverSocketCloseListener],
                    [Function: onServerResponseClose] ],
                 data: [Function: socketOnData],
                 resume: [Function: onSocketResume],
                 pause: [Function: onSocketPause] },
              _eventsCount: 10,
              _maxListeners: undefined,
              _writableState: 
               WritableState {
                 objectMode: false,
                 highWaterMark: 16384,
                 needDrain: false,
                 ending: false,
                 ended: false,
                 finished: false,
                 decodeStrings: false,
                 defaultEncoding: 'utf8',
                 length: 0,
                 writing: false,
                 corked: 0,
                 sync: false,
                 bufferProcessing: false,
                 onwrite: [Function],
                 writecb: null,
                 writelen: 0,
                 bufferedRequest: null,
                 lastBufferedRequest: null,
                 pendingcb: 3,
                 prefinished: false,
                 errorEmitted: false },
              writable: true,
              allowHalfOpen: true,
              destroyed: false,
              bytesRead: 0,
              _bytesDispatched: 311,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: 
               Server {
                 domain: null,
                 _events: 
                  { connection: [Function: connectionListener],
                    clientError: [Function],
                    close: [Function: bound ],
                    upgrade: [Function],
                    request: [Function] },
                 _eventsCount: 5,
                 _maxListeners: undefined,
                 _connections: 1,
                 _handle: 
                  TCP {
                    _externalStream: {},
                    fd: -1,
                    reading: false,
                    owner: [Circular],
                    onread: null,
                    onconnection: [Function: onconnection],
                    writeQueueSize: 0 },
                 _usingSlaves: false,
                 _slaves: [],
                 _unref: false,
                 allowHalfOpen: true,
                 pauseOnConnect: false,
                 httpAllowHalfOpen: false,
                 timeout: 120000,
                 _pendingResponseData: 0,
                 _connectionKey: '6::::8080' },
              _idleTimeout: 120000,
              _idleNext: 
               { [Function: utcDate]
                 _onTimeout: [Function],
                 _idleTimeout: 5,
                 _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
                 _idlePrev: [Circular],
                 _idleStart: 995 },
              _idlePrev: 
               { _idleNext: [Circular],
                 _idlePrev: 
                  { [Function: utcDate]
                    _onTimeout: [Function],
                    _idleTimeout: 5,
                    _idleNext: [Circular],
                    _idlePrev: [Circular],
                    _idleStart: 995 } },
              _idleStart: 997,
              parser: 
               HTTPParser {
                 '0': [Function: parserOnHeaders],
                 '1': [Function: parserOnHeadersComplete],
                 '2': [Function: parserOnBody],
                 '3': [Function: parserOnMessageComplete],
                 '4': [Function: onParserExecute],
                 _headers: [],
                 _url: '',
                 _consumed: true,
                 socket: [Circular],
                 incoming: [Circular],
                 maxHeaderPairs: 2000,
                 onIncoming: [Function: parserOnIncoming] },
              on: [Function: socketOnWrap],
              _paused: false,
              read: [Function],
              _consuming: true,
              _httpMessage: [Circular],
              _peername: { address: '::1', family: 'IPv6', port: 50070 } },
           connection: 
            Socket {
              _connecting: false,
              _hadError: false,
              _handle: 
               TCP {
                 _externalStream: {},
                 fd: -1,
                 reading: true,
                 owner: [Circular],
                 onread: [Function: onread],
                 onconnection: null,
                 writeQueueSize: 0 },
              _parent: null,
              _host: null,
              _readableState: 
               ReadableState {
                 objectMode: false,
                 highWaterMark: 16384,
                 buffer: [],
                 length: 0,
                 pipes: null,
                 pipesCount: 0,
                 flowing: true,
                 ended: false,
                 endEmitted: false,
                 reading: true,
                 sync: false,
                 needReadable: true,
                 emittedReadable: false,
                 readableListening: false,
                 resumeScheduled: false,
                 defaultEncoding: 'utf8',
                 ranOut: false,
                 awaitDrain: 0,
                 readingMore: false,
                 decoder: null,
                 encoding: null },
              readable: true,
              domain: null,
              _events: 
               { end: 
                  [ { [Function: g] listener: [Function: onend] },
                    [Function: socketOnEnd] ],
                 finish: [Function: onSocketFinish],
                 _socketEnd: [Function: onSocketEnd],
                 drain: [ [Function: ondrain], [Function: socketOnDrain] ],
                 timeout: [Function],
                 error: [Function: socketOnError],
                 close: 
                  [ [Function: serverSocketCloseListener],
                    [Function: onServerResponseClose] ],
                 data: [Function: socketOnData],
                 resume: [Function: onSocketResume],
                 pause: [Function: onSocketPause] },
              _eventsCount: 10,
              _maxListeners: undefined,
              _writableState: 
               WritableState {
                 objectMode: false,
                 highWaterMark: 16384,
                 needDrain: false,
                 ending: false,
                 ended: false,
                 finished: false,
                 decodeStrings: false,
                 defaultEncoding: 'utf8',
                 length: 0,
                 writing: false,
                 corked: 0,
                 sync: false,
                 bufferProcessing: false,
                 onwrite: [Function],
                 writecb: null,
                 writelen: 0,
                 bufferedRequest: null,
                 lastBufferedRequest: null,
                 pendingcb: 3,
                 prefinished: false,
                 errorEmitted: false },
              writable: true,
              allowHalfOpen: true,
              destroyed: false,
              bytesRead: 0,
              _bytesDispatched: 311,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: 
               Server {
                 domain: null,
                 _events: 
                  { connection: [Function: connectionListener],
                    clientError: [Function],
                    close: [Function: bound ],
                    upgrade: [Function],
                    request: [Function] },
                 _eventsCount: 5,
                 _maxListeners: undefined,
                 _connections: 1,
                 _handle: 
                  TCP {
                    _externalStream: {},
                    fd: -1,
                    reading: false,
                    owner: [Circular],
                    onread: null,
                    onconnection: [Function: onconnection],
                    writeQueueSize: 0 },
                 _usingSlaves: false,
                 _slaves: [],
                 _unref: false,
                 allowHalfOpen: true,
                 pauseOnConnect: false,
                 httpAllowHalfOpen: false,
                 timeout: 120000,
                 _pendingResponseData: 0,
                 _connectionKey: '6::::8080' },
              _idleTimeout: 120000,
              _idleNext: 
               { [Function: utcDate]
                 _onTimeout: [Function],
                 _idleTimeout: 5,
                 _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
                 _idlePrev: [Circular],
                 _idleStart: 995 },
              _idlePrev: 
               { _idleNext: [Circular],
                 _idlePrev: 
                  { [Function: utcDate]
                    _onTimeout: [Function],
                    _idleTimeout: 5,
                    _idleNext: [Circular],
                    _idlePrev: [Circular],
                    _idleStart: 995 } },
              _idleStart: 997,
              parser: 
               HTTPParser {
                 '0': [Function: parserOnHeaders],
                 '1': [Function: parserOnHeadersComplete],
                 '2': [Function: parserOnBody],
                 '3': [Function: parserOnMessageComplete],
                 '4': [Function: onParserExecute],
                 _headers: [],
                 _url: '',
                 _consumed: true,
                 socket: [Circular],
                 incoming: [Circular],
                 maxHeaderPairs: 2000,
                 onIncoming: [Function: parserOnIncoming] },
              on: [Function: socketOnWrap],
              _paused: false,
              read: [Function],
              _consuming: true,
              _httpMessage: [Circular],
              _peername: { address: '::1', family: 'IPv6', port: 50070 } },
           _header: 'HTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-Length: 101\r\nAccess-Control-Allow-Origin: *\r\nSet-Cookie: io=A6RWxddJuNa2BXdbAAAA\r\nDate: Fri, 25 Mar 2016 05:34:04 GMT\r\nConnection: keep-alive\r\n\r\n',
           _headers: null,
           _headerNames: {},
           _onPendingData: [Function: updateOutgoingData],
           statusMessage: 'OK',
           statusCode: 200 },
        cleanup: [Function: cleanup] },
     onclose: [Function: bound ],
     ondata: [Function: bound ],
     onerror: [Function: bound ],
     ondecoded: [Function: bound ],
     sockets: {},
     nsps: {},
     connectBuffer: [] },
  conn: 
   Socket {
     id: 'A6RWxddJuNa2BXdbAAAA',
     server: 
      Server {
        clients: { A6RWxddJuNa2BXdbAAAA: [Circular] },
        clientsCount: 1,
        pingTimeout: 60000,
        pingInterval: 25000,
        upgradeTimeout: 10000,
        maxHttpBufferSize: 100000000,
        transports: [ 'polling', 'websocket' ],
        allowUpgrades: true,
        allowRequest: [Function: bound ],
        cookie: 'io',
        cookiePath: false,
        perMessageDeflate: { threshold: 1024 },
        httpCompression: { threshold: 1024 },
        ws: 
         WebSocketServer {
           domain: null,
           _events: {},
           _eventsCount: 0,
           _maxListeners: undefined,
           options: 
            { host: [Getter],
              port: [Getter],
              server: [Getter],
              verifyClient: [Getter],
              handleProtocols: [Getter],
              path: [Getter],
              noServer: [Getter],
              disableHixie: [Getter],
              clientTracking: [Getter],
              perMessageDeflate: [Getter] },
           path: null,
           clients: [] },
        _events: { connection: [Function: bound ] },
        _eventsCount: 1 },
     upgrading: false,
     upgraded: false,
     readyState: 'open',
     writeBuffer: [],
     packetsFn: [],
     sentCallbackFn: [],
     cleanupFn: [ [Function], [Function] ],
     request: 
      IncomingMessage {
        _readableState: 
         ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: [],
           length: 0,
           pipes: null,
           pipesCount: 0,
           flowing: null,
           ended: false,
           endEmitted: false,
           reading: false,
           sync: true,
           needReadable: false,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: false,
           defaultEncoding: 'utf8',
           ranOut: false,
           awaitDrain: 0,
           readingMore: false,
           decoder: null,
           encoding: null },
        readable: true,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: 
         Socket {
           _connecting: false,
           _hadError: false,
           _handle: 
            TCP {
              _externalStream: {},
              fd: -1,
              reading: true,
              owner: [Circular],
              onread: [Function: onread],
              onconnection: null,
              writeQueueSize: 0 },
           _parent: null,
           _host: null,
           _readableState: 
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: [],
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              defaultEncoding: 'utf8',
              ranOut: false,
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           domain: null,
           _events: 
            { end: 
               [ { [Function: g] listener: [Function: onend] },
                 [Function: socketOnEnd] ],
              finish: [Function: onSocketFinish],
              _socketEnd: [Function: onSocketEnd],
              drain: [ [Function: ondrain], [Function: socketOnDrain] ],
              timeout: [Function],
              error: [Function: socketOnError],
              close: 
               [ [Function: serverSocketCloseListener],
                 [Function: onServerResponseClose] ],
              data: [Function: socketOnData],
              resume: [Function: onSocketResume],
              pause: [Function: onSocketPause] },
           _eventsCount: 10,
           _maxListeners: undefined,
           _writableState: 
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 3,
              prefinished: false,
              errorEmitted: false },
           writable: true,
           allowHalfOpen: true,
           destroyed: false,
           bytesRead: 0,
           _bytesDispatched: 311,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server: 
            Server {
              domain: null,
              _events: 
               { connection: [Function: connectionListener],
                 clientError: [Function],
                 close: [Function: bound ],
                 upgrade: [Function],
                 request: [Function] },
              _eventsCount: 5,
              _maxListeners: undefined,
              _connections: 1,
              _handle: 
               TCP {
                 _externalStream: {},
                 fd: -1,
                 reading: false,
                 owner: [Circular],
                 onread: null,
                 onconnection: [Function: onconnection],
                 writeQueueSize: 0 },
              _usingSlaves: false,
              _slaves: [],
              _unref: false,
              allowHalfOpen: true,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              _pendingResponseData: 0,
              _connectionKey: '6::::8080' },
           _idleTimeout: 120000,
           _idleNext: 
            { [Function: utcDate]
              _onTimeout: [Function],
              _idleTimeout: 5,
              _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
              _idlePrev: [Circular],
              _idleStart: 995 },
           _idlePrev: 
            { _idleNext: [Circular],
              _idlePrev: 
               { [Function: utcDate]
                 _onTimeout: [Function],
                 _idleTimeout: 5,
                 _idleNext: [Circular],
                 _idlePrev: [Circular],
                 _idleStart: 995 } },
           _idleStart: 997,
           parser: 
            HTTPParser {
              '0': [Function: parserOnHeaders],
              '1': [Function: parserOnHeadersComplete],
              '2': [Function: parserOnBody],
              '3': [Function: parserOnMessageComplete],
              '4': [Function: onParserExecute],
              _headers: [],
              _url: '',
              _consumed: true,
              socket: [Circular],
              incoming: [Circular],
              maxHeaderPairs: 2000,
              onIncoming: [Function: parserOnIncoming] },
           on: [Function: socketOnWrap],
           _paused: false,
           read: [Function],
           _consuming: true,
           _httpMessage: 
            ServerResponse {
              domain: null,
              _events: { finish: [Function: resOnFinish] },
              _eventsCount: 1,
              _maxListeners: undefined,
              output: [],
              outputEncodings: [],
              outputCallbacks: [],
              outputSize: 0,
              writable: true,
              _last: false,
              chunkedEncoding: false,
              shouldKeepAlive: true,
              useChunkedEncodingByDefault: true,
              sendDate: true,
              _removedHeader: {},
              _contentLength: null,
              _hasBody: true,
              _trailer: '',
              finished: true,
              _headerSent: true,
              socket: [Circular],
              connection: [Circular],
              _header: 'HTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-Length: 101\r\nAccess-Control-Allow-Origin: *\r\nSet-Cookie: io=A6RWxddJuNa2BXdbAAAA\r\nDate: Fri, 25 Mar 2016 05:34:04 GMT\r\nConnection: keep-alive\r\n\r\n',
              _headers: null,
              _headerNames: {},
              _onPendingData: [Function: updateOutgoingData],
              statusMessage: 'OK',
              statusCode: 200 },
           _peername: { address: '::1', family: 'IPv6', port: 50070 } },
        connection: 
         Socket {
           _connecting: false,
           _hadError: false,
           _handle: 
            TCP {
              _externalStream: {},
              fd: -1,
              reading: true,
              owner: [Circular],
              onread: [Function: onread],
              onconnection: null,
              writeQueueSize: 0 },
           _parent: null,
           _host: null,
           _readableState: 
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: [],
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              defaultEncoding: 'utf8',
              ranOut: false,
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           domain: null,
           _events: 
            { end: 
               [ { [Function: g] listener: [Function: onend] },
                 [Function: socketOnEnd] ],
              finish: [Function: onSocketFinish],
              _socketEnd: [Function: onSocketEnd],
              drain: [ [Function: ondrain], [Function: socketOnDrain] ],
              timeout: [Function],
              error: [Function: socketOnError],
              close: 
               [ [Function: serverSocketCloseListener],
                 [Function: onServerResponseClose] ],
              data: [Function: socketOnData],
              resume: [Function: onSocketResume],
              pause: [Function: onSocketPause] },
           _eventsCount: 10,
           _maxListeners: undefined,
           _writableState: 
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 3,
              prefinished: false,
              errorEmitted: false },
           writable: true,
           allowHalfOpen: true,
           destroyed: false,
           bytesRead: 0,
           _bytesDispatched: 311,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server: 
            Server {
              domain: null,
              _events: 
               { connection: [Function: connectionListener],
                 clientError: [Function],
                 close: [Function: bound ],
                 upgrade: [Function],
                 request: [Function] },
              _eventsCount: 5,
              _maxListeners: undefined,
              _connections: 1,
              _handle: 
               TCP {
                 _externalStream: {},
                 fd: -1,
                 reading: false,
                 owner: [Circular],
                 onread: null,
                 onconnection: [Function: onconnection],
                 writeQueueSize: 0 },
              _usingSlaves: false,
              _slaves: [],
              _unref: false,
              allowHalfOpen: true,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              _pendingResponseData: 0,
              _connectionKey: '6::::8080' },
           _idleTimeout: 120000,
           _idleNext: 
            { [Function: utcDate]
              _onTimeout: [Function],
              _idleTimeout: 5,
              _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
              _idlePrev: [Circular],
              _idleStart: 995 },
           _idlePrev: 
            { _idleNext: [Circular],
              _idlePrev: 
               { [Function: utcDate]
                 _onTimeout: [Function],
                 _idleTimeout: 5,
                 _idleNext: [Circular],
                 _idlePrev: [Circular],
                 _idleStart: 995 } },
           _idleStart: 997,
           parser: 
            HTTPParser {
              '0': [Function: parserOnHeaders],
              '1': [Function: parserOnHeadersComplete],
              '2': [Function: parserOnBody],
              '3': [Function: parserOnMessageComplete],
              '4': [Function: onParserExecute],
              _headers: [],
              _url: '',
              _consumed: true,
              socket: [Circular],
              incoming: [Circular],
              maxHeaderPairs: 2000,
              onIncoming: [Function: parserOnIncoming] },
           on: [Function: socketOnWrap],
           _paused: false,
           read: [Function],
           _consuming: true,
           _httpMessage: 
            ServerResponse {
              domain: null,
              _events: { finish: [Function: resOnFinish] },
              _eventsCount: 1,
              _maxListeners: undefined,
              output: [],
              outputEncodings: [],
              outputCallbacks: [],
              outputSize: 0,
              writable: true,
              _last: false,
              chunkedEncoding: false,
              shouldKeepAlive: true,
              useChunkedEncodingByDefault: true,
              sendDate: true,
              _removedHeader: {},
              _contentLength: null,
              _hasBody: true,
              _trailer: '',
              finished: true,
              _headerSent: true,
              socket: [Circular],
              connection: [Circular],
              _header: 'HTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-Length: 101\r\nAccess-Control-Allow-Origin: *\r\nSet-Cookie: io=A6RWxddJuNa2BXdbAAAA\r\nDate: Fri, 25 Mar 2016 05:34:04 GMT\r\nConnection: keep-alive\r\n\r\n',
              _headers: null,
              _headerNames: {},
              _onPendingData: [Function: updateOutgoingData],
              statusMessage: 'OK',
              statusCode: 200 },
           _peername: { address: '::1', family: 'IPv6', port: 50070 } },
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: false,
        headers: 
         { host: 'localhost:8080',
           connection: 'keep-alive',
           pragma: 'no-cache',
           'cache-control': 'no-cache',
           'user-agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.132 Safari/537.36',
           accept: '*/*',
           referer: 'http://localhost:8080/',
           'accept-encoding': 'gzip, deflate, sdch',
           'accept-language': 'zh-CN,zh;q=0.8,en;q=0.6',
           cookie: 'io=B5ehkX7J-gME2Jd5AAAA; amvid=7b2309f47fa4b428ae50a46e3d3c4381' },
        rawHeaders: 
         [ 'Host',
           'localhost:8080',
           'Connection',
           'keep-alive',
           'Pragma',
           'no-cache',
           'Cache-Control',
           'no-cache',
           'User-Agent',
           'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.132 Safari/537.36',
           'Accept',
           '*/*',
           'Referer',
           'http://localhost:8080/',
           'Accept-Encoding',
           'gzip, deflate, sdch',
           'Accept-Language',
           'zh-CN,zh;q=0.8,en;q=0.6',
           'Cookie',
           'io=B5ehkX7J-gME2Jd5AAAA; amvid=7b2309f47fa4b428ae50a46e3d3c4381' ],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/socket.io/?EIO=3&transport=polling&t=LEiG-Ij',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: 
         Socket {
           _connecting: false,
           _hadError: false,
           _handle: 
            TCP {
              _externalStream: {},
              fd: -1,
              reading: true,
              owner: [Circular],
              onread: [Function: onread],
              onconnection: null,
              writeQueueSize: 0 },
           _parent: null,
           _host: null,
           _readableState: 
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: [],
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              defaultEncoding: 'utf8',
              ranOut: false,
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           domain: null,
           _events: 
            { end: 
               [ { [Function: g] listener: [Function: onend] },
                 [Function: socketOnEnd] ],
              finish: [Function: onSocketFinish],
              _socketEnd: [Function: onSocketEnd],
              drain: [ [Function: ondrain], [Function: socketOnDrain] ],
              timeout: [Function],
              error: [Function: socketOnError],
              close: 
               [ [Function: serverSocketCloseListener],
                 [Function: onServerResponseClose] ],
              data: [Function: socketOnData],
              resume: [Function: onSocketResume],
              pause: [Function: onSocketPause] },
           _eventsCount: 10,
           _maxListeners: undefined,
           _writableState: 
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 3,
              prefinished: false,
              errorEmitted: false },
           writable: true,
           allowHalfOpen: true,
           destroyed: false,
           bytesRead: 0,
           _bytesDispatched: 311,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server: 
            Server {
              domain: null,
              _events: 
               { connection: [Function: connectionListener],
                 clientError: [Function],
                 close: [Function: bound ],
                 upgrade: [Function],
                 request: [Function] },
              _eventsCount: 5,
              _maxListeners: undefined,
              _connections: 1,
              _handle: 
               TCP {
                 _externalStream: {},
                 fd: -1,
                 reading: false,
                 owner: [Circular],
                 onread: null,
                 onconnection: [Function: onconnection],
                 writeQueueSize: 0 },
              _usingSlaves: false,
              _slaves: [],
              _unref: false,
              allowHalfOpen: true,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              _pendingResponseData: 0,
              _connectionKey: '6::::8080' },
           _idleTimeout: 120000,
           _idleNext: 
            { [Function: utcDate]
              _onTimeout: [Function],
              _idleTimeout: 5,
              _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
              _idlePrev: [Circular],
              _idleStart: 995 },
           _idlePrev: 
            { _idleNext: [Circular],
              _idlePrev: 
               { [Function: utcDate]
                 _onTimeout: [Function],
                 _idleTimeout: 5,
                 _idleNext: [Circular],
                 _idlePrev: [Circular],
                 _idleStart: 995 } },
           _idleStart: 997,
           parser: 
            HTTPParser {
              '0': [Function: parserOnHeaders],
              '1': [Function: parserOnHeadersComplete],
              '2': [Function: parserOnBody],
              '3': [Function: parserOnMessageComplete],
              '4': [Function: onParserExecute],
              _headers: [],
              _url: '',
              _consumed: true,
              socket: [Circular],
              incoming: [Circular],
              maxHeaderPairs: 2000,
              onIncoming: [Function: parserOnIncoming] },
           on: [Function: socketOnWrap],
           _paused: false,
           read: [Function],
           _consuming: true,
           _httpMessage: 
            ServerResponse {
              domain: null,
              _events: { finish: [Function: resOnFinish] },
              _eventsCount: 1,
              _maxListeners: undefined,
              output: [],
              outputEncodings: [],
              outputCallbacks: [],
              outputSize: 0,
              writable: true,
              _last: false,
              chunkedEncoding: false,
              shouldKeepAlive: true,
              useChunkedEncodingByDefault: true,
              sendDate: true,
              _removedHeader: {},
              _contentLength: null,
              _hasBody: true,
              _trailer: '',
              finished: true,
              _headerSent: true,
              socket: [Circular],
              connection: [Circular],
              _header: 'HTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-Length: 101\r\nAccess-Control-Allow-Origin: *\r\nSet-Cookie: io=A6RWxddJuNa2BXdbAAAA\r\nDate: Fri, 25 Mar 2016 05:34:04 GMT\r\nConnection: keep-alive\r\n\r\n',
              _headers: null,
              _headerNames: {},
              _onPendingData: [Function: updateOutgoingData],
              statusMessage: 'OK',
              statusCode: 200 },
           _peername: { address: '::1', family: 'IPv6', port: 50070 } },
        _consuming: false,
        _dumped: false,
        _query: { EIO: '3', transport: 'polling', t: 'LEiG-Ij' },
        res: 
         ServerResponse {
           domain: null,
           _events: { finish: [Function: resOnFinish] },
           _eventsCount: 1,
           _maxListeners: undefined,
           output: [],
           outputEncodings: [],
           outputCallbacks: [],
           outputSize: 0,
           writable: true,
           _last: false,
           chunkedEncoding: false,
           shouldKeepAlive: true,
           useChunkedEncodingByDefault: true,
           sendDate: true,
           _removedHeader: {},
           _contentLength: null,
           _hasBody: true,
           _trailer: '',
           finished: true,
           _headerSent: true,
           socket: 
            Socket {
              _connecting: false,
              _hadError: false,
              _handle: 
               TCP {
                 _externalStream: {},
                 fd: -1,
                 reading: true,
                 owner: [Circular],
                 onread: [Function: onread],
                 onconnection: null,
                 writeQueueSize: 0 },
              _parent: null,
              _host: null,
              _readableState: 
               ReadableState {
                 objectMode: false,
                 highWaterMark: 16384,
                 buffer: [],
                 length: 0,
                 pipes: null,
                 pipesCount: 0,
                 flowing: true,
                 ended: false,
                 endEmitted: false,
                 reading: true,
                 sync: false,
                 needReadable: true,
                 emittedReadable: false,
                 readableListening: false,
                 resumeScheduled: false,
                 defaultEncoding: 'utf8',
                 ranOut: false,
                 awaitDrain: 0,
                 readingMore: false,
                 decoder: null,
                 encoding: null },
              readable: true,
              domain: null,
              _events: 
               { end: 
                  [ { [Function: g] listener: [Function: onend] },
                    [Function: socketOnEnd] ],
                 finish: [Function: onSocketFinish],
                 _socketEnd: [Function: onSocketEnd],
                 drain: [ [Function: ondrain], [Function: socketOnDrain] ],
                 timeout: [Function],
                 error: [Function: socketOnError],
                 close: 
                  [ [Function: serverSocketCloseListener],
                    [Function: onServerResponseClose] ],
                 data: [Function: socketOnData],
                 resume: [Function: onSocketResume],
                 pause: [Function: onSocketPause] },
              _eventsCount: 10,
              _maxListeners: undefined,
              _writableState: 
               WritableState {
                 objectMode: false,
                 highWaterMark: 16384,
                 needDrain: false,
                 ending: false,
                 ended: false,
                 finished: false,
                 decodeStrings: false,
                 defaultEncoding: 'utf8',
                 length: 0,
                 writing: false,
                 corked: 0,
                 sync: false,
                 bufferProcessing: false,
                 onwrite: [Function],
                 writecb: null,
                 writelen: 0,
                 bufferedRequest: null,
                 lastBufferedRequest: null,
                 pendingcb: 3,
                 prefinished: false,
                 errorEmitted: false },
              writable: true,
              allowHalfOpen: true,
              destroyed: false,
              bytesRead: 0,
              _bytesDispatched: 311,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: 
               Server {
                 domain: null,
                 _events: 
                  { connection: [Function: connectionListener],
                    clientError: [Function],
                    close: [Function: bound ],
                    upgrade: [Function],
                    request: [Function] },
                 _eventsCount: 5,
                 _maxListeners: undefined,
                 _connections: 1,
                 _handle: 
                  TCP {
                    _externalStream: {},
                    fd: -1,
                    reading: false,
                    owner: [Circular],
                    onread: null,
                    onconnection: [Function: onconnection],
                    writeQueueSize: 0 },
                 _usingSlaves: false,
                 _slaves: [],
                 _unref: false,
                 allowHalfOpen: true,
                 pauseOnConnect: false,
                 httpAllowHalfOpen: false,
                 timeout: 120000,
                 _pendingResponseData: 0,
                 _connectionKey: '6::::8080' },
              _idleTimeout: 120000,
              _idleNext: 
               { [Function: utcDate]
                 _onTimeout: [Function],
                 _idleTimeout: 5,
                 _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
                 _idlePrev: [Circular],
                 _idleStart: 995 },
              _idlePrev: 
               { _idleNext: [Circular],
                 _idlePrev: 
                  { [Function: utcDate]
                    _onTimeout: [Function],
                    _idleTimeout: 5,
                    _idleNext: [Circular],
                    _idlePrev: [Circular],
                    _idleStart: 995 } },
              _idleStart: 997,
              parser: 
               HTTPParser {
                 '0': [Function: parserOnHeaders],
                 '1': [Function: parserOnHeadersComplete],
                 '2': [Function: parserOnBody],
                 '3': [Function: parserOnMessageComplete],
                 '4': [Function: onParserExecute],
                 _headers: [],
                 _url: '',
                 _consumed: true,
                 socket: [Circular],
                 incoming: [Circular],
                 maxHeaderPairs: 2000,
                 onIncoming: [Function: parserOnIncoming] },
              on: [Function: socketOnWrap],
              _paused: false,
              read: [Function],
              _consuming: true,
              _httpMessage: [Circular],
              _peername: { address: '::1', family: 'IPv6', port: 50070 } },
           connection: 
            Socket {
              _connecting: false,
              _hadError: false,
              _handle: 
               TCP {
                 _externalStream: {},
                 fd: -1,
                 reading: true,
                 owner: [Circular],
                 onread: [Function: onread],
                 onconnection: null,
                 writeQueueSize: 0 },
              _parent: null,
              _host: null,
              _readableState: 
               ReadableState {
                 objectMode: false,
                 highWaterMark: 16384,
                 buffer: [],
                 length: 0,
                 pipes: null,
                 pipesCount: 0,
                 flowing: true,
                 ended: false,
                 endEmitted: false,
                 reading: true,
                 sync: false,
                 needReadable: true,
                 emittedReadable: false,
                 readableListening: false,
                 resumeScheduled: false,
                 defaultEncoding: 'utf8',
                 ranOut: false,
                 awaitDrain: 0,
                 readingMore: false,
                 decoder: null,
                 encoding: null },
              readable: true,
              domain: null,
              _events: 
               { end: 
                  [ { [Function: g] listener: [Function: onend] },
                    [Function: socketOnEnd] ],
                 finish: [Function: onSocketFinish],
                 _socketEnd: [Function: onSocketEnd],
                 drain: [ [Function: ondrain], [Function: socketOnDrain] ],
                 timeout: [Function],
                 error: [Function: socketOnError],
                 close: 
                  [ [Function: serverSocketCloseListener],
                    [Function: onServerResponseClose] ],
                 data: [Function: socketOnData],
                 resume: [Function: onSocketResume],
                 pause: [Function: onSocketPause] },
              _eventsCount: 10,
              _maxListeners: undefined,
              _writableState: 
               WritableState {
                 objectMode: false,
                 highWaterMark: 16384,
                 needDrain: false,
                 ending: false,
                 ended: false,
                 finished: false,
                 decodeStrings: false,
                 defaultEncoding: 'utf8',
                 length: 0,
                 writing: false,
                 corked: 0,
                 sync: false,
                 bufferProcessing: false,
                 onwrite: [Function],
                 writecb: null,
                 writelen: 0,
                 bufferedRequest: null,
                 lastBufferedRequest: null,
                 pendingcb: 3,
                 prefinished: false,
                 errorEmitted: false },
              writable: true,
              allowHalfOpen: true,
              destroyed: false,
              bytesRead: 0,
              _bytesDispatched: 311,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: 
               Server {
                 domain: null,
                 _events: 
                  { connection: [Function: connectionListener],
                    clientError: [Function],
                    close: [Function: bound ],
                    upgrade: [Function],
                    request: [Function] },
                 _eventsCount: 5,
                 _maxListeners: undefined,
                 _connections: 1,
                 _handle: 
                  TCP {
                    _externalStream: {},
                    fd: -1,
                    reading: false,
                    owner: [Circular],
                    onread: null,
                    onconnection: [Function: onconnection],
                    writeQueueSize: 0 },
                 _usingSlaves: false,
                 _slaves: [],
                 _unref: false,
                 allowHalfOpen: true,
                 pauseOnConnect: false,
                 httpAllowHalfOpen: false,
                 timeout: 120000,
                 _pendingResponseData: 0,
                 _connectionKey: '6::::8080' },
              _idleTimeout: 120000,
              _idleNext: 
               { [Function: utcDate]
                 _onTimeout: [Function],
                 _idleTimeout: 5,
                 _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
                 _idlePrev: [Circular],
                 _idleStart: 995 },
              _idlePrev: 
               { _idleNext: [Circular],
                 _idlePrev: 
                  { [Function: utcDate]
                    _onTimeout: [Function],
                    _idleTimeout: 5,
                    _idleNext: [Circular],
                    _idlePrev: [Circular],
                    _idleStart: 995 } },
              _idleStart: 997,
              parser: 
               HTTPParser {
                 '0': [Function: parserOnHeaders],
                 '1': [Function: parserOnHeadersComplete],
                 '2': [Function: parserOnBody],
                 '3': [Function: parserOnMessageComplete],
                 '4': [Function: onParserExecute],
                 _headers: [],
                 _url: '',
                 _consumed: true,
                 socket: [Circular],
                 incoming: [Circular],
                 maxHeaderPairs: 2000,
                 onIncoming: [Function: parserOnIncoming] },
              on: [Function: socketOnWrap],
              _paused: false,
              read: [Function],
              _consuming: true,
              _httpMessage: [Circular],
              _peername: { address: '::1', family: 'IPv6', port: 50070 } },
           _header: 'HTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-Length: 101\r\nAccess-Control-Allow-Origin: *\r\nSet-Cookie: io=A6RWxddJuNa2BXdbAAAA\r\nDate: Fri, 25 Mar 2016 05:34:04 GMT\r\nConnection: keep-alive\r\n\r\n',
           _headers: null,
           _headerNames: {},
           _onPendingData: [Function: updateOutgoingData],
           statusMessage: 'OK',
           statusCode: 200 },
        cleanup: [Function: cleanup] },
     remoteAddress: '::1',
     checkIntervalTimer: null,
     upgradeTimeoutTimer: null,
     pingTimeoutTimer: 
      { _called: false,
        _idleTimeout: 85000,
        _idlePrev: 
         Timer {
           '0': [Function: listOnTimeout],
           _idleNext: [Circular],
           _idlePrev: [Circular],
           msecs: 85000 },
        _idleNext: 
         Timer {
           '0': [Function: listOnTimeout],
           _idleNext: [Circular],
           _idlePrev: [Circular],
           msecs: 85000 },
        _idleStart: 978,
        _onTimeout: [Function],
        _repeat: null },
     transport: 
      XHR {
        readyState: 'open',
        discarded: false,
        closeTimeout: 30000,
        maxHttpBufferSize: 100000000,
        httpCompression: { threshold: 1024 },
        supportsBinary: true,
        _events: 
         { error: { [Function: g] listener: [Function: bound ] },
           packet: [Function: bound ],
           drain: [ [Function: bound ], [Function: onDrain] ],
           close: { [Function: g] listener: [Function: bound ] },
           headers: [Function] },
        _eventsCount: 5,
        sid: 'A6RWxddJuNa2BXdbAAAA',
        req: null,
        res: null,
        writable: false },
     _events: 
      { close: [ { [Function: g] listener: [Function] }, [Function: bound ] ],
        data: [Function: bound ],
        error: [Function: bound ] },
     _eventsCount: 3 },
  rooms: {},
  acks: {},
  connected: true,
  disconnected: false,
  handshake: 
   { headers: 
      { host: 'localhost:8080',
        connection: 'keep-alive',
        pragma: 'no-cache',
        'cache-control': 'no-cache',
        'user-agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.132 Safari/537.36',
        accept: '*/*',
        referer: 'http://localhost:8080/',
        'accept-encoding': 'gzip, deflate, sdch',
        'accept-language': 'zh-CN,zh;q=0.8,en;q=0.6',
        cookie: 'io=B5ehkX7J-gME2Jd5AAAA; amvid=7b2309f47fa4b428ae50a46e3d3c4381' },
     time: 'Fri Mar 25 2016 13:34:05 GMT+0800 (中国标准时间)',
     address: '::1',
     xdomain: false,
     secure: false,
     issued: 1458884045008,
     url: '/socket.io/?EIO=3&transport=polling&t=LEiG-Ij',
     query: { EIO: '3', transport: 'polling', t: 'LEiG-Ij' } } }